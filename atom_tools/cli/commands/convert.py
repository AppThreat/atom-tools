"""
Convert Command for the atom-tools CLI.
"""

from cleo.commands.command import Command
from cleo.helpers import option

from atom_tools.lib.converter import OpenAPI


class ConvertCommand(Command):
    """
    Represents a command to convert an atom slice to a different format.

    This command handles the conversion of an atom slice to a specified
    destination format. It requires a slice generated by atom and a Bill of
    Materials (BOM) generated by cdxgen.

    Attributes:
        name (str): The name of the command.
        description (str): The description of the command.
        options (list): The list of options for the command.
        help (str): The help message for the command.

    Methods:
        handle: Executes the command and performs the conversion.
    """

    name = 'convert'
    description = 'Convert an atom slice to a different format'
    options = [
        option(
            'format',
            'f',
            'Destination format',
            flag=False,
            default='openapi3.1.0',
        ),
        option(
            'bom-file',
            'b',
            'Path to bom generated by cdxgen',
        ),
        option('usages-slice', 'u', 'Usages slice file'),
        option(
            'reachables-slice',
            'r',
            'Reachables slice file',
        ),
    ]
    help = """The convert command converts an atom slice to a different format.
    This operation requires a slice generated by atom and a bom generated by
    cdxgen using the --evidence option."""
    # TODO: add logger
    # loggers = []

    def handle(self):
        """
        Executes the convert command and performs the conversion.
        """
        match self.option('format'):
            case 'openapi3.0.1', 'openapi3.1.0':
                converter_instance = OpenAPI(
                    self.option('format'),
                    self.option('bom-file'),
                    self.option('language'),
                    self.option('usages-slice'),
                    self.option('reachables-slice'),
                )
                converter_instance.convert_slices()
            case _:
                raise ValueError(
                    f'Unknown destination format: {self.option("format")}'
                )
