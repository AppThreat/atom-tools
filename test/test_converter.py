import os

import pytest

from atom_tools.lib.converter import OpenAPI


@pytest.fixture
def java_usages_1():
    return OpenAPI('openapi3.1.0', 'java',
                   'test/data/java-piggymetrics-usages.json')


@pytest.fixture
def java_usages_2():
    return OpenAPI('openapi3.0.1', 'java',
                   'test/data/java-sec-code-usages.json')


@pytest.fixture
def js_usages_1():
    return OpenAPI('openapi3.0.1', 'javascript',
                   'test/data/js-juiceshop-usages.json')


@pytest.fixture
def js_usages_2():
    return OpenAPI('openapi3.0.1', 'js', 'test/data/js-nodegoat-usages.json')


@pytest.fixture
def py_usages_1():
    return OpenAPI('openapi3.0.1', 'python', 'test/data/py-airflow-usages.json')


@pytest.fixture
def py_usages_2():
    return OpenAPI('openapi3.0.1', 'py', 'test/data/py-tornado-usages.json')


def test_populate_endpoints(js_usages_1, js_usages_2):
    # The populate_endpoints method is the final operation in convert_usages.
    # However, it's difficult to test the output when the order of params can
    # differ.
    methods = js_usages_1.process_methods()
    methods = js_usages_1.methods_to_endpoints(methods)
    assert methods == {
        'full_names': {'routes\\dataErasure.ts::program': {'resolved_methods': {"router.get('/',async(req:Request,res:Response,next:NextFunction):Promise<void>=>{\rconstloggedInUser=insecurity.authenticatedUsers.get(req.cookies.token)\rif(!loggedInUser){\rnext(newError('Blockedillegalactivityby'+req.socket.remoteAddress))\rreturn\r}\rconstemail=loggedInUser.data.email\r\rtry{\rconstanswer=awaitSecurityAnswerModel.findOne({\rinclude:[{\rmodel:UserModel,\rwhere:{email}\r}]\r})\rif(answer==null){\rthrownewError('Noanswerfound!')\r}\rconstquestion=awaitSecurityQuestionModel.findByPk(answer.SecurityQuestionId)\rif(question==null){\rthrownewError('Noquestionfound!')\r}\r\rres.render('dataErasureForm',{userEmail:email,securityQuestion:question.question})\r}catch(error){\rnext(error)\r}\r})": {'endpoints': ['/',
lockedillegalactivityby',
oanswerfound!',
oquestionfound!',
dataErasureForm']},
                                                                         "router.post('/',async(req:Request<Record<string,unknown>,Record<string,unknown>,DataErasureRequestParams>,res:Response,next:NextFunction):Promise<void>=>{\rconstloggedInUser=insecurity.authenticatedUsers.get(req.cookies.token)\rif(!loggedInUser){\rnext(newError('Blockedillegalactivityby'+req.socket.remoteAddress))\rreturn\r}\r\rtry{\rawaitPrivacyRequestModel.create({\rUserId:loggedInUser.data.id,\rdeletionRequested:true\r})\r\rres.clearCookie('token')\rif(req.body.layout){\rconstfilePath:string=path.resolve(req.body.layout).toLowerCase()\rconstisForbiddenFile:boolean=(filePath.includes('ftp')||filePath.includes('ctf.key')||filePath.includes('encryptionkeys'))\rif(!isForbiddenFile){\rres.render('dataErasureResult',{\r...req.body\r},(error,html)=>{\rif(!html||error){\rnext(newError(error.message))\r}else{\r...": {'endpoints': ['/',
lockedillegalactivityby',
token',
ftp',
ctf.key',
encryptionkeys',
dataErasureResult']}}},
                'server.ts::program': {'resolved_methods': {"app.delete('/api/Addresss/:id',security.appendUserId(),address.delAddressById())": {'endpoints': ['/api/Addresss/:id']},
                                                            "app.delete('/api/Cards/:id',security.appendUserId(),payment.delPaymentMethodById())": {'endpoints': ['/api/Cards/:id']},
                                                            "app.delete('/api/Products/:id',security.denyAll())": {'endpoints': ['/api/Products/:id']},
                                                            "app.delete('/api/Quantitys/:id',security.denyAll())": {'endpoints': ['/api/Quantitys/:id']},
                                                            "app.delete('/api/Recycles/:id',security.denyAll())": {'endpoints': ['/api/Recycles/:id']},
                                                            "app.disable('x-powered-by')": {'endpoints': ['/x-powered-by']},
                                                            "app.enable('trustproxy')": {'endpoints': ['/trustproxy']},
                                                            "app.get('/api/Addresss',security.appendUserId(),address.getAddress())": {'endpoints': ['/api/Addresss']},
                                                            "app.get('/api/Addresss/:id',security.appendUserId(),address.getAddressById())": {'endpoints': ['/api/Addresss/:id']},
                                                            "app.get('/api/Cards',security.appendUserId(),payment.getPaymentMethods())": {'endpoints': ['/api/Cards']},
                                                            "app.get('/api/Cards/:id',security.appendUserId(),payment.getPaymentMethodById())": {'endpoints': ['/api/Cards/:id']},
                                                            "app.get('/api/Complaints',security.isAuthorized())": {'endpoints': ['/api/Complaints']},
                                                            "app.get('/api/Deliverys',delivery.getDeliveryMethods())": {'endpoints': ['/api/Deliverys']},
                                                            "app.get('/api/Deliverys/:id',delivery.getDeliveryMethod())": {'endpoints': ['/api/Deliverys/:id']},
                                                            "app.get('/api/PrivacyRequests',security.denyAll())": {'endpoints': ['/api/PrivacyRequests']},
                                                            "app.get('/api/Recycles',recycles.blockRecycleItems())": {'endpoints': ['/api/Recycles']},
                                                            "app.get('/api/Recycles/:id',recycles.getRecycleItem())": {'endpoints': ['/api/Recycles/:id']},
                                                            "app.get('/api/SecurityAnswers',security.denyAll())": {'endpoints': ['/api/SecurityAnswers']},
                                                            "app.get('/api/Users',security.isAuthorized())": {'endpoints': ['/api/Users']},
                                                            "app.get('/metrics',metrics.serveMetrics())": {'endpoints': ['/metrics']},
                                                            "app.get('/profile',security.updateAuthenticatedUsers(),userProfile())": {'endpoints': ['/profile']},
                                                            "app.get('/promotion',videoHandler.promotionVideo())": {'endpoints': ['/promotion']},
                                                            "app.get('/redirect',redirect())": {'endpoints': ['/redirect']},
                                                            "app.get('/rest/2fa/status',security.isAuthorized(),twoFactorAuth.status())": {'endpoints': ['/rest/2fa/status']},
                                                            "app.get('/rest/admin/application-configuration',appConfiguration())": {'endpoints': ['/rest/admin/application-configuration']},
                                                            "app.get('/rest/admin/application-version',appVersion())": {'endpoints': ['/rest/admin/application-version']},
                                                            "app.get('/rest/basket/:id',basket())": {'endpoints': ['/rest/basket/:id']},
                                                            "app.get('/rest/captcha',captcha())": {'endpoints': ['/rest/captcha']},
                                                            "app.get('/rest/chatbot/status',chatbot.status())": {'endpoints': ['/rest/chatbot/status']},
                                                            "app.get('/rest/continue-code',continueCode.continueCode())": {'endpoints': ['/rest/continue-code']},
                                                            "app.get('/rest/continue-code-findIt',continueCode.continueCodeFindIt())": {'endpoints': ['/rest/continue-code-findIt']},
                                                            "app.get('/rest/continue-code-fixIt',continueCode.continueCodeFixIt())": {'endpoints': ['/rest/continue-code-fixIt']},
                                                            "app.get('/rest/country-mapping',countryMapping())": {'endpoints': ['/rest/country-mapping']},
                                                            "app.get('/rest/deluxe-membership',deluxe.deluxeMembershipStatus())": {'endpoints': ['/rest/deluxe-membership']},
                                                            "app.get('/rest/image-captcha',imageCaptcha())": {'endpoints': ['/rest/image-captcha']},
                                                            "app.get('/rest/languages',languageList())": {'endpoints': ['/rest/languages']},
                                                            "app.get('/rest/memories',memory.getMemories())": {'endpoints': ['/rest/memories']},
                                                            "app.get('/rest/order-history',orderHistory.orderHistory())": {'endpoints': ['/rest/order-history']},
                                                            "app.get('/rest/order-history/orders',security.isAccounting(),orderHistory.allOrders())": {'endpoints': ['/rest/order-history/orders']},
                                                            "app.get('/rest/products/:id/reviews',showProductReviews())": {'endpoints': ['/rest/products/:id/reviews']},
                                                            "app.get('/rest/products/search',search())": {'endpoints': ['/rest/products/search']},
                                                            "app.get('/rest/repeat-notification',repeatNotification())": {'endpoints': ['/rest/repeat-notification']},
                                                            "app.get('/rest/saveLoginIp',saveLoginIp())": {'endpoints': ['/rest/saveLoginIp']},
                                                            "app.get('/rest/track-order/:id',trackOrder())": {'endpoints': ['/rest/track-order/:id']},
                                                            "app.get('/rest/user/authentication-details',authenticatedUsers())": {'endpoints': ['/rest/user/authentication-details']},
                                                            "app.get('/rest/user/change-password',changePassword())": {'endpoints': ['/rest/user/change-password']},
                                                            "app.get('/rest/user/security-question',securityQuestion())": {'endpoints': ['/rest/user/security-question']},
                                                            "app.get('/rest/user/whoami',security.updateAuthenticatedUsers(),currentUser())": {'endpoints': ['/rest/user/whoami']},
                                                            "app.get('/rest/wallet/balance',security.appendUserId(),wallet.getWalletBalance())": {'endpoints': ['/rest/wallet/balance']},
                                                            "app.get('/rest/web3/nftMintListen',nftMint.nftMintListener())": {'endpoints': ['/rest/web3/nftMintListen']},
                                                            "app.get('/rest/web3/nftUnlocked',checkKeys.nftUnlocked())": {'endpoints': ['/rest/web3/nftUnlocked']},
                                                            "app.get('/snippets',vulnCodeSnippet.serveChallengesWithCodeSnippet())": {'endpoints': ['/snippets']},
                                                            "app.get('/snippets/:challenge',vulnCodeSnippet.serveCodeSnippet())": {'endpoints': ['/snippets/:challenge']},
                                                            "app.get('/snippets/fixes/:key',vulnCodeFixes.serveCodeFixes())": {'endpoints': ['/snippets/fixes/:key']},
                                                            "app.get('/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg',easterEgg())": {'endpoints': ['/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg']},
                                                            "app.get('/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us',premiumReward())": {'endpoints': ['/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us']},
                                                            "app.get('/video',videoHandler.getVideo())": {'endpoints': ['/video']},
                                                            "app.get('/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility',privacyPolicyProof())": {'endpoints': ['/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility']},
                                                            "app.get(['/.well-known/security.txt','/security.txt'],verify.accessControlChallenges())": {'endpoints': ['/.well-known/security.txt',
                                                                                                                                                                      '/security.txt']},
                                                            "app.options('*',cors())": {'endpoints': ['/*']},
                                                            "app.patch('/rest/products/reviews',security.isAuthorized(),updateProductReviews())": {'endpoints': ['/rest/products/reviews']},
                                                            "app.post('/api/Addresss',security.appendUserId())": {'endpoints': ['/api/Addresss']},
                                                            "app.post('/api/BasketItems',security.appendUserId(),basketItems.quantityCheckBeforeBasketItemAddition(),basketItems.addBasketItem())": {'endpoints': ['/api/BasketItems']},
                                                            "app.post('/api/Cards',security.appendUserId())": {'endpoints': ['/api/Cards']},
                                                            "app.post('/api/Challenges',security.denyAll())": {'endpoints': ['/api/Challenges']},
                                                            "app.post('/api/Complaints',security.isAuthorized())": {'endpoints': ['/api/Complaints']},
                                                            "app.post('/api/Feedbacks',captcha.verifyCaptcha())": {'endpoints': ['/api/Feedbacks']},
                                                            "app.post('/api/Feedbacks',verify.captchaBypassChallenge())": {'endpoints': ['/api/Feedbacks']},
                                                            "app.post('/api/Feedbacks',verify.forgedFeedbackChallenge())": {'endpoints': ['/api/Feedbacks']},
                                                            "app.post('/api/PrivacyRequests',security.isAuthorized())": {'endpoints': ['/api/PrivacyRequests']},
                                                            "app.post('/api/Products',security.isAuthorized())": {'endpoints': ['/api/Products']},
                                                            "app.post('/api/Quantitys',security.denyAll())": {'endpoints': ['/api/Quantitys']},
                                                            "app.post('/api/Recycles',security.isAuthorized())": {'endpoints': ['/api/Recycles']},
                                                            "app.post('/api/SecurityQuestions',security.denyAll())": {'endpoints': ['/api/SecurityQuestions']},
                                                            "app.post('/api/Users',(req:Request,res:Response,next:NextFunction)=>{\rif(req.body.email!==undefined&&req.body.password!==undefined&&req.body.passwordRepeat!==undefined){\rif(req.body.email.length!==0&&req.body.password.length!==0){\rreq.body.email=req.body.email.trim()\rreq.body.password=req.body.password.trim()\rreq.body.passwordRepeat=req.body.passwordRepeat.trim()\r}else{\rres.status(400).send(res.__('Invalidemail/passwordcannotbeempty'))\r}\r}\rnext()\r})": {'endpoints': ['/api/Users',
nvalidemail/passwordcannotbeempty']},
                                                            "app.post('/api/Users',verify.emptyUserRegistration())": {'endpoints': ['/api/Users']},
                                                            "app.post('/api/Users',verify.passwordRepeatChallenge())": {'endpoints': ['/api/Users']},
                                                            "app.post('/api/Users',verify.registerAdminChallenge())": {'endpoints': ['/api/Users']},
                                                            "app.post('/b2b/v2/orders',b2bOrder())": {'endpoints': ['/b2b/v2/orders']},
                                                            "app.post('/file-upload',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),handleZipFileUpload,checkUploadSize,checkFileType,handleXmlUpload)": {'endpoints': ['/file-upload',
                                                                                                                                                                                                                                                                       '/file']},
                                                            "app.post('/profile',updateUserProfile())": {'endpoints': ['/profile']},
                                                            "app.post('/profile/image/file',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),profileImageFileUpload())": {'endpoints': ['/profile/image/file',
                                                                                                                                                                                                                                     '/file']},
                                                            "app.post('/profile/image/url',uploadToMemory.single('file'),profileImageUrlUpload())": {'endpoints': ['/profile/image/url',
                                                                                                                                                                   '/file']},
                                                            "app.post('/rest/2fa/disable',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rsecurity.isAuthorized(),\rtwoFactorAuth.disable()\r)": {'endpoints': ['/rest/2fa/disable']},
                                                            "app.post('/rest/2fa/setup',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rsecurity.isAuthorized(),\rtwoFactorAuth.setup()\r)": {'endpoints': ['/rest/2fa/setup']},
                                                            "app.post('/rest/2fa/verify',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rtwoFactorAuth.verify()\r)": {'endpoints': ['/rest/2fa/verify']},
                                                            "app.post('/rest/basket/:id/checkout',order())": {'endpoints': ['/rest/basket/:id/checkout']},
                                                            "app.post('/rest/chatbot/respond',chatbot.process())": {'endpoints': ['/rest/chatbot/respond']},
                                                            "app.post('/rest/deluxe-membership',security.appendUserId(),deluxe.upgradeToDeluxe())": {'endpoints': ['/rest/deluxe-membership']},
                                                            "app.post('/rest/memories',uploadToDisk.single('image'),ensureFileIsPassed,security.appendUserId(),metrics.observeFileUploadMetricsMiddleware(),memory.addMemory())": {'endpoints': ['/rest/memories',
                                                                                                                                                                                                                                                 '/image']},
                                                            "app.post('/rest/products/reviews',security.isAuthorized(),likeProductReviews())": {'endpoints': ['/rest/products/reviews']},
                                                            "app.post('/rest/user/data-export',security.appendUserId(),dataExport())": {'endpoints': ['/rest/user/data-export']},
                                                            "app.post('/rest/user/data-export',security.appendUserId(),imageCaptcha.verifyCaptcha())": {'endpoints': ['/rest/user/data-export']},
                                                            "app.post('/rest/user/login',login())": {'endpoints': ['/rest/user/login']},
                                                            "app.post('/rest/user/reset-password',resetPassword())": {'endpoints': ['/rest/user/reset-password']},
                                                            "app.post('/rest/web3/submitKey',checkKeys.checkKeys())": {'endpoints': ['/rest/web3/submitKey']},
                                                            "app.post('/rest/web3/walletExploitAddress',web3Wallet.contractExploitListener())": {'endpoints': ['/rest/web3/walletExploitAddress']},
                                                            "app.post('/rest/web3/walletNFTVerify',nftMint.walletNFTVerify())": {'endpoints': ['/rest/web3/walletNFTVerify']},
                                                            "app.post('/snippets/fixes',vulnCodeFixes.checkCorrectFix())": {'endpoints': ['/snippets/fixes']},
                                                            "app.post('/snippets/verdict',vulnCodeSnippet.checkVulnLines())": {'endpoints': ['/snippets/verdict']},
                                                            "app.put('/api/Addresss/:id',security.appendUserId())": {'endpoints': ['/api/Addresss/:id']},
                                                            "app.put('/api/BasketItems/:id',security.appendUserId(),basketItems.quantityCheckBeforeBasketItemUpdate())": {'endpoints': ['/api/BasketItems/:id']},
                                                            "app.put('/api/Cards/:id',security.denyAll())": {'endpoints': ['/api/Cards/:id']},
                                                            "app.put('/api/Feedbacks/:id',security.denyAll())": {'endpoints': ['/api/Feedbacks/:id']},
                                                            "app.put('/api/Recycles/:id',security.denyAll())": {'endpoints': ['/api/Recycles/:id']},
                                                            "app.put('/rest/basket/:id/coupon/:coupon',coupon())": {'endpoints': ['/rest/basket/:id/coupon/:coupon']},
                                                            "app.put('/rest/continue-code-findIt/apply/:continueCode',restoreProgress.restoreProgressFindIt())": {'endpoints': ['/rest/continue-code-findIt/apply/:continueCode']},
                                                            "app.put('/rest/continue-code-fixIt/apply/:continueCode',restoreProgress.restoreProgressFixIt())": {'endpoints': ['/rest/continue-code-fixIt/apply/:continueCode']},
                                                            "app.put('/rest/continue-code/apply/:continueCode',restoreProgress.restoreProgress())": {'endpoints': ['/rest/continue-code/apply/:continueCode']},
                                                            "app.put('/rest/order-history/:id/delivery-status',security.isAccounting(),orderHistory.toggleDeliveryStatus())": {'endpoints': ['/rest/order-history/:id/delivery-status']},
                                                            "app.put('/rest/products/:id/reviews',createProductReviews())": {'endpoints': ['/rest/products/:id/reviews']},
                                                            "app.put('/rest/wallet/balance',security.appendUserId(),wallet.addWalletBalance())": {'endpoints': ['/rest/wallet/balance']},
                                                            "app.route('/api/Users/:id')": {'endpoints': ['/api/Users/:id']},
                                                            "app.set('viewengine','hbs')": {'endpoints': ['/viewengine',
                                                                                                          '/hbs']},
                                                            "app.use('/api-docs',swaggerUi.serve,swaggerUi.setup(swaggerDocument))": {'endpoints': ['/api-docs']},
                                                            "app.use('/api/BasketItems',security.isAuthorized())": {'endpoints': ['/api/BasketItems']},
                                                            "app.use('/api/BasketItems/:id',security.isAuthorized())": {'endpoints': ['/api/BasketItems/:id']},
                                                            "app.use('/api/Challenges/:id',security.denyAll())": {'endpoints': ['/api/Challenges/:id']},
                                                            "app.use('/api/Complaints/:id',security.denyAll())": {'endpoints': ['/api/Complaints/:id']},
                                                            "app.use('/api/Feedbacks/:id',security.isAuthorized())": {'endpoints': ['/api/Feedbacks/:id']},
                                                            "app.use('/api/PrivacyRequests',security.isAuthorized())": {'endpoints': ['/api/PrivacyRequests']},
                                                            "app.use('/api/PrivacyRequests/:id',security.denyAll())": {'endpoints': ['/api/PrivacyRequests/:id']},
                                                            "app.use('/api/PrivacyRequests/:id',security.isAuthorized())": {'endpoints': ['/api/PrivacyRequests/:id']},
                                                            "app.use('/api/Quantitys/:id',security.isAccounting(),ipfilter(['123.456.789'],{mode:'allow'}))": {'endpoints': ['/api/Quantitys/:id',
                                                                                                                                                                             '/123.456.789',
                                                                                                                                                                             '/allow']},
                                                            "app.use('/api/SecurityAnswers/:id',security.denyAll())": {'endpoints': ['/api/SecurityAnswers/:id']},
                                                            "app.use('/api/SecurityQuestions/:id',security.denyAll())": {'endpoints': ['/api/SecurityQuestions/:id']},
                                                            "app.use('/assets/i18n',verify.accessControlChallenges())": {'endpoints': ['/assets/i18n']},
                                                            "app.use('/assets/public/images/padding',verify.accessControlChallenges())": {'endpoints': ['/assets/public/images/padding']},
                                                            "app.use('/assets/public/images/products',verify.accessControlChallenges())": {'endpoints': ['/assets/public/images/products']},
                                                            "app.use('/assets/public/images/uploads',verify.accessControlChallenges())": {'endpoints': ['/assets/public/images/uploads']},
                                                            "app.use('/b2b/v2',security.isAuthorized())": {'endpoints': ['/b2b/v2']},
                                                            "app.use('/dataerasure',dataErasure)": {'endpoints': ['/dataerasure']},
                                                            "app.use('/encryptionkeys',serveIndexMiddleware,serveIndex('encryptionkeys',{icons:true,view:'details'}))": {'endpoints': ['/encryptionkeys',
                                                                                                                                                                                       '/encryptionkeys',
                                                                                                                                                                                       '/details']},
                                                            "app.use('/encryptionkeys/:file',keyServer())": {'endpoints': ['/encryptionkeys/:file']},
                                                            "app.use('/ftp',serveIndexMiddleware,serveIndex('ftp',{icons:true}))": {'endpoints': ['/ftp',
                                                                                                                                                  '/ftp']},
                                                            "app.use('/ftp(?!/quarantine)/:file',fileServer())": {'endpoints': ['/ftp(?!/quarantine)/:file']},
                                                            "app.use('/ftp/quarantine/:file',quarantineServer())": {'endpoints': ['/ftp/quarantine/:file']},
                                                            "app.use('/rest/basket',security.isAuthorized(),security.appendUserId())": {'endpoints': ['/rest/basket']},
                                                            "app.use('/rest/basket/:id',security.isAuthorized())": {'endpoints': ['/rest/basket/:id']},
                                                            "app.use('/rest/basket/:id/order',security.isAuthorized())": {'endpoints': ['/rest/basket/:id/order']},
                                                            "app.use('/rest/user/authentication-details',security.isAuthorized())": {'endpoints': ['/rest/user/authentication-details']},
                                                            "app.use('/rest/user/reset-password',newRateLimit({\rwindowMs:5*60*1000,\rmax:100,\rkeyGenerator({headers,ip}:{headers:any,ip:any}){returnheaders['X-Forwarded-For']||ip}//vuln-code-snippetvuln-lineresetPasswordMortyChallenge\r}))": {'endpoints': ['/rest/user/reset-password',
                                                                                                                                                                                                                                                                                                                   '/X-Forwarded-For']},
                                                            "app.use('/solve/challenges/server-side',verify.serverSideChallenges())": {'endpoints': ['/solve/challenges/server-side']},
                                                            "app.use('/support/logs',serveIndexMiddleware,serveIndex('logs',{icons:true,view:'details'}))": {'endpoints': ['/support/logs',
                                                                                                                                                                           '/logs',
                                                                                                                                                                           '/details']},
                                                            "app.use('/support/logs',verify.accessControlChallenges())": {'endpoints': ['/support/logs']},
                                                            "app.use('/support/logs/:file',logFileServer())": {'endpoints': ['/support/logs/:file']},
                                                            "app.use((req:Request,res:Response,next:NextFunction)=>{\rreq.url=req.url.replace(/[/]+/g,'/')\rnext()\r})": {'endpoints': ['/']},
                                                            "app.use((req:Request,res:Response,next:NextFunction)=>{\rres.append('X-Recruiting',config.get('application.securityTxt.hiring'))\rnext()\r})": {'endpoints': ['/X-Recruiting',
                                                                                                                                                                                                                           '/application.securityTxt.hiring']},
                                                            "app.use(['/.well-known/security.txt','/security.txt'],securityTxt({\rcontact:config.get('application.securityTxt.contact'),\rencryption:config.get('application.securityTxt.encryption'),\racknowledgements:config.get('application.securityTxt.acknowledgements'),\r'Preferred-Languages':[...newSet(locales.map((locale:{key:string})=>locale.key.substr(0,2)))].join(','),\rhiring:config.get('application.securityTxt.hiring'),\rexpires:securityTxtExpiration.toUTCString()\r}))": {'endpoints': ['/.well-known/security.txt',
security.txt',
application.securityTxt.contact',
application.securityTxt.encryption',
application.securityTxt.acknowledgements',
referred-Languages',
application.securityTxt.hiring']},
                                                            "app.use(bodyParser.text({type:'*/*'}))": {'endpoints': ['/*/*']},
                                                            "app.use(cookieParser('kekse'))": {'endpoints': ['/kekse']},
                                                            "app.use(express.static(path.resolve('frontend/dist/frontend')))": {'endpoints': ['/frontend/dist/frontend']},
                                                            "app.use(functionjsonParser(req:Request,res:Response,next:NextFunction){\r//@ts-expect-errorFIXMEintentionallysavingoriginalrequestinthisproperty\rreq.rawBody=req.body\rif(req.headers['content-type']?.includes('application/json')){\rif(!req.body){\rreq.body={}\r}\rif(req.body!==Object(req.body)){//Expensiveworkaroundfor500errorsduringFrisbytestrun(see#640)\rreq.body=JSON.parse(req.body)\r}\r}\rnext()\r})": {'endpoints': ['/content-type',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     '/application/json']},
                                                            "app.use(morgan('combined',{stream:accessLogStream}))": {'endpoints': ['/combined']},
                                                            "app.use(robots({UserAgent:'*',Disallow:'/ftp'}))": {'endpoints': ['/*',
                                                                                                                               '/ftp']}}}}}
    methods = js_usages_1.process_calls(methods)
    result = js_usages_1.populate_endpoints(methods)
    result_keys = list(result.keys())
    result_keys.sort()
    assert result_keys == ['/',
 '/*',
 '/*/*',
 '/.well-known/security.txt',
 '/123.456.789',
 '/Blockedillegalactivityby',
 '/Invalidemail/passwordcannotbeempty',
 '/Noanswerfound!',
 '/Noquestionfound!',
 '/Preferred-Languages',
 '/X-Forwarded-For',
 '/X-Recruiting',
 '/allow',
 '/api-docs',
 '/api/Addresss',
 '/api/Addresss/{id}',
 '/api/BasketItems',
 '/api/BasketItems/{id}',
 '/api/Cards',
 '/api/Cards/{id}',
 '/api/Challenges',
 '/api/Challenges/{id}',
 '/api/Complaints',
 '/api/Complaints/{id}',
 '/api/Deliverys',
 '/api/Deliverys/{id}',
 '/api/Feedbacks',
 '/api/Feedbacks/{id}',
 '/api/PrivacyRequests',
 '/api/PrivacyRequests/{id}',
 '/api/Products',
 '/api/Products/{id}',
 '/api/Quantitys',
 '/api/Quantitys/{id}',
 '/api/Recycles',
 '/api/Recycles/{id}',
 '/api/SecurityAnswers',
 '/api/SecurityAnswers/{id}',
 '/api/SecurityQuestions',
 '/api/SecurityQuestions/{id}',
 '/api/Users',
 '/api/Users/{id}',
 '/application.securityTxt.acknowledgements',
 '/application.securityTxt.contact',
 '/application.securityTxt.encryption',
 '/application.securityTxt.hiring',
 '/application/json',
 '/assets/i18n',
 '/assets/public/images/padding',
 '/assets/public/images/products',
 '/assets/public/images/uploads',
 '/b2b/v2',
 '/b2b/v2/orders',
 '/combined',
 '/content-type',
 '/ctf.key',
 '/dataErasureForm',
 '/dataErasureResult',
 '/dataerasure',
 '/details',
 '/encryptionkeys',
 '/encryptionkeys/{file}',
 '/file',
 '/file-upload',
 '/frontend/dist/frontend',
 '/ftp',
 '/ftp(?!/quarantine)/{file}',
 '/ftp/quarantine/{file}',
 '/hbs',
 '/image',
 '/kekse',
 '/logs',
 '/metrics',
 '/profile',
 '/profile/image/file',
 '/profile/image/url',
 '/promotion',
 '/redirect',
 '/rest/2fa/disable',
 '/rest/2fa/setup',
 '/rest/2fa/status',
 '/rest/2fa/verify',
 '/rest/admin/application-configuration',
 '/rest/admin/application-version',
 '/rest/basket',
 '/rest/basket/{id}',
 '/rest/basket/{id}/checkout',
 '/rest/basket/{id}/coupon/{coupon}',
 '/rest/basket/{id}/order',
 '/rest/captcha',
 '/rest/chatbot/respond',
 '/rest/chatbot/status',
 '/rest/continue-code',
 '/rest/continue-code-findIt',
 '/rest/continue-code-findIt/apply/{continueCode}',
 '/rest/continue-code-fixIt',
 '/rest/continue-code-fixIt/apply/{continueCode}',
 '/rest/continue-code/apply/{continueCode}',
 '/rest/country-mapping',
 '/rest/deluxe-membership',
 '/rest/image-captcha',
 '/rest/languages',
 '/rest/memories',
 '/rest/order-history',
 '/rest/order-history/orders',
 '/rest/order-history/{id}/delivery-status',
 '/rest/products/reviews',
 '/rest/products/search',
 '/rest/products/{id}/reviews',
 '/rest/repeat-notification',
 '/rest/saveLoginIp',
 '/rest/track-order/{id}',
 '/rest/user/authentication-details',
 '/rest/user/change-password',
 '/rest/user/data-export',
 '/rest/user/login',
 '/rest/user/reset-password',
 '/rest/user/security-question',
 '/rest/user/whoami',
 '/rest/wallet/balance',
 '/rest/web3/nftMintListen',
 '/rest/web3/nftUnlocked',
 '/rest/web3/submitKey',
 '/rest/web3/walletExploitAddress',
 '/rest/web3/walletNFTVerify',
 '/security.txt',
 '/snippets',
 '/snippets/fixes',
 '/snippets/fixes/{key}',
 '/snippets/verdict',
 '/snippets/{challenge}',
 '/solve/challenges/server-side',
 '/support/logs',
 '/support/logs/{file}',
 '/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg',
 '/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us',
 '/token',
 '/trustproxy',
 '/video',
 '/viewengine',
 '/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility',
 '/x-powered-by']
    assert list(
        result['/rest/continue-code-findIt/apply/{continueCode}'].keys()) == ['parameters', 'put', 'x-atom-usages']

    methods = js_usages_2.process_methods()
    methods = js_usages_2.methods_to_endpoints(methods)
    assert methods == {'full_names': {'app\\routes\\index.js::program': {'resolved_methods': {'app.use("/tutorial",tutorialRouter)': {'endpoints': ['/tutorial']}}},
                'app\\routes\\index.js::program:index': {'resolved_methods': {'app.get("/",sessionHandler.displayWelcomePage)': {'endpoints': ['/']},
                                                                              'app.get("/allocations/:userId",isLoggedIn,allocationsHandler.displayAllocations)': {'endpoints': ['/allocations/:userId']},
                                                                              'app.get("/benefits",isLoggedIn,benefitsHandler.displayBenefits)': {'endpoints': ['/benefits']},
                                                                              'app.get("/contributions",isLoggedIn,contributionsHandler.displayContributions)': {'endpoints': ['/contributions']},
                                                                              'app.get("/dashboard",isLoggedIn,sessionHandler.displayWelcomePage)': {'endpoints': ['/dashboard']},
                                                                              'app.get("/learn",isLoggedIn,(req,res)=>{//Insecurewaytohandleredirectsbytakingredirecturlfromquerystringreturnres.redirect(req.query.url);})': {'endpoints': ['/learn']},
                                                                              'app.get("/login",sessionHandler.displayLoginPage)': {'endpoints': ['/login']},
                                                                              'app.get("/logout",sessionHandler.displayLogoutPage)': {'endpoints': ['/logout']},
                                                                              'app.get("/memos",isLoggedIn,memosHandler.displayMemos)': {'endpoints': ['/memos']},
                                                                              'app.get("/profile",isLoggedIn,profileHandler.displayProfile)': {'endpoints': ['/profile']},
                                                                              'app.get("/research",isLoggedIn,researchHandler.displayResearch)': {'endpoints': ['/research']},
                                                                              'app.get("/signup",sessionHandler.displaySignupPage)': {'endpoints': ['/signup']},
                                                                              'app.post("/benefits",isLoggedIn,benefitsHandler.updateBenefits)': {'endpoints': ['/benefits']},
                                                                              'app.post("/contributions",isLoggedIn,contributionsHandler.handleContributionsUpdate)': {'endpoints': ['/contributions']},
                                                                              'app.post("/login",sessionHandler.handleLoginRequest)': {'endpoints': ['/login']},
                                                                              'app.post("/memos",isLoggedIn,memosHandler.addMemos)': {'endpoints': ['/memos']},
                                                                              'app.post("/profile",isLoggedIn,profileHandler.handleProfileUpdate)': {'endpoints': ['/profile']},
                                                                              'app.post("/signup",sessionHandler.handleSignup)': {'endpoints': ['/signup']},
                                                                              'app.use("/tutorial",tutorialRouter)': {'endpoints': ['/tutorial']}}},
                'app\\routes\\tutorial.js::program': {'resolved_methods': {'router.get("/",(req,res)=>{"usestrict";returnres.render("tutorial/a1",{environmentalScripts});})': {'endpoints': ['/',
                                                                                                                                                                                              '/usestrict',
                                                                                                                                                                                              '/tutorial/a1']},
                                                                           'router.get(`/${page}`,(req,res)=>{"usestrict";returnres.render(`tutorial/${page}`,{environmentalScripts});})': {'endpoints': ['/usestrict']}}},
                'server.js::program': {'resolved_methods': {'app.set("viewengine","html")': {'endpoints': ['/viewengine',
                                                                                                           '/html']},
                                                            'app.set("views",`${__dirname}/app/views`)': {'endpoints': ['/views']},
                                                            'app.use(favicon(__dirname+"/app/assets/favicon.ico"))': {'endpoints': ['/app/assets/favicon.ico']},
                                                            'app.use(session({//genid:(req)=>{//returngenuuid()//useUUIDsforsessionIDs//},secret:cookieSecret,//BothmandatoryinExpressv4saveUninitialized:true,resave:true/*//FixforA5-SecurityMisConfig//Usegenericcookienamekey:"sessionId",*//*//FixforA3-XSS//TODO:Add"maxAge"cookie:{httpOnly:true//RemembertostartanHTTPSservertogetthisworking//secure:true}*/}))': {'endpoints': ['/sessionId',
                                                                                                                                                                                                                                                                                                                                                                                                                                          '/maxAge']}}}}}
    methods = js_usages_2.process_calls(methods)
    result = js_usages_2.populate_endpoints(methods)
    assert len(list(result['/login'].keys())) == 3
    result = list(result.keys())
    result.sort()
    assert result == ['/', '/allocations/{userId}', '/app/assets/favicon.ico',
                      '/benefits', '/contributions', '/dashboard', '/html',
                      '/learn', '/login', '/logout', '/maxAge', '/memos',
                      '/profile', '/research', '/sessionId', '/signup',
                      '/tutorial', '/tutorial/a1', '/usestrict', '/viewengine',
                      '/views']


def test_usages_class(java_usages_1):
    assert java_usages_1.title == 'OpenAPI Specification for data'


def test_convert_usages(java_usages_1, java_usages_2, js_usages_1, js_usages_2, py_usages_1, py_usages_2):
    assert java_usages_1.convert_usages() == {'/': {'post': {'responses': {}},
       'x-atom-usages': {'com.piggymetrics.account.controller.AccountController.createNewAccount': [35]}},
 '/accounts/{accountName}': {'get': {'responses': {}},
                             'parameters': [{'in': 'path',
                                             'name': 'accountName',
                                             'required': True}],
                             'x-atom-usages': {'com.piggymetrics.notification.client.AccountServiceClient.getAccount': [12]}},
 '/current': {'get': {'responses': {}},
              'put': {'responses': {}},
              'x-atom-usages': {'com.piggymetrics.statistics.controller.StatisticsController.getCurrentAccountStatistics': [20,
                                                                                                                            22]}},
 '/latest': {'get': {'responses': {}},
             'x-atom-usages': {'com.piggymetrics.statistics.client.ExchangeRatesClient.getRates': [13]}},
 '/statistics/{accountName}': {'parameters': [{'in': 'path',
                                               'name': 'accountName',
                                               'required': True}],
                               'put': {'responses': {}},
                               'x-atom-usages': {'com.piggymetrics.account.client.StatisticsServiceClient.updateStatistics': [13]}},
 '/uaa/users': {'post': {'responses': {}},
                'x-atom-usages': {'com.piggymetrics.account.client.AuthServiceClient.createUser': [12]}},
 '/{accountName}': {'get': {'responses': {}},
                    'parameters': [{'in': 'path',
                                    'name': 'accountName',
                                    'required': True}],
                    'put': {'responses': {}},
                    'x-atom-usages': {'com.piggymetrics.statistics.controller.StatisticsController.saveAccountStatistics': [32]}},
 '/{name}': {'get': {'responses': {}},
             'parameters': [{'in': 'path', 'name': 'name', 'required': True}],
             'x-atom-usages': {'com.piggymetrics.account.controller.AccountController.getAccountByName': [20]}}}
    assert java_usages_2.convert_usages() == {'/': {'get': {'responses': {}},
       'x-atom-usages': {'org.joychou.controller.Test.Index': [15]}},
 '/*': {'get': {'responses': {}},
        'x-atom-usages': {'org.joychou.controller.Cors.vuls3': [41]}},
 '/Digester/sec': {'post': {'responses': {}},
                   'x-atom-usages': {'org.joychou.controller.XXE.DigesterSec': [213]}},
 '/Digester/vuln': {'post': {'responses': {}},
                    'x-atom-usages': {'org.joychou.controller.XXE.DigesterVuln': [198]}},
 '/DocumentBuilder/Sec': {'post': {'responses': {}},
                          'x-atom-usages': {'org.joychou.controller.XXE.DocumentBuilderSec': [263]}},
 '/DocumentBuilder/vuln': {'post': {'responses': {}},
                           'x-atom-usages': {'org.joychou.controller.XXE.DocumentBuilderVuln': [236]}},
 '/DocumentBuilder/xinclude/sec': {'post': {'responses': {}},
                                   'x-atom-usages': {'org.joychou.controller.XXE.DocumentBuilderXincludeSec': [312]}},
 '/DocumentBuilder/xinclude/vuln': {'post': {'responses': {}},
                                    'x-atom-usages': {'org.joychou.controller.XXE.DocumentBuilderXincludeVuln': [286]}},
 '/DocumentHelper/vuln': {'post': {'responses': {}},
                          'x-atom-usages': {'org.joychou.controller.XXE.DocumentHelper': [388]}},
 '/HttpSyncClients/vuln': {'get': {'responses': {}},
                           'x-atom-usages': {'org.joychou.controller.SSRF.HttpSyncClients': [265]}},
 '/HttpURLConnection/sec': {'get': {'responses': {}},
                            'x-atom-usages': {'org.joychou.controller.SSRF.httpURLConnection': [74]}},
 '/HttpURLConnection/vuln': {'get': {'responses': {}},
                             'x-atom-usages': {'org.joychou.controller.SSRF.httpURLConnectionVuln': [87]}},
 '/IOUtils/sec': {'get': {'responses': {}},
                  'x-atom-usages': {'org.joychou.controller.SSRF.IOUtils': [246]}},
 '/ImageIO/sec': {'get': {'responses': {}},
                  'x-atom-usages': {'org.joychou.controller.SSRF.ImageIO': [153]}},
 '/Jsoup/sec': {'get': {'responses': {}},
                'x-atom-usages': {'org.joychou.controller.SSRF.Jsoup': [226]}},
 '/ProcessBuilder': {'get': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.Rce.processBuilder': [64]}},
 '/SAXBuilder/sec': {'post': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.XXE.SAXBuilderSec': [102]}},
 '/SAXBuilder/vuln': {'post': {'responses': {}},
                      'x-atom-usages': {'org.joychou.controller.XXE.SAXBuilderVuln': [86]}},
 '/SAXParser/sec': {'post': {'responses': {}},
                    'x-atom-usages': {'org.joychou.controller.XXE.SAXParserSec': [178]}},
 '/SAXParser/vuln': {'post': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.XXE.SAXParserVuln': [160]}},
 '/SAXReader/sec': {'post': {'responses': {}},
                    'x-atom-usages': {'org.joychou.controller.XXE.SAXReaderSec': [141]}},
 '/SAXReader/vuln': {'post': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.XXE.SAXReaderVuln': [123]}},
 '/XMLReader/sec': {'post': {'responses': {}},
                    'x-atom-usages': {'org.joychou.controller.XXE.XMLReaderSec': [362]}},
 '/XMLReader/vuln': {'post': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.XXE.XMLReaderVuln': [342]}},
 '/aa': {'x-atom-usages': {'org.joychou.controller.Test.test': [27]}},
 '/any': {'get': {'responses': {}},
          'x-atom-usages': {'org.joychou.controller.FileUpload.index': [39]}},
 '/appInfo': {'x-atom-usages': {'org.joychou.controller.Index.appInfo': [24]}},
 '/application/javascript': {'get': {'responses': {}},
                             'x-atom-usages': {'org.joychou.controller.Jsonp.safecode': [102]}},
 '/classloader': {'x-atom-usages': {'org.joychou.controller.ClassDataLoader.classData': [15]}},
 '/codeinject': {'get': {'responses': {}},
                 'x-atom-usages': {'org.joychou.controller.CommandInject.codeInject': [24]}},
 '/codeinject/host': {'get': {'responses': {}},
                      'x-atom-usages': {'org.joychou.controller.CommandInject.codeInjectHost': [39]}},
 '/codeinject/sec': {'get': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.CommandInject.codeInjectSec': [51]}},
 '/commonsHttpClient/sec': {'get': {'responses': {}},
                            'x-atom-usages': {'org.joychou.controller.SSRF.commonsHttpClient': [207]}},
 '/createToken': {'get': {'responses': {}},
                  'x-atom-usages': {'org.joychou.controller.Jwt.createToken': [31]}},
 '/deserialize': {'post': {'responses': {}},
                  'x-atom-usages': {'org.joychou.controller.Fastjson.Deserialize': [17]}},
 '/dnsrebind/vuln': {'get': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.SSRF.DnsRebind': [308]}},
 '/exclued/vuln': {'get': {'responses': {}},
                   'x-atom-usages': {'org.joychou.controller.GetRequestURI.exclued': [34]}},
 '/fastjsonp/getToken': {'get': {'responses': {}},
                         'x-atom-usages': {'org.joychou.controller.Jsonp.getCsrfToken2': [128]}},
 '/forward': {'x-atom-usages': {'org.joychou.controller.URLRedirect.forward': [64]}},
 '/getName': {'get': {'responses': {}},
              'x-atom-usages': {'org.joychou.controller.Jwt.getNickname': [56]}},
 '/getToken': {'get': {'responses': {}},
               'x-atom-usages': {'org.joychou.controller.Jsonp.getCsrfToken1': [118]}},
 '/groovy': {'get': {'responses': {}},
             'x-atom-usages': {'org.joychou.controller.Rce.groovyshell': [128]}},
 '/httpclient/sec': {'get': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.SSRF.HttpClient': [187]}},
 '/hutool/vuln': {'get': {'responses': {}},
                  'x-atom-usages': {'org.joychou.controller.SSRF.hutoolHttp': [298]}},
 '/index': {'x-atom-usages': {'org.joychou.controller.Index.index': [46]}},
 '/jdbc/ps/vuln': {'x-atom-usages': {'org.joychou.controller.SQLI.jdbc_ps_vuln': [138]}},
 '/jdbc/sec': {'x-atom-usages': {'org.joychou.controller.SQLI.jdbc_sqli_sec': [94]}},
 '/jdbc/vuln': {'x-atom-usages': {'org.joychou.controller.SQLI.jdbc_sqli_vul': [51]}},
 '/jscmd': {'get': {'responses': {}},
            'x-atom-usages': {'org.joychou.controller.Rce.jsEngine': [96]}},
 '/log4j': {'get': {'responses': {}},
            'x-atom-usages': {'org.joychou.controller.Log4j.log4j': [19]}},
 '/login': {'x-atom-usages': {'org.joychou.controller.Login.login': [22]}},
 '/logout': {'get': {'responses': {}},
             'x-atom-usages': {'org.joychou.controller.Login.logoutPage': [27]}},
 '/mybatis/orderby/sec04': {'get': {'responses': {}},
                            'x-atom-usages': {'org.joychou.controller.SQLI.mybatisOrderBySec04': [240]}},
 '/mybatis/orderby/vuln03': {'get': {'responses': {}},
                             'x-atom-usages': {'org.joychou.controller.SQLI.mybatisVuln03': [201]}},
 '/mybatis/sec01': {'get': {'responses': {}},
                    'x-atom-usages': {'org.joychou.controller.SQLI.mybatisSec01': [211]}},
 '/mybatis/sec02': {'get': {'responses': {}},
                    'x-atom-usages': {'org.joychou.controller.SQLI.mybatisSec02': [220]}},
 '/mybatis/sec03': {'get': {'responses': {}},
                    'x-atom-usages': {'org.joychou.controller.SQLI.mybatisSec03': [230]}},
 '/mybatis/vuln01': {'get': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.SQLI.mybatisVuln01': [181]}},
 '/mybatis/vuln02': {'get': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.SQLI.mybatisVuln02': [191]}},
 '/noproxy': {'x-atom-usages': {'org.joychou.controller.IPForge.noProxy': [20]}},
 '/object2jsonp': {'x-atom-usages': {'org.joychou.controller.Jsonp.advice': [76]}},
 '/okhttp/sec': {'get': {'responses': {}},
                 'x-atom-usages': {'org.joychou.controller.SSRF.okhttp': [168]}},
 '/openStream': {'get': {'responses': {}},
                 'x-atom-usages': {'org.joychou.controller.SSRF.openStream': [118]}},
 '/path_traversal/sec': {'get': {'responses': {}},
                         'x-atom-usages': {'org.joychou.controller.PathTraversal.getImageSec': [29]}},
 '/path_traversal/vul': {'get': {'responses': {}},
                         'x-atom-usages': {'org.joychou.controller.PathTraversal.getImage': [24]}},
 '/pic': {'get': {'responses': {}},
          'x-atom-usages': {'org.joychou.controller.FileUpload.uploadPic': [45]}},
 '/post': {'post': {'responses': {}},
           'x-atom-usages': {'org.joychou.controller.CSRF.post': [24]}},
 '/postgresql': {'post': {'responses': {}},
                 'x-atom-usages': {'org.joychou.controller.Rce.postgresql': [137]}},
 '/proxy': {'x-atom-usages': {'org.joychou.controller.IPForge.proxy': [31]}},
 '/readxlsx': {'post': {'responses': {}},
               'x-atom-usages': {'org.joychou.controller.othervulns.xlsxStreamerXXE.xllx_streamer_xxe': [35,
                                                                                                         43]}},
 '/redirect': {'get': {'responses': {}},
               'x-atom-usages': {'org.joychou.controller.URLRedirect.redirect': [31]}},
 '/reflect': {'x-atom-usages': {'org.joychou.controller.XSS.reflect': [27]}},
 '/rememberMe/security': {'x-atom-usages': {'org.joychou.controller.Deserialize.rememberMeBlackClassCheck': [60]}},
 '/rememberMe/vuln': {'x-atom-usages': {'org.joychou.controller.Deserialize.rememberMeVul': [35]}},
 '/request/sec': {'get': {'responses': {}},
                  'x-atom-usages': {'org.joychou.controller.SSRF.request': [97]}},
 '/restTemplate/vuln1': {'get': {'responses': {}},
                         'x-atom-usages': {'org.joychou.controller.SSRF.RestTemplateUrlBanRedirects': [277]}},
 '/restTemplate/vuln2': {'get': {'responses': {}},
                         'x-atom-usages': {'org.joychou.controller.SSRF.RestTemplateUrl': [285]}},
 '/runtime/exec': {'get': {'responses': {}},
                   'x-atom-usages': {'org.joychou.controller.Rce.CommandExec': [31]}},
 '/safe': {'x-atom-usages': {'org.joychou.controller.XSS.safe': [65]}},
 '/safecode': {'x-atom-usages': {'org.joychou.controller.CRLFInjection.crlf': [20]}},
 '/sec': {'get': {'responses': {}},
          'x-atom-usages': {'org.joychou.controller.URLWhiteList.sec': [125]}},
 '/sec/array_indexOf': {'get': {'responses': {}},
                        'x-atom-usages': {'org.joychou.controller.URLWhiteList.sec_array_indexOf': [151]}},
 '/sec/checkOrigin': {'get': {'responses': {}},
                      'x-atom-usages': {'org.joychou.controller.Cors.seccode': [104]}},
 '/sec/checkReferer': {'x-atom-usages': {'org.joychou.controller.Jsonp.safecode': [102]}},
 '/sec/corsFilter': {'x-atom-usages': {'org.joychou.controller.Cors.getCsrfToken_04': [98]}},
 '/sec/crossOrigin': {'get': {'responses': {}},
                      'x-atom-usages': {'org.joychou.controller.Cors.secCrossOrigin': [54]}},
 '/sec/httpCors': {'get': {'responses': {}},
                   'x-atom-usages': {'org.joychou.controller.Cors.getCsrfToken_02': [76]}},
 '/sec/originFilter': {'get': {'responses': {}},
                       'x-atom-usages': {'org.joychou.controller.Cors.getCsrfToken_03': [87]}},
 '/sec/webMvcConfigurer': {'get': {'responses': {}},
                           'x-atom-usages': {'org.joychou.controller.Cors.getCsrfToken_01': [65]}},
 '/sec/yarm': {'get': {'responses': {}},
               'x-atom-usages': {'org.joychou.controller.Rce.secYarm': [118]}},
 '/sendRedirect': {'x-atom-usages': {'org.joychou.controller.URLRedirect.sendRedirect': [52]}},
 '/sendRedirect/sec': {'x-atom-usages': {'org.joychou.controller.URLRedirect.sendRedirect_seccode': [81]}},
 '/setHeader': {'head': {'responses': {}},
                'x-atom-usages': {'org.joychou.controller.URLRedirect.setHeader': [40]}},
 '/spel/vuln': {'get': {'responses': {}},
                'x-atom-usages': {'org.joychou.controller.SpEL.rce': [24]}},
 '/status': {'get': {'responses': {}},
             'x-atom-usages': {'org.joychou.controller.FileUpload.uploadStatus': [76]}},
 '/stored/show': {'x-atom-usages': {'org.joychou.controller.XSS.show': [55]}},
 '/stored/store': {'x-atom-usages': {'org.joychou.controller.XSS.store': [40]}},
 '/upload': {'get': {'responses': {}},
             'post': {'responses': {}},
             'x-atom-usages': {'org.joychou.controller.othervulns.xlsxStreamerXXE.index': [29,
                                                                                           37]}},
 '/upload/picture': {'post': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.FileUpload.uploadPicture': [82]}},
 '/urlConnection/sec': {'get': {'responses': {}},
                        'x-atom-usages': {'org.joychou.controller.SSRF.URLConnectionSec': [50]}},
 '/urlConnection/vuln': {'get': {'responses': {}},
                         'post': {'responses': {}},
                         'x-atom-usages': {'org.joychou.controller.SSRF.URLConnectionVuln': [44]}},
 '/velocity': {'get': {'responses': {}},
               'x-atom-usages': {'org.joychou.controller.SSTI.velocity': [26]}},
 '/vuln/contains': {'get': {'responses': {}},
                    'x-atom-usages': {'org.joychou.controller.URLWhiteList.contains': [56]}},
 '/vuln/crossOrigin': {'x-atom-usages': {'org.joychou.controller.Cors.vuls3': [42]}},
 '/vuln/emptyReferer': {'x-atom-usages': {'org.joychou.controller.Jsonp.emptyReferer': [57]}},
 '/vuln/endsWith': {'get': {'responses': {}},
                    'x-atom-usages': {'org.joychou.controller.URLWhiteList.endsWith': [36]}},
 '/vuln/mappingJackson2JsonView': {'x-atom-usages': {'org.joychou.controller.Jsonp.mappingJackson2JsonView': [89]}},
 '/vuln/origin': {'get': {'responses': {}},
                  'x-atom-usages': {'org.joychou.controller.Cors.vuls1': [25]}},
 '/vuln/referer': {'x-atom-usages': {'org.joychou.controller.Jsonp.referer': [45]}},
 '/vuln/regex': {'get': {'responses': {}},
                 'x-atom-usages': {'org.joychou.controller.URLWhiteList.regex': [74]}},
 '/vuln/setHeader': {'get': {'responses': {}},
                     'head': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.Cors.vuls2': [33]}},
 '/vuln/url_bypass': {'get': {'responses': {}},
                      'x-atom-usages': {'org.joychou.controller.URLWhiteList.url_bypass': [98]}},
 '/vuln/yarm': {'get': {'responses': {}},
                'x-atom-usages': {'org.joychou.controller.Rce.yarm': [112]}},
 '/vuln01': {'get': {'responses': {}},
             'x-atom-usages': {'org.joychou.controller.Cookies.vuln01': [25]}},
 '/vuln02': {'get': {'responses': {}},
             'x-atom-usages': {'org.joychou.controller.Cookies.vuln02': [32]}},
 '/vuln03': {'get': {'responses': {}},
             'x-atom-usages': {'org.joychou.controller.Cookies.vuln03': [45]}},
 '/vuln04': {'get': {'responses': {}},
             'x-atom-usages': {'org.joychou.controller.Cookies.vuln04': [61]}},
 '/vuln05': {'get': {'responses': {}},
             'x-atom-usages': {'org.joychou.controller.Cookies.vuln05': [76]}},
 '/vuln06': {'get': {'responses': {}},
             'x-atom-usages': {'org.joychou.controller.Cookies.vuln06': [82]}},
 '/websocket/cmd': {'x-atom-usages': {'org.joychou.controller.WebSockets.cmdInject': [30]}},
 '/websocket/proxy': {'x-atom-usages': {'org.joychou.controller.WebSockets.proxyInject': [53]}},
 '/xmlReader/sec': {'post': {'responses': {}},
                    'x-atom-usages': {'org.joychou.controller.XXE.xmlReaderSec': [63]}},
 '/xmlReader/vuln': {'post': {'responses': {}},
                     'x-atom-usages': {'org.joychou.controller.XXE.xmlReaderVuln': [48]}},
 '/xmlbeam/vuln': {'post': {'responses': {}},
                   'x-atom-usages': {'org.joychou.controller.XXE.post': [419]}},
 '/xstream': {'post': {'responses': {}},
              'x-atom-usages': {'org.joychou.controller.XStreamRce.parseXml': [23]}}}
    assert len(js_usages_1.convert_usages()) == 142
    assert len(js_usages_2.convert_usages()) == 21
    assert py_usages_2.convert_usages() == {'/': {},
 '/127.0.0.1': {},
 '/auth/google': {},
 '/google_oauth': {},
 '/logout': {}}


# Airflow slice is too large to upload.
@pytest.mark.skipif(not os.path.exists('test/data/py-airflow-usages.json'), reason="requires test/data/py-airflow-usages.json")
def test_convert_usages2(py_usages_1):
    assert py_usages_1.convert_usages() == {
        '/': {}, '/dags/{dag_id}': {
        'parameters': [{'in': 'path', 'name': 'dag_id', 'required': True,
                        'schema': {'type': 'string'}}]},
        '/dags/{dag_id}/code': {'parameters': [
            {'in': 'path', 'name': 'dag_id', 'required': True,
             'schema': {'type': 'string'}}]}, '/dags/{dag_id}/dag_runs': {
            'parameters': [{'in': 'path', 'name': 'dag_id', 'required': True,
                            'schema': {'type': 'string'}}]},
        '/dags/{dag_id}/dag_runs/{'
        'execution_date}': {'parameters': [
            {'in': 'path', 'name': 'dag_id', 'required': True,
             'schema': {'type': 'string'}},
            {'in': 'path', 'name': 'execution_date', 'required': True,
             'schema': {'type': 'string'}}]}, '/dags/{dag_id}/dag_runs/{'
                                              'execution_date}/tasks/{task_id}': {
            'parameters': [{'in': 'path', 'name': 'dag_id', 'required': True,
                            'schema': {'type': 'string'}},
                           {'in': 'path', 'name': 'execution_date',
                            'required': True, 'schema': {'type': 'string'}},
                           {'in': 'path', 'name': 'task_id', 'required': True,
                            'schema': {'type': 'string'}}]},
        '/dags/{dag_id}/paused': {'parameters': [
            {'in': 'path', 'name': 'dag_id', 'required': True,
             'schema': {'type': 'string'}}]},
        '/dags/{dag_id}/paused/{paused}': {'parameters': [
            {'in': 'path', 'name': 'dag_id', 'required': True,
             'schema': {'type': 'string'}},
            {'in': 'path', 'name': 'paused', 'required': True,
             'schema': {'type': 'string'}}]},
        '/dags/{dag_id}/tasks/{task_id}': {'parameters': [
            {'in': 'path', 'name': 'dag_id', 'required': True,
             'schema': {'type': 'string'}},
            {'in': 'path', 'name': 'task_id', 'required': True,
             'schema': {'type': 'string'}}]}, '/info': {}, '/latest_runs': {},
        '/lineage/{dag_id}/{'
        'execution_date}': {'parameters': [
            {'in': 'path', 'name': 'dag_id', 'required': True,
             'schema': {'type': 'string'}},
            {'in': 'path', 'name': 'execution_date', 'required': True,
             'schema': {'type': 'string'}}]}, '/log/{filename}': {
            'parameters': [{'in': 'path', 'name': 'filename', 'required': True,
                            'schema': {'type': 'string'}}]}, '/pools': {},
        '/pools/{name}': {'parameters': [
            {'in': 'path', 'name': 'name', 'required': True,
             'schema': {'type': 'string'}}]}, '/test': {}
                                            }


def test_endpoints_to_openapi(java_usages_1):

    assert java_usages_1.endpoints_to_openapi() == {'info': {'title': 'OpenAPI Specification for data', 'version': '1.0.0'},
 'openapi': '3.1.0',
 'paths': {'/': {'post': {'responses': {}},
                 'x-atom-usages': {'com.piggymetrics.account.controller.AccountController.createNewAccount': [35]}},
           '/accounts/{accountName}': {'get': {'responses': {}},
                                       'parameters': [{'in': 'path',
                                                       'name': 'accountName',
                                                       'required': True}],
                                       'x-atom-usages': {'com.piggymetrics.notification.client.AccountServiceClient.getAccount': [12]}},
           '/current': {'get': {'responses': {}},
                        'put': {'responses': {}},
                        'x-atom-usages': {'com.piggymetrics.statistics.controller.StatisticsController.getCurrentAccountStatistics': [20,
                                                                                                                                      22]}},
           '/latest': {'get': {'responses': {}},
                       'x-atom-usages': {'com.piggymetrics.statistics.client.ExchangeRatesClient.getRates': [13]}},
           '/statistics/{accountName}': {'parameters': [{'in': 'path',
                                                         'name': 'accountName',
                                                         'required': True}],
                                         'put': {'responses': {}},
                                         'x-atom-usages': {'com.piggymetrics.account.client.StatisticsServiceClient.updateStatistics': [13]}},
           '/uaa/users': {'post': {'responses': {}},
                          'x-atom-usages': {'com.piggymetrics.account.client.AuthServiceClient.createUser': [12]}},
           '/{accountName}': {'get': {'responses': {}},
                              'parameters': [{'in': 'path',
                                              'name': 'accountName',
                                              'required': True}],
                              'put': {'responses': {}},
                              'x-atom-usages': {'com.piggymetrics.statistics.controller.StatisticsController.saveAccountStatistics': [32]}},
           '/{name}': {'get': {'responses': {}},
                       'parameters': [{'in': 'path',
                                       'name': 'name',
                                       'required': True}],
                       'x-atom-usages': {'com.piggymetrics.account.controller.AccountController.getAccountByName': [20]}}}}
