import pytest

from atom_tools.lib.converter import filter_calls, OpenAPI
from atom_tools.lib.utils import sort_list


def sort_openapi_result(result):
    for k, v in result.items():
        if k == 'x-atom-usages':
            for a, b in result['x-atom-usages'].items():
                for key, value in b.items():
                    value.sort()
                    result[k][a][key] = value
        elif isinstance(v, list) and len(v) >= 2:
            result[k] = sort_list(v)
        elif isinstance(v, dict):
            result[k] = sort_openapi_result(v)
    return result


@pytest.fixture
def java_usages_1():
    return OpenAPI('openapi3.1.0', 'java',
                   'test/data/java-piggymetrics-usages.json')


@pytest.fixture
def java_usages_2():
    return OpenAPI('openapi3.0.1', 'java', 'test/data/java-sec-code-usages.json')


@pytest.fixture
def js_usages_1():
    return OpenAPI('openapi3.0.1', 'javascript', 'test/data/js-juiceshop-usages.json')


@pytest.fixture
def js_usages_2():
    return OpenAPI('openapi3.0.1', 'js', 'test/data/js-nodegoat-usages.json')


@pytest.fixture
def py_usages_1():
    return OpenAPI('openapi3.0.1', 'python', 'test/data/py-django-goat-usages.json')


@pytest.fixture
def py_usages_2():
    return OpenAPI('openapi3.0.1', 'py', 'test/data/py-breakable-flask-usages.json')


def test_populate_endpoints(js_usages_1, js_usages_2):
    # The populate_endpoints method is the final operation in convert_usages.
    # However, it's difficult to test the output when the order of params can
    # differ.
    methods = js_usages_1._process_methods()
    methods = js_usages_1.methods_to_endpoints(methods)
    assert methods == {'file_names': {'routes/dataErasure.ts': {'resolved_methods': {"router.get('/',async(req:Request,res:Response,next:NextFunction):Promise<void>=>{\rconstloggedInUser=insecurity.authenticatedUsers.get(req.cookies.token)\rif(!loggedInUser){\rnext(newError('Blockedillegalactivityby'+req.socket.remoteAddress))\rreturn\r}\rconstemail=loggedInUser.data.email\r\rtry{\rconstanswer=awaitSecurityAnswerModel.findOne({\rinclude:[{\rmodel:UserModel,\rwhere:{email}\r}]\r})\rif(answer==null){\rthrownewError('Noanswerfound!')\r}\rconstquestion=awaitSecurityQuestionModel.findByPk(answer.SecurityQuestionId)\rif(question==null){\rthrownewError('Noquestionfound!')\r}\r\rres.render('dataErasureForm',{userEmail:email,securityQuestion:question.question})\r}catch(error){\rnext(error)\r}\r})": {'endpoints': ['/',
lockedillegalactivityby',
oanswerfound!',
oquestionfound!',
dataErasureForm']},
                                                               "router.post('/',async(req:Request<Record<string,unknown>,Record<string,unknown>,DataErasureRequestParams>,res:Response,next:NextFunction):Promise<void>=>{\rconstloggedInUser=insecurity.authenticatedUsers.get(req.cookies.token)\rif(!loggedInUser){\rnext(newError('Blockedillegalactivityby'+req.socket.remoteAddress))\rreturn\r}\r\rtry{\rawaitPrivacyRequestModel.create({\rUserId:loggedInUser.data.id,\rdeletionRequested:true\r})\r\rres.clearCookie('token')\rif(req.body.layout){\rconstfilePath:string=path.resolve(req.body.layout).toLowerCase()\rconstisForbiddenFile:boolean=(filePath.includes('ftp')||filePath.includes('ctf.key')||filePath.includes('encryptionkeys'))\rif(!isForbiddenFile){\rres.render('dataErasureResult',{\r...req.body\r},(error,html)=>{\rif(!html||error){\rnext(newError(error.message))\r}else{\r...": {'endpoints': ['/',
lockedillegalactivityby',
token',
ftp',
ctf.key',
encryptionkeys',
dataErasureResult']}}},
                'server.ts': {'resolved_methods': {"app.delete('/api/Addresss/:id',security.appendUserId(),address.delAddressById())": {'endpoints': ['/api/Addresss/:id']},
                                                   "app.delete('/api/Cards/:id',security.appendUserId(),payment.delPaymentMethodById())": {'endpoints': ['/api/Cards/:id']},
                                                   "app.delete('/api/Products/:id',security.denyAll())": {'endpoints': ['/api/Products/:id']},
                                                   "app.delete('/api/Quantitys/:id',security.denyAll())": {'endpoints': ['/api/Quantitys/:id']},
                                                   "app.delete('/api/Recycles/:id',security.denyAll())": {'endpoints': ['/api/Recycles/:id']},
                                                   "app.enable('trustproxy')": {'endpoints': ['/trustproxy']},
                                                   "app.get('/api/Addresss',security.appendUserId(),address.getAddress())": {'endpoints': ['/api/Addresss']},
                                                   "app.get('/api/Addresss/:id',security.appendUserId(),address.getAddressById())": {'endpoints': ['/api/Addresss/:id']},
                                                   "app.get('/api/Cards',security.appendUserId(),payment.getPaymentMethods())": {'endpoints': ['/api/Cards']},
                                                   "app.get('/api/Cards/:id',security.appendUserId(),payment.getPaymentMethodById())": {'endpoints': ['/api/Cards/:id']},
                                                   "app.get('/api/Complaints',security.isAuthorized())": {'endpoints': ['/api/Complaints']},
                                                   "app.get('/api/Deliverys',delivery.getDeliveryMethods())": {'endpoints': ['/api/Deliverys']},
                                                   "app.get('/api/Deliverys/:id',delivery.getDeliveryMethod())": {'endpoints': ['/api/Deliverys/:id']},
                                                   "app.get('/api/PrivacyRequests',security.denyAll())": {'endpoints': ['/api/PrivacyRequests']},
                                                   "app.get('/api/Recycles',recycles.blockRecycleItems())": {'endpoints': ['/api/Recycles']},
                                                   "app.get('/api/Recycles/:id',recycles.getRecycleItem())": {'endpoints': ['/api/Recycles/:id']},
                                                   "app.get('/api/SecurityAnswers',security.denyAll())": {'endpoints': ['/api/SecurityAnswers']},
                                                   "app.get('/api/Users',security.isAuthorized())": {'endpoints': ['/api/Users']},
                                                   "app.get('/metrics',metrics.serveMetrics())": {'endpoints': ['/metrics']},
                                                   "app.get('/profile',security.updateAuthenticatedUsers(),userProfile())": {'endpoints': ['/profile']},
                                                   "app.get('/promotion',videoHandler.promotionVideo())": {'endpoints': ['/promotion']},
                                                   "app.get('/redirect',redirect())": {'endpoints': ['/redirect']},
                                                   "app.get('/rest/2fa/status',security.isAuthorized(),twoFactorAuth.status())": {'endpoints': ['/rest/2fa/status']},
                                                   "app.get('/rest/admin/application-configuration',appConfiguration())": {'endpoints': ['/rest/admin/application-configuration']},
                                                   "app.get('/rest/admin/application-version',appVersion())": {'endpoints': ['/rest/admin/application-version']},
                                                   "app.get('/rest/basket/:id',basket())": {'endpoints': ['/rest/basket/:id']},
                                                   "app.get('/rest/captcha',captcha())": {'endpoints': ['/rest/captcha']},
                                                   "app.get('/rest/chatbot/status',chatbot.status())": {'endpoints': ['/rest/chatbot/status']},
                                                   "app.get('/rest/continue-code',continueCode.continueCode())": {'endpoints': ['/rest/continue-code']},
                                                   "app.get('/rest/continue-code-findIt',continueCode.continueCodeFindIt())": {'endpoints': ['/rest/continue-code-findIt']},
                                                   "app.get('/rest/continue-code-fixIt',continueCode.continueCodeFixIt())": {'endpoints': ['/rest/continue-code-fixIt']},
                                                   "app.get('/rest/country-mapping',countryMapping())": {'endpoints': ['/rest/country-mapping']},
                                                   "app.get('/rest/deluxe-membership',deluxe.deluxeMembershipStatus())": {'endpoints': ['/rest/deluxe-membership']},
                                                   "app.get('/rest/image-captcha',imageCaptcha())": {'endpoints': ['/rest/image-captcha']},
                                                   "app.get('/rest/languages',languageList())": {'endpoints': ['/rest/languages']},
                                                   "app.get('/rest/memories',memory.getMemories())": {'endpoints': ['/rest/memories']},
                                                   "app.get('/rest/order-history',orderHistory.orderHistory())": {'endpoints': ['/rest/order-history']},
                                                   "app.get('/rest/order-history/orders',security.isAccounting(),orderHistory.allOrders())": {'endpoints': ['/rest/order-history/orders']},
                                                   "app.get('/rest/products/:id/reviews',showProductReviews())": {'endpoints': ['/rest/products/:id/reviews']},
                                                   "app.get('/rest/products/search',search())": {'endpoints': ['/rest/products/search']},
                                                   "app.get('/rest/repeat-notification',repeatNotification())": {'endpoints': ['/rest/repeat-notification']},
                                                   "app.get('/rest/saveLoginIp',saveLoginIp())": {'endpoints': ['/rest/saveLoginIp']},
                                                   "app.get('/rest/track-order/:id',trackOrder())": {'endpoints': ['/rest/track-order/:id']},
                                                   "app.get('/rest/user/authentication-details',authenticatedUsers())": {'endpoints': ['/rest/user/authentication-details']},
                                                   "app.get('/rest/user/change-password',changePassword())": {'endpoints': ['/rest/user/change-password']},
                                                   "app.get('/rest/user/security-question',securityQuestion())": {'endpoints': ['/rest/user/security-question']},
                                                   "app.get('/rest/user/whoami',security.updateAuthenticatedUsers(),currentUser())": {'endpoints': ['/rest/user/whoami']},
                                                   "app.get('/rest/wallet/balance',security.appendUserId(),wallet.getWalletBalance())": {'endpoints': ['/rest/wallet/balance']},
                                                   "app.get('/rest/web3/nftMintListen',nftMint.nftMintListener())": {'endpoints': ['/rest/web3/nftMintListen']},
                                                   "app.get('/rest/web3/nftUnlocked',checkKeys.nftUnlocked())": {'endpoints': ['/rest/web3/nftUnlocked']},
                                                   "app.get('/snippets',vulnCodeSnippet.serveChallengesWithCodeSnippet())": {'endpoints': ['/snippets']},
                                                   "app.get('/snippets/:challenge',vulnCodeSnippet.serveCodeSnippet())": {'endpoints': ['/snippets/:challenge']},
                                                   "app.get('/snippets/fixes/:key',vulnCodeFixes.serveCodeFixes())": {'endpoints': ['/snippets/fixes/:key']},
                                                   "app.get('/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg',easterEgg())": {'endpoints': ['/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg']},
                                                   "app.get('/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us',premiumReward())": {'endpoints': ['/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us']},
                                                   "app.get('/video',videoHandler.getVideo())": {'endpoints': ['/video']},
                                                   "app.get('/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility',privacyPolicyProof())": {'endpoints': ['/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility']},
                                                   "app.get(['/.well-known/security.txt','/security.txt'],verify.accessControlChallenges())": {'endpoints': ['/.well-known/security.txt',
                                                                                                                                                             '/security.txt']},
                                                   "app.patch('/rest/products/reviews',security.isAuthorized(),updateProductReviews())": {'endpoints': ['/rest/products/reviews']},
                                                   "app.post('/api/Addresss',security.appendUserId())": {'endpoints': ['/api/Addresss']},
                                                   "app.post('/api/BasketItems',security.appendUserId(),basketItems.quantityCheckBeforeBasketItemAddition(),basketItems.addBasketItem())": {'endpoints': ['/api/BasketItems']},
                                                   "app.post('/api/Cards',security.appendUserId())": {'endpoints': ['/api/Cards']},
                                                   "app.post('/api/Challenges',security.denyAll())": {'endpoints': ['/api/Challenges']},
                                                   "app.post('/api/Complaints',security.isAuthorized())": {'endpoints': ['/api/Complaints']},
                                                   "app.post('/api/Feedbacks',captcha.verifyCaptcha())": {'endpoints': ['/api/Feedbacks']},
                                                   "app.post('/api/Feedbacks',verify.captchaBypassChallenge())": {'endpoints': ['/api/Feedbacks']},
                                                   "app.post('/api/Feedbacks',verify.forgedFeedbackChallenge())": {'endpoints': ['/api/Feedbacks']},
                                                   "app.post('/api/PrivacyRequests',security.isAuthorized())": {'endpoints': ['/api/PrivacyRequests']},
                                                   "app.post('/api/Products',security.isAuthorized())": {'endpoints': ['/api/Products']},
                                                   "app.post('/api/Quantitys',security.denyAll())": {'endpoints': ['/api/Quantitys']},
                                                   "app.post('/api/Recycles',security.isAuthorized())": {'endpoints': ['/api/Recycles']},
                                                   "app.post('/api/SecurityQuestions',security.denyAll())": {'endpoints': ['/api/SecurityQuestions']},
                                                   "app.post('/api/Users',(req:Request,res:Response,next:NextFunction)=>{\rif(req.body.email!==undefined&&req.body.password!==undefined&&req.body.passwordRepeat!==undefined){\rif(req.body.email.length!==0&&req.body.password.length!==0){\rreq.body.email=req.body.email.trim()\rreq.body.password=req.body.password.trim()\rreq.body.passwordRepeat=req.body.passwordRepeat.trim()\r}else{\rres.status(400).send(res.__('Invalidemail/passwordcannotbeempty'))\r}\r}\rnext()\r})": {'endpoints': ['/api/Users',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      '/Invalidemail/passwordcannotbeempty']},
                                                   "app.post('/api/Users',verify.emptyUserRegistration())": {'endpoints': ['/api/Users']},
                                                   "app.post('/api/Users',verify.passwordRepeatChallenge())": {'endpoints': ['/api/Users']},
                                                   "app.post('/api/Users',verify.registerAdminChallenge())": {'endpoints': ['/api/Users']},
                                                   "app.post('/b2b/v2/orders',b2bOrder())": {'endpoints': ['/b2b/v2/orders']},
                                                   "app.post('/file-upload',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),handleZipFileUpload,checkUploadSize,checkFileType,handleXmlUpload)": {'endpoints': ['/file-upload',
                                                                                                                                                                                                                                                              '/file']},
                                                   "app.post('/profile',updateUserProfile())": {'endpoints': ['/profile']},
                                                   "app.post('/profile/image/file',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),profileImageFileUpload())": {'endpoints': ['/profile/image/file',
                                                                                                                                                                                                                            '/file']},
                                                   "app.post('/profile/image/url',uploadToMemory.single('file'),profileImageUrlUpload())": {'endpoints': ['/profile/image/url',
                                                                                                                                                          '/file']},
                                                   "app.post('/rest/2fa/disable',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rsecurity.isAuthorized(),\rtwoFactorAuth.disable()\r)": {'endpoints': ['/rest/2fa/disable']},
                                                   "app.post('/rest/2fa/setup',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rsecurity.isAuthorized(),\rtwoFactorAuth.setup()\r)": {'endpoints': ['/rest/2fa/setup']},
                                                   "app.post('/rest/2fa/verify',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rtwoFactorAuth.verify()\r)": {'endpoints': ['/rest/2fa/verify']},
                                                   "app.post('/rest/basket/:id/checkout',order())": {'endpoints': ['/rest/basket/:id/checkout']},
                                                   "app.post('/rest/chatbot/respond',chatbot.process())": {'endpoints': ['/rest/chatbot/respond']},
                                                   "app.post('/rest/deluxe-membership',security.appendUserId(),deluxe.upgradeToDeluxe())": {'endpoints': ['/rest/deluxe-membership']},
                                                   "app.post('/rest/memories',uploadToDisk.single('image'),ensureFileIsPassed,security.appendUserId(),metrics.observeFileUploadMetricsMiddleware(),memory.addMemory())": {'endpoints': ['/rest/memories',
                                                                                                                                                                                                                                        '/image']},
                                                   "app.post('/rest/products/reviews',security.isAuthorized(),likeProductReviews())": {'endpoints': ['/rest/products/reviews']},
                                                   "app.post('/rest/user/data-export',security.appendUserId(),dataExport())": {'endpoints': ['/rest/user/data-export']},
                                                   "app.post('/rest/user/data-export',security.appendUserId(),imageCaptcha.verifyCaptcha())": {'endpoints': ['/rest/user/data-export']},
                                                   "app.post('/rest/user/login',login())": {'endpoints': ['/rest/user/login']},
                                                   "app.post('/rest/user/reset-password',resetPassword())": {'endpoints': ['/rest/user/reset-password']},
                                                   "app.post('/rest/web3/submitKey',checkKeys.checkKeys())": {'endpoints': ['/rest/web3/submitKey']},
                                                   "app.post('/rest/web3/walletExploitAddress',web3Wallet.contractExploitListener())": {'endpoints': ['/rest/web3/walletExploitAddress']},
                                                   "app.post('/rest/web3/walletNFTVerify',nftMint.walletNFTVerify())": {'endpoints': ['/rest/web3/walletNFTVerify']},
                                                   "app.post('/snippets/fixes',vulnCodeFixes.checkCorrectFix())": {'endpoints': ['/snippets/fixes']},
                                                   "app.post('/snippets/verdict',vulnCodeSnippet.checkVulnLines())": {'endpoints': ['/snippets/verdict']},
                                                   "app.put('/api/Addresss/:id',security.appendUserId())": {'endpoints': ['/api/Addresss/:id']},
                                                   "app.put('/api/BasketItems/:id',security.appendUserId(),basketItems.quantityCheckBeforeBasketItemUpdate())": {'endpoints': ['/api/BasketItems/:id']},
                                                   "app.put('/api/Cards/:id',security.denyAll())": {'endpoints': ['/api/Cards/:id']},
                                                   "app.put('/api/Feedbacks/:id',security.denyAll())": {'endpoints': ['/api/Feedbacks/:id']},
                                                   "app.put('/api/Recycles/:id',security.denyAll())": {'endpoints': ['/api/Recycles/:id']},
                                                   "app.put('/rest/basket/:id/coupon/:coupon',coupon())": {'endpoints': ['/rest/basket/:id/coupon/:coupon']},
                                                   "app.put('/rest/continue-code-findIt/apply/:continueCode',restoreProgress.restoreProgressFindIt())": {'endpoints': ['/rest/continue-code-findIt/apply/:continueCode']},
                                                   "app.put('/rest/continue-code-fixIt/apply/:continueCode',restoreProgress.restoreProgressFixIt())": {'endpoints': ['/rest/continue-code-fixIt/apply/:continueCode']},
                                                   "app.put('/rest/continue-code/apply/:continueCode',restoreProgress.restoreProgress())": {'endpoints': ['/rest/continue-code/apply/:continueCode']},
                                                   "app.put('/rest/order-history/:id/delivery-status',security.isAccounting(),orderHistory.toggleDeliveryStatus())": {'endpoints': ['/rest/order-history/:id/delivery-status']},
                                                   "app.put('/rest/products/:id/reviews',createProductReviews())": {'endpoints': ['/rest/products/:id/reviews']},
                                                   "app.put('/rest/wallet/balance',security.appendUserId(),wallet.addWalletBalance())": {'endpoints': ['/rest/wallet/balance']},
                                                   "app.route('/api/Users/:id')": {'endpoints': ['/api/Users/:id']},
                                                   "app.use('/api-docs',swaggerUi.serve,swaggerUi.setup(swaggerDocument))": {'endpoints': ['/api-docs']},
                                                   "app.use('/api/BasketItems',security.isAuthorized())": {'endpoints': ['/api/BasketItems']},
                                                   "app.use('/api/BasketItems/:id',security.isAuthorized())": {'endpoints': ['/api/BasketItems/:id']},
                                                   "app.use('/api/Challenges/:id',security.denyAll())": {'endpoints': ['/api/Challenges/:id']},
                                                   "app.use('/api/Complaints/:id',security.denyAll())": {'endpoints': ['/api/Complaints/:id']},
                                                   "app.use('/api/Feedbacks/:id',security.isAuthorized())": {'endpoints': ['/api/Feedbacks/:id']},
                                                   "app.use('/api/PrivacyRequests',security.isAuthorized())": {'endpoints': ['/api/PrivacyRequests']},
                                                   "app.use('/api/PrivacyRequests/:id',security.denyAll())": {'endpoints': ['/api/PrivacyRequests/:id']},
                                                   "app.use('/api/PrivacyRequests/:id',security.isAuthorized())": {'endpoints': ['/api/PrivacyRequests/:id']},
                                                   "app.use('/api/Quantitys/:id',security.isAccounting(),ipfilter(['123.456.789'],{mode:'allow'}))": {'endpoints': ['/api/Quantitys/:id',
                                                                                                                                                                    '/123.456.789']},
                                                   "app.use('/api/SecurityAnswers/:id',security.denyAll())": {'endpoints': ['/api/SecurityAnswers/:id']},
                                                   "app.use('/api/SecurityQuestions/:id',security.denyAll())": {'endpoints': ['/api/SecurityQuestions/:id']},
                                                   "app.use('/assets/i18n',verify.accessControlChallenges())": {'endpoints': ['/assets/i18n']},
                                                   "app.use('/assets/public/images/padding',verify.accessControlChallenges())": {'endpoints': ['/assets/public/images/padding']},
                                                   "app.use('/assets/public/images/products',verify.accessControlChallenges())": {'endpoints': ['/assets/public/images/products']},
                                                   "app.use('/assets/public/images/uploads',verify.accessControlChallenges())": {'endpoints': ['/assets/public/images/uploads']},
                                                   "app.use('/b2b/v2',security.isAuthorized())": {'endpoints': ['/b2b/v2']},
                                                   "app.use('/dataerasure',dataErasure)": {'endpoints': ['/dataerasure']},
                                                   "app.use('/encryptionkeys',serveIndexMiddleware,serveIndex('encryptionkeys',{icons:true,view:'details'}))": {'endpoints': ['/encryptionkeys',
                                                                                                                                                                              '/encryptionkeys',
                                                                                                                                                                              '/details']},
                                                   "app.use('/encryptionkeys/:file',keyServer())": {'endpoints': ['/encryptionkeys/:file']},
                                                   "app.use('/ftp',serveIndexMiddleware,serveIndex('ftp',{icons:true}))": {'endpoints': ['/ftp',
                                                                                                                                         '/ftp']},
                                                   "app.use('/ftp(?!/quarantine)/:file',fileServer())": {'endpoints': ['/{regex_param_1}/:file']},
                                                   "app.use('/ftp/quarantine/:file',quarantineServer())": {'endpoints': ['/ftp/quarantine/:file']},
                                                   "app.use('/rest/basket',security.isAuthorized(),security.appendUserId())": {'endpoints': ['/rest/basket']},
                                                   "app.use('/rest/basket/:id',security.isAuthorized())": {'endpoints': ['/rest/basket/:id']},
                                                   "app.use('/rest/basket/:id/order',security.isAuthorized())": {'endpoints': ['/rest/basket/:id/order']},
                                                   "app.use('/rest/user/authentication-details',security.isAuthorized())": {'endpoints': ['/rest/user/authentication-details']},
                                                   "app.use('/rest/user/reset-password',newRateLimit({\rwindowMs:5*60*1000,\rmax:100,\rkeyGenerator({headers,ip}:{headers:any,ip:any}){returnheaders['X-Forwarded-For']||ip}//vuln-code-snippetvuln-lineresetPasswordMortyChallenge\r}))": {'endpoints': ['/rest/user/reset-password']},
                                                   "app.use('/solve/challenges/server-side',verify.serverSideChallenges())": {'endpoints': ['/solve/challenges/server-side']},
                                                   "app.use('/support/logs',serveIndexMiddleware,serveIndex('logs',{icons:true,view:'details'}))": {'endpoints': ['/support/logs',
                                                                                                                                                                  '/logs',
                                                                                                                                                                  '/details']},
                                                   "app.use('/support/logs',verify.accessControlChallenges())": {'endpoints': ['/support/logs']},
                                                   "app.use('/support/logs/:file',logFileServer())": {'endpoints': ['/support/logs/:file']},
                                                   "app.use((req:Request,res:Response,next:NextFunction)=>{\rreq.url=req.url.replace(/[/]+/g,'/')\rnext()\r})": {'endpoints': ['/']},
                                                   "app.use((req:Request,res:Response,next:NextFunction)=>{\rres.append('X-Recruiting',config.get('application.securityTxt.hiring'))\rnext()\r})": {'endpoints': ['/application.securityTxt.hiring']},
                                                   "app.use(['/.well-known/security.txt','/security.txt'],securityTxt({\rcontact:config.get('application.securityTxt.contact'),\rencryption:config.get('application.securityTxt.encryption'),\racknowledgements:config.get('application.securityTxt.acknowledgements'),\r'Preferred-Languages':[...newSet(locales.map((locale:{key:string})=>locale.key.substr(0,2)))].join(','),\rhiring:config.get('application.securityTxt.hiring'),\rexpires:securityTxtExpiration.toUTCString()\r}))": {'endpoints': ['/.well-known/security.txt',
security.txt',
application.securityTxt.contact',
application.securityTxt.encryption',
application.securityTxt.acknowledgements',
referred-Languages',
application.securityTxt.hiring']},
                                                   "app.use(cookieParser('kekse'))": {'endpoints': ['/kekse']},
                                                   "app.use(express.static(path.resolve('frontend/dist/frontend')))": {'endpoints': ['/frontend/dist/frontend']},
                                                   "app.use(morgan('combined',{stream:accessLogStream}))": {'endpoints': ['/combined']},
                                                   "app.use(robots({UserAgent:'*',Disallow:'/ftp'}))": {'endpoints': ['/ftp']}}}}}
    methods = js_usages_1._process_calls(methods)
    result = js_usages_1.populate_endpoints(methods)
    result_keys = sorted(result.keys())
    assert result_keys == ['/',
    '/.well-known/security.txt',
    '/123.456.789',
    '/Blockedillegalactivityby',
    '/Invalidemail/passwordcannotbeempty',
    '/Noanswerfound!',
    '/Noquestionfound!',
    '/Preferred-Languages',
    '/api-docs',
    '/api/Addresss',
    '/api/Addresss/{id}',
    '/api/BasketItems',
    '/api/BasketItems/{id}',
    '/api/Cards',
    '/api/Cards/{id}',
    '/api/Challenges',
    '/api/Challenges/{id}',
    '/api/Complaints',
    '/api/Complaints/{id}',
    '/api/Deliverys',
    '/api/Deliverys/{id}',
    '/api/Feedbacks',
    '/api/Feedbacks/{id}',
    '/api/PrivacyRequests',
    '/api/PrivacyRequests/{id}',
    '/api/Products',
    '/api/Products/{id}',
    '/api/Quantitys',
    '/api/Quantitys/{id}',
    '/api/Recycles',
    '/api/Recycles/{id}',
    '/api/SecurityAnswers',
    '/api/SecurityAnswers/{id}',
    '/api/SecurityQuestions',
    '/api/SecurityQuestions/{id}',
    '/api/Users',
    '/api/Users/{id}',
    '/application.securityTxt.acknowledgements',
    '/application.securityTxt.contact',
    '/application.securityTxt.encryption',
    '/application.securityTxt.hiring',
    '/assets/i18n',
    '/assets/public/images/padding',
    '/assets/public/images/products',
    '/assets/public/images/uploads',
    '/b2b/v2',
    '/b2b/v2/orders',
    '/combined',
    '/ctf.key',
    '/dataErasureForm',
    '/dataErasureResult',
    '/dataerasure',
    '/details',
    '/encryptionkeys',
    '/encryptionkeys/{file}',
    '/file',
    '/file-upload',
    '/frontend/dist/frontend',
    '/ftp',
    '/ftp/quarantine/{file}',
    '/image',
    '/kekse',
    '/logs',
    '/metrics',
    '/profile',
    '/profile/image/file',
    '/profile/image/url',
    '/promotion',
    '/redirect',
    '/rest/2fa/disable',
    '/rest/2fa/setup',
    '/rest/2fa/status',
    '/rest/2fa/verify',
    '/rest/admin/application-configuration',
    '/rest/admin/application-version',
    '/rest/basket',
    '/rest/basket/{id}',
    '/rest/basket/{id}/checkout',
    '/rest/basket/{id}/coupon/{coupon}',
    '/rest/basket/{id}/order',
    '/rest/captcha',
    '/rest/chatbot/respond',
    '/rest/chatbot/status',
    '/rest/continue-code',
    '/rest/continue-code-findIt',
    '/rest/continue-code-findIt/apply/{continueCode}',
    '/rest/continue-code-fixIt',
    '/rest/continue-code-fixIt/apply/{continueCode}',
    '/rest/continue-code/apply/{continueCode}',
    '/rest/country-mapping',
    '/rest/deluxe-membership',
    '/rest/image-captcha',
    '/rest/languages',
    '/rest/memories',
    '/rest/order-history',
    '/rest/order-history/orders',
    '/rest/order-history/{id}/delivery-status',
    '/rest/products/reviews',
    '/rest/products/search',
    '/rest/products/{id}/reviews',
    '/rest/repeat-notification',
    '/rest/saveLoginIp',
    '/rest/track-order/{id}',
    '/rest/user/authentication-details',
    '/rest/user/change-password',
    '/rest/user/data-export',
    '/rest/user/login',
    '/rest/user/reset-password',
    '/rest/user/security-question',
    '/rest/user/whoami',
    '/rest/wallet/balance',
    '/rest/web3/nftMintListen',
    '/rest/web3/nftUnlocked',
    '/rest/web3/submitKey',
    '/rest/web3/walletExploitAddress',
    '/rest/web3/walletNFTVerify',
    '/security.txt',
    '/snippets',
    '/snippets/fixes',
    '/snippets/fixes/{key}',
    '/snippets/verdict',
    '/snippets/{challenge}',
    '/solve/challenges/server-side',
    '/support/logs',
    '/support/logs/{file}',
    '/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg',
    '/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us',
    '/token',
    '/trustproxy',
    '/video',
    '/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility',
    '/{regex_param_1}/{file}']
    assert list(
        result['/rest/continue-code-findIt/apply/{continueCode}'].keys()) == ['parameters', 'put', 'x-atom-usages']

    methods = js_usages_2._process_methods()
    methods = js_usages_2.methods_to_endpoints(methods)
    assert methods == {'file_names': {'app/routes/index.js': {'resolved_methods': {'app.get("/",sessionHandler.displayWelcomePage)': {'endpoints': ['/']},
                                                             'app.get("/allocations/:userId",isLoggedIn,allocationsHandler.displayAllocations)': {'endpoints': ['/allocations/:userId']},
                                                             'app.get("/benefits",isLoggedIn,benefitsHandler.displayBenefits)': {'endpoints': ['/benefits']},
                                                             'app.get("/contributions",isLoggedIn,contributionsHandler.displayContributions)': {'endpoints': ['/contributions']},
                                                             'app.get("/dashboard",isLoggedIn,sessionHandler.displayWelcomePage)': {'endpoints': ['/dashboard']},
                                                             'app.get("/learn",isLoggedIn,(req,res)=>{//Insecurewaytohandleredirectsbytakingredirecturlfromquerystringreturnres.redirect(req.query.url);})': {'endpoints': ['/learn']},
                                                             'app.get("/login",sessionHandler.displayLoginPage)': {'endpoints': ['/login']},
                                                             'app.get("/logout",sessionHandler.displayLogoutPage)': {'endpoints': ['/logout']},
                                                             'app.get("/memos",isLoggedIn,memosHandler.displayMemos)': {'endpoints': ['/memos']},
                                                             'app.get("/profile",isLoggedIn,profileHandler.displayProfile)': {'endpoints': ['/profile']},
                                                             'app.get("/research",isLoggedIn,researchHandler.displayResearch)': {'endpoints': ['/research']},
                                                             'app.get("/signup",sessionHandler.displaySignupPage)': {'endpoints': ['/signup']},
                                                             'app.post("/benefits",isLoggedIn,benefitsHandler.updateBenefits)': {'endpoints': ['/benefits']},
                                                             'app.post("/contributions",isLoggedIn,contributionsHandler.handleContributionsUpdate)': {'endpoints': ['/contributions']},
                                                             'app.post("/login",sessionHandler.handleLoginRequest)': {'endpoints': ['/login']},
                                                             'app.post("/memos",isLoggedIn,memosHandler.addMemos)': {'endpoints': ['/memos']},
                                                             'app.post("/profile",isLoggedIn,profileHandler.handleProfileUpdate)': {'endpoints': ['/profile']},
                                                             'app.post("/signup",sessionHandler.handleSignup)': {'endpoints': ['/signup']},
                                                             'app.use("/tutorial",tutorialRouter)': {'endpoints': ['/tutorial']}}},
                'app/routes/tutorial.js': {'resolved_methods': {'router.get("/",(req,res)=>{"usestrict";returnres.render("tutorial/a1",{environmentalScripts});})': {'endpoints': ['/',
                                                                                                                                                                                   '/tutorial/a1']}}},
                'server.js': {'resolved_methods': {'app.use(favicon(__dirname+"/app/assets/favicon.ico"))': {'endpoints': ['/app/assets/favicon.ico']}}}}}
    methods = js_usages_2._process_calls(methods)
    result = js_usages_2.populate_endpoints(methods)
    assert len(list(result['/login'].keys())) == 3
    result = sorted(result.keys())
    assert result == ['/',
 '/allocations/{userId}',
 '/app/assets/favicon.ico',
 '/benefits',
 '/contributions',
 '/dashboard',
 '/learn',
 '/login',
 '/logout',
 '/memos',
 '/profile',
 '/research',
 '/signup',
 '/tutorial',
 '/tutorial/a1']


def test_usages_class(java_usages_1):
    assert java_usages_1.title == 'OpenAPI Specification for data'


def test_convert_usages(java_usages_1, java_usages_2, js_usages_1, js_usages_2, py_usages_1, py_usages_2):
    assert sort_openapi_result(java_usages_1.convert_usages()) == {
        '/': {'post': {'responses': {}},
       'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [35]}}},
 '/accounts/{accountName}': {'get': {'responses': {}},
                             'parameters': [{'in': 'path',
                                             'name': 'accountName',
                                             'required': True}],
                             'x-atom-usages': {'call': {'notification-service/src/main/java/com/piggymetrics/notification/client/AccountServiceClient.java': [12]}}},
 '/current': {'get': {'responses': {}},
              'put': {'responses': {}},
              'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [25,30],
                                         'auth-service/src/main/java/com/piggymetrics/auth/controller/UserController.java': [22],
                                         'notification-service/src/main/java/com/piggymetrics/notification/controller/RecipientController.java': [21,26],
                                         'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': [20]},
                                'target': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [30],
                                           'auth-service/src/main/java/com/piggymetrics/auth/controller/UserController.java': [22],
                                           'notification-service/src/main/java/com/piggymetrics/notification/controller/RecipientController.java': [26]}}},
 '/latest': {'get': {'responses': {}},
             'x-atom-usages': {'call': {'statistics-service/src/main/java/com/piggymetrics/statistics/client/ExchangeRatesClient.java': [13]}}},
 '/statistics/{accountName}': {'parameters': [{'in': 'path',
                                               'name': 'accountName',
                                               'required': True}],
                               'put': {'responses': {}},
                               'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/client/StatisticsServiceClient.java': [13]}}},
 '/uaa/users': {'post': {'responses': {}},
                'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/client/AuthServiceClient.java': [12]}}},
 '/{accountName}': {'get': {'responses': {}},
                    'parameters': [{'in': 'path',
                                    'name': 'accountName',
                                    'required': True}],
                    'put': {'responses': {}},
                    'x-atom-usages': {'call': {'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': [26,32]},
                                      'target': {'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': [32]}}},
 '/{name}': {'get': {'responses': {}},
             'parameters': [{'in': 'path', 'name': 'name', 'required': True}],
             'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [20]}}}}
    assert sort_openapi_result(java_usages_2.convert_usages()) == {'/': {'get': {'responses': {}},
       'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/CSRF.java': [19],
                                  'src/main/java/org/joychou/controller/Index.java': [41],
                                  'src/main/java/org/joychou/controller/Test.java': [15]},
                         'target': {'src/main/java/org/joychou/controller/Index.java': [41]}}},
 '/Digester/sec': {'post': {'responses': {}},
                   'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [213]}}},
 '/Digester/vuln': {'post': {'responses': {}},
                    'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [198]}}},
 '/DocumentBuilder/Sec': {'post': {'responses': {}},
                          'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [263]}}},
 '/DocumentBuilder/vuln': {'post': {'responses': {}},
                           'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [236]}}},
 '/DocumentBuilder/xinclude/sec': {'post': {'responses': {}},
                                   'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [312]}}},
 '/DocumentBuilder/xinclude/vuln': {'post': {'responses': {}},
                                    'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [286]}}},
 '/DocumentHelper/vuln': {'post': {'responses': {}},
                          'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [388]}}},
 '/HttpSyncClients/vuln': {'get': {'responses': {}},
                           'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [265]}}},
 '/HttpURLConnection/sec': {'get': {'responses': {}},
                            'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [74]}}},
 '/HttpURLConnection/vuln': {'get': {'responses': {}},
                             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [87]}}},
 '/IOUtils/sec': {'get': {'responses': {}},
                  'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [246]}}},
 '/ImageIO/sec': {'get': {'responses': {}},
                  'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [153]}}},
 '/Jsoup/sec': {'get': {'responses': {}},
                'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [226]}}},
 '/ProcessBuilder': {'get': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Rce.java': [64]}}},
 '/SAXBuilder/sec': {'post': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [102]}}},
 '/SAXBuilder/vuln': {'post': {'responses': {}},
                      'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [86]}}},
 '/SAXParser/sec': {'post': {'responses': {}},
                    'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [178]}}},
 '/SAXParser/vuln': {'post': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [160]}}},
 '/SAXReader/sec': {'post': {'responses': {}},
                    'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [141]}}},
 '/SAXReader/vuln': {'post': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [123]}}},
 '/XMLReader/sec': {'post': {'responses': {}},
                    'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [362]}}},
 '/XMLReader/vuln': {'post': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [342]}}},
 '/aa': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Test.java': [27]},
                           'target': {'src/main/java/org/joychou/controller/Test.java': [27]}}},
 '/any': {'get': {'responses': {}},
          'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/FileUpload.java': [39]}}},
 '/appInfo': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Index.java': [24]}}},
 '/classloader': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/ClassDataLoader.java': [15]},
                                    'target': {'src/main/java/org/joychou/controller/ClassDataLoader.java': [15]}}},
 '/codeinject': {'get': {'responses': {}},
                 'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/CommandInject.java': [24]}}},
 '/codeinject/host': {'get': {'responses': {}},
                      'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/CommandInject.java': [39]}}},
 '/codeinject/sec': {'get': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/CommandInject.java': [51]},
                                       'target': {'src/main/java/org/joychou/controller/CommandInject.java': [51]}}},
 '/commonsHttpClient/sec': {'get': {'responses': {}},
                            'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [207]}}},
 '/createToken': {'get': {'responses': {}},
                  'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Jwt.java': [31]}}},
 '/deserialize': {'post': {'responses': {}},
                  'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Fastjson.java': [17]}}},
 '/dnsrebind/vuln': {'get': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [308]}}},
 '/exclued/vuln': {'get': {'responses': {}},
                   'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/GetRequestURI.java': [34]},
                                     'target': {'src/main/java/org/joychou/controller/GetRequestURI.java': [34]}}},
 '/fastjsonp/getToken': {'get': {'responses': {}},
                         'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Jsonp.java': [128]}}},
 '/forward': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/URLRedirect.java': [64]}}},
 '/getName': {'get': {'responses': {}},
              'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Jwt.java': [56]},
                                'target': {'src/main/java/org/joychou/controller/Jwt.java': [56]}}},
 '/getToken': {'get': {'responses': {}},
               'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Jsonp.java': [118]}}},
 '/groovy': {'get': {'responses': {}},
             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Rce.java': [128]}}},
 '/httpclient/sec': {'get': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [187]}}},
 '/hutool/vuln': {'get': {'responses': {}},
                  'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [298]}}},
 '/index': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Index.java': [46]}}},
 '/jdbc/ps/vuln': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SQLI.java': [138]}}},
 '/jdbc/sec': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SQLI.java': [94]}}},
 '/jdbc/vuln': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SQLI.java': [51]}}},
 '/jscmd': {'get': {'responses': {}},
            'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Rce.java': [96]}}},
 '/log4j': {'get': {'responses': {}},
            'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Log4j.java': [19]},
                              'target': {'src/main/java/org/joychou/controller/Log4j.java': [19]}}},
 '/login': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Login.java': [22]}}},
 '/logout': {'get': {'responses': {}},
             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Login.java': [27]},
                               'target': {'src/main/java/org/joychou/controller/Login.java': [27]}}},
 '/mybatis/orderby/sec04': {'get': {'responses': {}},
                            'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SQLI.java': [240]}}},
 '/mybatis/orderby/vuln03': {'get': {'responses': {}},
                             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SQLI.java': [201]},
                                               'target': {'src/main/java/org/joychou/controller/SQLI.java': [201]}}},
 '/mybatis/sec01': {'get': {'responses': {}},
                    'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SQLI.java': [211]}}},
 '/mybatis/sec02': {'get': {'responses': {}},
                    'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SQLI.java': [220]}}},
 '/mybatis/sec03': {'get': {'responses': {}},
                    'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SQLI.java': [230]}}},
 '/mybatis/vuln01': {'get': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SQLI.java': [181]}}},
 '/mybatis/vuln02': {'get': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SQLI.java': [191]}}},
 '/noproxy': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/IPForge.java': [20]}}},
 '/object2jsonp': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Jsonp.java': [76]}}},
 '/okhttp/sec': {'get': {'responses': {}},
                 'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [168]}}},
 '/openStream': {'get': {'responses': {}},
                 'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [118]}}},
 '/path_traversal/sec': {'get': {'responses': {}},
                         'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/PathTraversal.java': [29]}}},
 '/path_traversal/vul': {'get': {'responses': {}},
                         'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/PathTraversal.java': [24]}}},
 '/pic': {'get': {'responses': {}},
          'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/FileUpload.java': [45]}}},
 '/postgresql': {'post': {'responses': {}},
                 'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Rce.java': [137]}}},
 '/proxy': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/IPForge.java': [31]}}},
 '/readxlsx': {'post': {'responses': {}},
               'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/othervulns/ooxmlXXE.java': [43],
                                          'src/main/java/org/joychou/controller/othervulns/xlsxStreamerXXE.java': [35]},
                                 'target': {'src/main/java/org/joychou/controller/othervulns/xlsxStreamerXXE.java': [35]}}},
 '/redirect': {'get': {'responses': {}},
               'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/URLRedirect.java': [31]}}},
 '/reflect': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XSS.java': [27]}}},
 '/rememberMe/security': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Deserialize.java': [60]}}},
 '/rememberMe/vuln': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Deserialize.java': [35]},
                                        'target': {'src/main/java/org/joychou/controller/Deserialize.java': [35]}}},
 '/request/sec': {'get': {'responses': {}},
                  'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [97]},
                                    'target': {'src/main/java/org/joychou/controller/SSRF.java': [97]}}},
 '/restTemplate/vuln1': {'get': {'responses': {}},
                         'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [277]}}},
 '/restTemplate/vuln2': {'get': {'responses': {}},
                         'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [285]}}},
 '/runtime/exec': {'get': {'responses': {}},
                   'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Rce.java': [31]}}},
 '/safe': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XSS.java': [65]}}},
 '/safecode': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/CRLFInjection.java': [20]}}},
 '/sec': {'get': {'responses': {}},
          'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/URLWhiteList.java': [125]}}},
 '/sec/array_indexOf': {'get': {'responses': {}},
                        'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/URLWhiteList.java': [151]}}},
 '/sec/checkOrigin': {'get': {'responses': {}},
                      'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cors.java': [104]}}},
 '/sec/checkReferer': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Jsonp.java': [102]},
                                         'target': {'src/main/java/org/joychou/controller/Jsonp.java': [102]}}},
 '/sec/corsFilter': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cors.java': [98]}}},
 '/sec/crossOrigin': {'get': {'responses': {}},
                      'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cors.java': [54]}}},
 '/sec/httpCors': {'get': {'responses': {}},
                   'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cors.java': [76]}}},
 '/sec/originFilter': {'get': {'responses': {}},
                       'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cors.java': [87]}}},
 '/sec/webMvcConfigurer': {'get': {'responses': {}},
                           'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cors.java': [65]}}},
 '/sec/yarm': {'get': {'responses': {}},
               'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Rce.java': [118]}}},
 '/sendRedirect': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/URLRedirect.java': [52]}}},
 '/sendRedirect/sec': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/URLRedirect.java': [81]}}},
 '/setHeader': {'head': {'responses': {}},
                'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/URLRedirect.java': [40]}}},
 '/spel/vuln': {'get': {'responses': {}},
                'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SpEL.java': [24]},
                                  'target': {'src/main/java/org/joychou/controller/SpEL.java': [24]}}},
 '/status': {'get': {'responses': {}},
             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/FileUpload.java': [76]},
                               'target': {'src/main/java/org/joychou/controller/FileUpload.java': [76]}}},
 '/stored/show': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XSS.java': [55]}}},
 '/stored/store': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XSS.java': [40]}}},
 '/upload': {'get': {'responses': {}},
             'post': {'responses': {}},
             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/FileUpload.java': [50],
                                        'src/main/java/org/joychou/controller/othervulns/ooxmlXXE.java': [37],
                                        'src/main/java/org/joychou/controller/othervulns/xlsxStreamerXXE.java': [29]}}},
 '/upload/picture': {'post': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/FileUpload.java': [82]}}},
 '/urlConnection/sec': {'get': {'responses': {}},
                        'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [50]}}},
 '/urlConnection/vuln': {'get': {'responses': {}},
                         'post': {'responses': {}},
                         'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSRF.java': [44]}}},
 '/velocity': {'get': {'responses': {}},
               'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/SSTI.java': [26]},
                                 'target': {'src/main/java/org/joychou/controller/SSTI.java': [26]}}},
 '/vuln/contains': {'get': {'responses': {}},
                    'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/URLWhiteList.java': [56]}}},
 '/vuln/crossOrigin': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cors.java': [42]},
                                         'target': {'src/main/java/org/joychou/controller/Cors.java': [42]}}},
 '/vuln/emptyReferer': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Jsonp.java': [57]}}},
 '/vuln/endsWith': {'get': {'responses': {}},
                    'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/URLWhiteList.java': [36]}}},
 '/vuln/mappingJackson2JsonView': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Jsonp.java': [89]}}},
 '/vuln/origin': {'get': {'responses': {}},
                  'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cors.java': [25]}}},
 '/vuln/referer': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Jsonp.java': [45]}}},
 '/vuln/regex': {'get': {'responses': {}},
                 'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/URLWhiteList.java': [74]}}},
 '/vuln/setHeader': {'get': {'responses': {}},
                     'head': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cors.java': [33]}}},
 '/vuln/url_bypass': {'get': {'responses': {}},
                      'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/URLWhiteList.java': [98]},
                                        'target': {'src/main/java/org/joychou/controller/URLWhiteList.java': [98]}}},
 '/vuln/yarm': {'get': {'responses': {}},
                'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Rce.java': [112]},
                                  'target': {'src/main/java/org/joychou/controller/Rce.java': [112]}}},
 '/vuln01': {'get': {'responses': {}},
             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cookies.java': [25]}}},
 '/vuln02': {'get': {'responses': {}},
             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cookies.java': [32]}}},
 '/vuln03': {'get': {'responses': {}},
             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cookies.java': [45]}}},
 '/vuln04': {'get': {'responses': {}},
             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cookies.java': [61]}}},
 '/vuln05': {'get': {'responses': {}},
             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cookies.java': [76]}}},
 '/vuln06': {'get': {'responses': {}},
             'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/Cookies.java': [82]},
                               'target': {'src/main/java/org/joychou/controller/Cookies.java': [82]}}},
 '/websocket/cmd': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/WebSockets.java': [30]}}},
 '/websocket/proxy': {'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/WebSockets.java': [53]},
                                        'target': {'src/main/java/org/joychou/controller/WebSockets.java': [53]}}},
 '/xmlReader/sec': {'post': {'responses': {}},
                    'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [63]}}},
 '/xmlReader/vuln': {'post': {'responses': {}},
                     'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [48]},
                                       'target': {'src/main/java/org/joychou/controller/XXE.java': [48]}}},
 '/xmlbeam/vuln': {'post': {'responses': {}},
                   'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XXE.java': [419]}}},
 '/xstream': {'post': {'responses': {}},
              'x-atom-usages': {'call': {'src/main/java/org/joychou/controller/XStreamRce.java': [23]},
                                'target': {'src/main/java/org/joychou/controller/XStreamRce.java': [23]}}}}
    result = js_usages_1.convert_usages()
    result = sort_openapi_result(result)
    assert result == {'/': {'get': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                              {'in': 'header', 'name': '__ecma.String'}],
               'responses': {}},
       'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                               {'in': 'header', 'name': '__ecma.String'}],
                'responses': {}},
       'x-atom-usages': {'call': {'routes/dataErasure.ts': [18, 54],
                                  'server.ts': [185]}}},
 '/.well-known/security.txt': {'get': {'parameters': [{'in': 'header',
                                                       'name': 'ANY'}],
                                       'responses': {}},
                               'x-atom-usages': {'call': {'server.ts': [196,
                                                                        197]}}},
 '/123.456.789': {'x-atom-usages': {'call': {'server.ts': [395]}}},
 '/Blockedillegalactivityby': {'get': {'parameters': [{'in': 'header',
                                                       'name': 'LAMBDA'},
                                                      {'in': 'header',
                                                       'name': '__ecma.String'}],
                                       'responses': {}},
                               'post': {'parameters': [{'in': 'header',
                                                        'name': 'LAMBDA'},
                                                       {'in': 'header',
                                                        'name': '__ecma.String'}],
                                        'responses': {}},
                               'x-atom-usages': {'call': {'routes/dataErasure.ts': [18,
                                                                                    54]}}},
 '/Invalidemail/passwordcannotbeempty': {'post': {'parameters': [{'in': 'header',
                                                                  'name': 'LAMBDA'},
                                                                 {'in': 'header',
                                                                  'name': '__ecma.String'}],
                                                  'responses': {}},
                                         'x-atom-usages': {'call': {'server.ts': [372]}}},
 '/Noanswerfound!': {'get': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                            {'in': 'header',
                                             'name': '__ecma.String'}],
                             'responses': {}},
                     'x-atom-usages': {'call': {'routes/dataErasure.ts': [18]}}},
 '/Noquestionfound!': {'get': {'parameters': [{'in': 'header',
                                               'name': 'LAMBDA'},
                                              {'in': 'header',
                                               'name': '__ecma.String'}],
                               'responses': {}},
                       'x-atom-usages': {'call': {'routes/dataErasure.ts': [18]}}},
 '/Preferred-Languages': {'get': {'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [197]}}},
 '/api-docs': {'x-atom-usages': {'call': {'server.ts': [263]}}},
 '/api/Addresss': {'get': {'parameters': [{'in': 'header',
                                           'name': '__ecma.String'}],
                           'responses': {}},
                   'post': {'parameters': [{'in': 'header',
                                            'name': '__ecma.String'}],
                            'responses': {}},
                   'x-atom-usages': {'call': {'server.ts': [412, 413]}}},
 '/api/Addresss/{id}': {'delete': {'parameters': [], 'responses': {}},
                        'get': {'parameters': [], 'responses': {}},
                        'parameters': [{'in': 'path',
                                        'name': 'id',
                                        'required': True}],
                        'put': {'parameters': [], 'responses': {}},
                        'x-atom-usages': {'call': {'server.ts': [414,
                                                                 415,
                                                                 416]}}},
 '/api/BasketItems': {'post': {'parameters': [{'in': 'header',
                                               'name': '__ecma.String'}],
                               'responses': {}},
                      'x-atom-usages': {'call': {'server.ts': [327, 391]}}},
 '/api/BasketItems/{id}': {'parameters': [{'in': 'path',
                                           'name': 'id',
                                           'required': True}],
                           'put': {'parameters': [], 'responses': {}},
                           'x-atom-usages': {'call': {'server.ts': [328,
                                                                    390]}}},
 '/api/Cards': {'get': {'parameters': [{'in': 'header',
                                        'name': '__ecma.String'}],
                        'responses': {}},
                'post': {'parameters': [{'in': 'header',
                                         'name': '__ecma.String'}],
                         'responses': {}},
                'x-atom-usages': {'call': {'server.ts': [402, 403]}}},
 '/api/Cards/{id}': {'delete': {'parameters': [], 'responses': {}},
                     'get': {'parameters': [], 'responses': {}},
                     'parameters': [{'in': 'path',
                                     'name': 'id',
                                     'required': True}],
                     'put': {'parameters': [], 'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [404, 405, 406]}}},
 '/api/Challenges': {'post': {'parameters': [{'in': 'header',
                                              'name': '__ecma.String'},
                                             {'in': 'header',
                                              'name': 'express-jwt:expressJwt:<returnValue>'}],
                              'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [342]}}},
 '/api/Challenges/{id}': {'parameters': [{'in': 'path',
                                          'name': 'id',
                                          'required': True}],
                          'x-atom-usages': {'call': {'server.ts': [343]}}},
 '/api/Complaints': {'get': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'},
                                            {'in': 'header',
                                             'name': 'express-jwt:expressJwt:<returnValue>'}],
                             'responses': {}},
                     'post': {'parameters': [{'in': 'header',
                                              'name': '__ecma.String'},
                                             {'in': 'header',
                                              'name': 'express-jwt:expressJwt:<returnValue>'}],
                              'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [345, 346]}}},
 '/api/Complaints/{id}': {'parameters': [{'in': 'path',
                                          'name': 'id',
                                          'required': True}],
                          'x-atom-usages': {'call': {'server.ts': [347]}}},
 '/api/Deliverys': {'get': {'parameters': [{'in': 'header',
                                            'name': '__ecma.String'}],
                            'responses': {}},
                    'x-atom-usages': {'call': {'server.ts': [417]}}},
 '/api/Deliverys/{id}': {'get': {'parameters': [], 'responses': {}},
                         'parameters': [{'in': 'path',
                                         'name': 'id',
                                         'required': True}],
                         'x-atom-usages': {'call': {'server.ts': [418]}}},
 '/api/Feedbacks': {'post': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'}],
                             'responses': {}},
                    'x-atom-usages': {'call': {'server.ts': [366, 368, 370]}}},
 '/api/Feedbacks/{id}': {'parameters': [{'in': 'path',
                                         'name': 'id',
                                         'required': True}],
                         'put': {'parameters': [], 'responses': {}},
                         'x-atom-usages': {'call': {'server.ts': [330, 397]}}},
 '/api/PrivacyRequests': {'get': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'},
                                                 {'in': 'header',
                                                  'name': 'express-jwt:expressJwt:<returnValue>'}],
                                  'responses': {}},
                          'post': {'parameters': [{'in': 'header',
                                                   'name': '__ecma.String'},
                                                  {'in': 'header',
                                                   'name': 'express-jwt:expressJwt:<returnValue>'}],
                                   'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [399,
                                                                   408,
                                                                   409]}}},
 '/api/PrivacyRequests/{id}': {'parameters': [{'in': 'path',
                                               'name': 'id',
                                               'required': True}],
                               'x-atom-usages': {'call': {'server.ts': [400,
                                                                        410]}}},
 '/api/Products': {'post': {'parameters': [{'in': 'header',
                                            'name': '__ecma.String'},
                                           {'in': 'header',
                                            'name': 'express-jwt:expressJwt:<returnValue>'}],
                            'responses': {}},
                   'x-atom-usages': {'call': {'server.ts': [338]}}},
 '/api/Products/{id}': {'delete': {'parameters': [], 'responses': {}},
                        'parameters': [{'in': 'path',
                                        'name': 'id',
                                        'required': True}],
                        'x-atom-usages': {'call': {'server.ts': [340]}}},
 '/api/Quantitys': {'post': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'},
                                            {'in': 'header',
                                             'name': 'express-jwt:expressJwt:<returnValue>'}],
                             'responses': {}},
                    'x-atom-usages': {'call': {'server.ts': [394]}}},
 '/api/Quantitys/{id}': {'delete': {'parameters': [], 'responses': {}},
                         'parameters': [{'in': 'path',
                                         'name': 'id',
                                         'required': True}],
                         'x-atom-usages': {'call': {'server.ts': [393, 395]}}},
 '/api/Recycles': {'get': {'parameters': [{'in': 'header',
                                           'name': '__ecma.String'}],
                           'responses': {}},
                   'post': {'parameters': [{'in': 'header',
                                            'name': '__ecma.String'},
                                           {'in': 'header',
                                            'name': 'express-jwt:expressJwt:<returnValue>'}],
                            'responses': {}},
                   'x-atom-usages': {'call': {'server.ts': [349, 350]}}},
 '/api/Recycles/{id}': {'delete': {'parameters': [], 'responses': {}},
                        'get': {'parameters': [], 'responses': {}},
                        'parameters': [{'in': 'path',
                                        'name': 'id',
                                        'required': True}],
                        'put': {'parameters': [], 'responses': {}},
                        'x-atom-usages': {'call': {'server.ts': [352,
                                                                 353,
                                                                 354]}}},
 '/api/SecurityAnswers': {'get': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'},
                                                 {'in': 'header',
                                                  'name': 'express-jwt:expressJwt:<returnValue>'}],
                                  'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [359]}}},
 '/api/SecurityAnswers/{id}': {'parameters': [{'in': 'path',
                                               'name': 'id',
                                               'required': True}],
                               'x-atom-usages': {'call': {'server.ts': [360]}}},
 '/api/SecurityQuestions': {'post': {'parameters': [{'in': 'header',
                                                     'name': '__ecma.String'},
                                                    {'in': 'header',
                                                     'name': 'express-jwt:expressJwt:<returnValue>'}],
                                     'responses': {}},
                            'x-atom-usages': {'call': {'server.ts': [356]}}},
 '/api/SecurityQuestions/{id}': {'parameters': [{'in': 'path',
                                                 'name': 'id',
                                                 'required': True}],
                                 'x-atom-usages': {'call': {'server.ts': [357]}}},
 '/api/Users': {'get': {'parameters': [{'in': 'header',
                                        'name': '__ecma.String'},
                                       {'in': 'header',
                                        'name': 'express-jwt:expressJwt:<returnValue>'}],
                        'responses': {}},
                'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                        {'in': 'header',
                                         'name': '__ecma.String'}],
                         'responses': {}},
                'x-atom-usages': {'call': {'server.ts': [332,
                                                         372,
                                                         384,
                                                         385,
                                                         386]}}},
 '/api/Users/{id}': {'parameters': [{'in': 'path',
                                     'name': 'id',
                                     'required': True}],
                     'x-atom-usages': {'call': {'server.ts': [333]}}},
 '/application.securityTxt.acknowledgements': {'get': {'responses': {}},
                                               'x-atom-usages': {'call': {'server.ts': [197]}}},
 '/application.securityTxt.contact': {'get': {'responses': {}},
                                      'x-atom-usages': {'call': {'server.ts': [197]}}},
 '/application.securityTxt.encryption': {'get': {'responses': {}},
                                         'x-atom-usages': {'call': {'server.ts': [197]}}},
 '/application.securityTxt.hiring': {'get': {'responses': {}},
                                     'x-atom-usages': {'call': {'server.ts': [179,
                                                                              197]}}},
 '/assets/i18n': {'x-atom-usages': {'call': {'server.ts': [216]}}},
 '/assets/public/images/padding': {'x-atom-usages': {'call': {'server.ts': [213]}}},
 '/assets/public/images/products': {'x-atom-usages': {'call': {'server.ts': [214]}}},
 '/assets/public/images/uploads': {'x-atom-usages': {'call': {'server.ts': [215]}}},
 '/b2b/v2': {'x-atom-usages': {'call': {'server.ts': [388]}}},
 '/b2b/v2/orders': {'post': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'}],
                             'responses': {}},
                    'x-atom-usages': {'call': {'server.ts': [602]}}},
 '/combined': {'x-atom-usages': {'call': {'server.ts': [308]}}},
 '/ctf.key': {'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                      {'in': 'header',
                                       'name': '__ecma.String'}],
                       'responses': {}},
              'x-atom-usages': {'call': {'routes/dataErasure.ts': [54]}}},
 '/dataErasureForm': {'get': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                             {'in': 'header',
                                              'name': '__ecma.String'}],
                              'responses': {}},
                      'x-atom-usages': {'call': {'routes/dataErasure.ts': [18]}}},
 '/dataErasureResult': {'post': {'parameters': [{'in': 'header',
                                                 'name': 'LAMBDA'},
                                                {'in': 'header',
                                                 'name': '__ecma.String'}],
                                 'responses': {}},
                        'x-atom-usages': {'call': {'routes/dataErasure.ts': [54]}}},
 '/dataerasure': {'x-atom-usages': {'call': {'server.ts': [610]}}},
 '/details': {'x-atom-usages': {'call': {'server.ts': [254, 258]}}},
 '/encryptionkeys': {'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                             {'in': 'header',
                                              'name': '__ecma.String'}],
                              'responses': {}},
                     'x-atom-usages': {'call': {'routes/dataErasure.ts': [54],
                                                'server.ts': [254]}}},
 '/encryptionkeys/{file}': {'parameters': [{'in': 'path',
                                            'name': 'file',
                                            'required': True}],
                            'x-atom-usages': {'call': {'server.ts': [255]}}},
 '/file': {'post': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                    'responses': {}},
           'x-atom-usages': {'call': {'server.ts': [281, 282, 283]}}},
 '/file-upload': {'post': {'parameters': [{'in': 'header',
                                           'name': '__ecma.String'}],
                           'responses': {}},
                  'x-atom-usages': {'call': {'server.ts': [281]}}},
 '/frontend/dist/frontend': {'x-atom-usages': {'call': {'server.ts': [265]}}},
 '/ftp': {'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                  {'in': 'header', 'name': '__ecma.String'}],
                   'responses': {}},
          'x-atom-usages': {'call': {'routes/dataErasure.ts': [54],
                                     'server.ts': [207, 249]}}},
 '/ftp/quarantine/{file}': {'parameters': [{'in': 'path',
                                            'name': 'file',
                                            'required': True}],
                            'x-atom-usages': {'call': {'server.ts': [251]}}},
 '/image': {'post': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                     'responses': {}},
            'x-atom-usages': {'call': {'server.ts': [284]}}},
 '/kekse': {'x-atom-usages': {'call': {'server.ts': [266]}}},
 '/logs': {'x-atom-usages': {'call': {'server.ts': [258]}}},
 '/metrics': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                      'responses': {}},
              'x-atom-usages': {'call': {'server.ts': [678]}}},
 '/profile': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                      'responses': {}},
              'post': {'parameters': [{'in': 'header',
                                       'name': '__ecma.String'}],
                       'responses': {}},
              'x-atom-usages': {'call': {'server.ts': [620, 621]}}},
 '/profile/image/file': {'post': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'}],
                                  'responses': {}},
                         'x-atom-usages': {'call': {'server.ts': [282]}}},
 '/profile/image/url': {'post': {'parameters': [{'in': 'header',
                                                 'name': '__ecma.String'}],
                                 'responses': {}},
                        'x-atom-usages': {'call': {'server.ts': [283]}}},
 '/promotion': {'get': {'parameters': [{'in': 'header',
                                        'name': '__ecma.String'}],
                        'responses': {}},
                'x-atom-usages': {'call': {'server.ts': [616]}}},
 '/redirect': {'get': {'parameters': [{'in': 'header',
                                       'name': '__ecma.String'}],
                       'responses': {}},
               'x-atom-usages': {'call': {'server.ts': [613]}}},
 '/rest/2fa/disable': {'post': {'responses': {}},
                       'x-atom-usages': {'call': {'server.ts': [435]}}},
 '/rest/2fa/setup': {'post': {'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [429]}}},
 '/rest/2fa/status': {'get': {'parameters': [{'in': 'header',
                                              'name': '__ecma.String'},
                                             {'in': 'header',
                                              'name': 'express-jwt:expressJwt:<returnValue>'},
                                             {'in': 'header',
                                              'name': 'routes/2fa.ts::program:status'}],
                              'responses': {}},
                      'x-atom-usages': {'call': {'server.ts': [427]}}},
 '/rest/2fa/verify': {'post': {'responses': {}},
                      'x-atom-usages': {'call': {'server.ts': [422]}}},
 '/rest/admin/application-configuration': {'get': {'parameters': [{'in': 'header',
                                                                   'name': '__ecma.String'}],
                                                   'responses': {}},
                                           'x-atom-usages': {'call': {'server.ts': [561]}}},
 '/rest/admin/application-version': {'get': {'parameters': [{'in': 'header',
                                                             'name': '__ecma.String'}],
                                             'responses': {}},
                                     'x-atom-usages': {'call': {'server.ts': [560,
                                                                              569]}}},
 '/rest/basket': {'x-atom-usages': {'call': {'server.ts': [325]}}},
 '/rest/basket/{id}': {'get': {'parameters': [], 'responses': {}},
                       'parameters': [{'in': 'path',
                                       'name': 'id',
                                       'required': True}],
                       'x-atom-usages': {'call': {'server.ts': [363, 557]}}},
 '/rest/basket/{id}/checkout': {'parameters': [{'in': 'path',
                                                'name': 'id',
                                                'required': True}],
                                'post': {'parameters': [], 'responses': {}},
                                'x-atom-usages': {'call': {'server.ts': [558]}}},
 '/rest/basket/{id}/coupon/{coupon}': {'parameters': [{'in': 'path',
                                                       'name': 'coupon',
                                                       'required': True},
                                                      {'in': 'path',
                                                       'name': 'id',
                                                       'required': True}],
                                       'put': {'parameters': [],
                                               'responses': {}},
                                       'x-atom-usages': {'call': {'server.ts': [559]}}},
 '/rest/basket/{id}/order': {'parameters': [{'in': 'path',
                                             'name': 'id',
                                             'required': True}],
                             'x-atom-usages': {'call': {'server.ts': [364]}}},
 '/rest/captcha': {'get': {'parameters': [{'in': 'header',
                                           'name': '__ecma.String'}],
                           'responses': {}},
                   'x-atom-usages': {'call': {'server.ts': [570]}}},
 '/rest/chatbot/respond': {'post': {'parameters': [{'in': 'header',
                                                    'name': '__ecma.String'}],
                                    'responses': {}},
                           'x-atom-usages': {'call': {'server.ts': [587]}}},
 '/rest/chatbot/status': {'get': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'}],
                                  'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [586]}}},
 '/rest/continue-code': {'get': {'parameters': [{'in': 'header',
                                                 'name': '__ecma.String'}],
                                 'responses': {}},
                         'x-atom-usages': {'call': {'server.ts': [563]}}},
 '/rest/continue-code-findIt': {'get': {'parameters': [{'in': 'header',
                                                        'name': '__ecma.String'}],
                                        'responses': {}},
                                'x-atom-usages': {'call': {'server.ts': [564]}}},
 '/rest/continue-code-findIt/apply/{continueCode}': {'parameters': [{'in': 'path',
                                                                     'name': 'continueCode',
                                                                     'required': True}],
                                                     'put': {'parameters': [],
                                                             'responses': {}},
                                                     'x-atom-usages': {'call': {'server.ts': [566]}}},
 '/rest/continue-code-fixIt': {'get': {'parameters': [{'in': 'header',
                                                       'name': '__ecma.String'}],
                                       'responses': {}},
                               'x-atom-usages': {'call': {'server.ts': [565]}}},
 '/rest/continue-code-fixIt/apply/{continueCode}': {'parameters': [{'in': 'path',
                                                                    'name': 'continueCode',
                                                                    'required': True}],
                                                    'put': {'parameters': [],
                                                            'responses': {}},
                                                    'x-atom-usages': {'call': {'server.ts': [567]}}},
 '/rest/continue-code/apply/{continueCode}': {'parameters': [{'in': 'path',
                                                              'name': 'continueCode',
                                                              'required': True}],
                                              'put': {'parameters': [],
                                                      'responses': {}},
                                              'x-atom-usages': {'call': {'server.ts': [568]}}},
 '/rest/country-mapping': {'get': {'parameters': [{'in': 'header',
                                                   'name': '__ecma.String'}],
                                   'responses': {}},
                           'x-atom-usages': {'call': {'server.ts': [573]}}},
 '/rest/deluxe-membership': {'get': {'parameters': [{'in': 'header',
                                                     'name': '__ecma.String'}],
                                     'responses': {}},
                             'post': {'parameters': [{'in': 'header',
                                                      'name': '__ecma.String'}],
                                      'responses': {}},
                             'x-atom-usages': {'call': {'server.ts': [583,
                                                                      584]}}},
 '/rest/image-captcha': {'get': {'parameters': [{'in': 'header',
                                                 'name': '__ecma.String'}],
                                 'responses': {}},
                         'x-atom-usages': {'call': {'server.ts': [571]}}},
 '/rest/languages': {'get': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'}],
                             'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [577]}}},
 '/rest/memories': {'get': {'parameters': [{'in': 'header',
                                            'name': '__ecma.String'}],
                            'responses': {}},
                    'post': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'}],
                             'responses': {}},
                    'x-atom-usages': {'call': {'server.ts': [284, 585]}}},
 '/rest/order-history': {'get': {'parameters': [{'in': 'header',
                                                 'name': '__ecma.String'}],
                                 'responses': {}},
                         'x-atom-usages': {'call': {'server.ts': [578]}}},
 '/rest/order-history/orders': {'get': {'parameters': [{'in': 'header',
                                                        'name': '__ecma.String'}],
                                        'responses': {}},
                                'x-atom-usages': {'call': {'server.ts': [579]}}},
 '/rest/order-history/{id}/delivery-status': {'parameters': [{'in': 'path',
                                                              'name': 'id',
                                                              'required': True}],
                                              'put': {'parameters': [],
                                                      'responses': {}},
                                              'x-atom-usages': {'call': {'server.ts': [580]}}},
 '/rest/products/reviews': {'patch': {'parameters': [{'in': 'header',
                                                      'name': '__ecma.String'},
                                                     {'in': 'header',
                                                      'name': 'express-jwt:expressJwt:<returnValue>'}],
                                      'responses': {}},
                            'post': {'parameters': [{'in': 'header',
                                                     'name': '__ecma.String'},
                                                    {'in': 'header',
                                                     'name': 'express-jwt:expressJwt:<returnValue>'}],
                                     'responses': {}},
                            'x-atom-usages': {'call': {'server.ts': [591,
                                                                     592]}}},
 '/rest/products/search': {'get': {'parameters': [{'in': 'header',
                                                   'name': '__ecma.String'}],
                                   'responses': {}},
                           'x-atom-usages': {'call': {'server.ts': [556]}}},
 '/rest/products/{id}/reviews': {'get': {'parameters': [], 'responses': {}},
                                 'parameters': [{'in': 'path',
                                                 'name': 'id',
                                                 'required': True}],
                                 'put': {'parameters': [], 'responses': {}},
                                 'x-atom-usages': {'call': {'server.ts': [589,
                                                                          590]}}},
 '/rest/repeat-notification': {'get': {'parameters': [{'in': 'header',
                                                       'name': '__ecma.String'}],
                                       'responses': {}},
                               'x-atom-usages': {'call': {'server.ts': [562]}}},
 '/rest/saveLoginIp': {'get': {'parameters': [{'in': 'header',
                                               'name': '__ecma.String'}],
                               'responses': {}},
                       'x-atom-usages': {'call': {'server.ts': [574]}}},
 '/rest/track-order/{id}': {'get': {'parameters': [], 'responses': {}},
                            'parameters': [{'in': 'path',
                                            'name': 'id',
                                            'required': True}],
                            'x-atom-usages': {'call': {'server.ts': [572]}}},
 '/rest/user/authentication-details': {'get': {'parameters': [{'in': 'header',
                                                               'name': '__ecma.String'}],
                                               'responses': {}},
                                       'x-atom-usages': {'call': {'server.ts': [362,
                                                                                555]}}},
 '/rest/user/change-password': {'get': {'parameters': [{'in': 'header',
                                                        'name': '__ecma.String'}],
                                        'responses': {}},
                                'x-atom-usages': {'call': {'server.ts': [551]}}},
 '/rest/user/data-export': {'post': {'parameters': [{'in': 'header',
                                                     'name': '__ecma.String'}],
                                     'responses': {}},
                            'x-atom-usages': {'call': {'server.ts': [575,
                                                                     576]}}},
 '/rest/user/login': {'post': {'parameters': [{'in': 'header',
                                               'name': '__ecma.String'}],
                               'responses': {}},
                      'x-atom-usages': {'call': {'server.ts': [550]}}},
 '/rest/user/reset-password': {'head': {'responses': {}},
                               'post': {'parameters': [{'in': 'header',
                                                        'name': '__ecma.String'}],
                                        'responses': {}},
                               'x-atom-usages': {'call': {'server.ts': [313,
                                                                        552]}}},
 '/rest/user/security-question': {'get': {'parameters': [{'in': 'header',
                                                          'name': '__ecma.String'}],
                                          'responses': {}},
                                  'x-atom-usages': {'call': {'server.ts': [553]}}},
 '/rest/user/whoami': {'get': {'parameters': [{'in': 'header',
                                               'name': '__ecma.String'}],
                               'responses': {}},
                       'x-atom-usages': {'call': {'server.ts': [554]}}},
 '/rest/wallet/balance': {'get': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'}],
                                  'responses': {}},
                          'put': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'}],
                                  'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [581, 582]}}},
 '/rest/web3/nftMintListen': {'get': {'parameters': [{'in': 'header',
                                                      'name': '__ecma.String'}],
                                      'responses': {}},
                              'x-atom-usages': {'call': {'server.ts': [597]}}},
 '/rest/web3/nftUnlocked': {'get': {'parameters': [{'in': 'header',
                                                    'name': '__ecma.String'}],
                                    'responses': {}},
                            'x-atom-usages': {'call': {'server.ts': [596]}}},
 '/rest/web3/submitKey': {'post': {'parameters': [{'in': 'header',
                                                   'name': '__ecma.String'}],
                                   'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [595]}}},
 '/rest/web3/walletExploitAddress': {'post': {'parameters': [{'in': 'header',
                                                              'name': '__ecma.String'}],
                                              'responses': {}},
                                     'x-atom-usages': {'call': {'server.ts': [599]}}},
 '/rest/web3/walletNFTVerify': {'post': {'parameters': [{'in': 'header',
                                                         'name': '__ecma.String'}],
                                         'responses': {}},
                                'x-atom-usages': {'call': {'server.ts': [598]}}},
 '/security.txt': {'get': {'parameters': [{'in': 'header', 'name': 'ANY'}],
                           'responses': {}},
                   'x-atom-usages': {'call': {'server.ts': [196, 197]}}},
 '/snippets': {'get': {'parameters': [{'in': 'header',
                                       'name': '__ecma.String'}],
                       'responses': {}},
               'x-atom-usages': {'call': {'server.ts': [624]}}},
 '/snippets/fixes': {'post': {'parameters': [{'in': 'header',
                                              'name': '__ecma.String'}],
                              'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [628]}}},
 '/snippets/fixes/{key}': {'get': {'parameters': [], 'responses': {}},
                           'parameters': [{'in': 'path',
                                           'name': 'key',
                                           'required': True}],
                           'x-atom-usages': {'call': {'server.ts': [627]}}},
 '/snippets/verdict': {'post': {'parameters': [{'in': 'header',
                                                'name': '__ecma.String'}],
                                'responses': {}},
                       'x-atom-usages': {'call': {'server.ts': [626]}}},
 '/snippets/{challenge}': {'get': {'parameters': [], 'responses': {}},
                           'parameters': [{'in': 'path',
                                           'name': 'challenge',
                                           'required': True}],
                           'x-atom-usages': {'call': {'server.ts': [625]}}},
 '/solve/challenges/server-side': {'x-atom-usages': {'call': {'server.ts': [219]}}},
 '/support/logs': {'x-atom-usages': {'call': {'server.ts': [258, 259]}}},
 '/support/logs/{file}': {'parameters': [{'in': 'path',
                                          'name': 'file',
                                          'required': True}],
                          'x-atom-usages': {'call': {'server.ts': [260]}}},
 '/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg': {'get': {'parameters': [{'in': 'header',
                                                                                                 'name': '__ecma.String'}],
                                                                                 'responses': {}},
                                                                         'x-atom-usages': {'call': {'server.ts': [605]}}},
 '/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us': {'get': {'parameters': [{'in': 'header',
                                                                                                                                      'name': '__ecma.String'}],
                                                                                                                      'responses': {}},
                                                                                                              'x-atom-usages': {'call': {'server.ts': [606]}}},
 '/token': {'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                    {'in': 'header', 'name': '__ecma.String'}],
                     'responses': {}},
            'x-atom-usages': {'call': {'routes/dataErasure.ts': [54]}}},
 '/trustproxy': {'x-atom-usages': {'call': {'server.ts': [312]}}},
 '/video': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                    'responses': {}},
            'x-atom-usages': {'call': {'server.ts': [617]}}},
 '/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility': {'get': {'parameters': [{'in': 'header',
                                                                                                         'name': '__ecma.String'}],
                                                                                         'responses': {}},
                                                                                 'x-atom-usages': {'call': {'server.ts': [607]}}},
 '/{regex_param_1}/{file}': {'parameters': [{'in': 'path',
                                             'name': 'file',
                                             'required': True},
                                            {'in': 'path',
                                             'name': 'regex_param_1',
                                             'required': True,
                                             'schema': {'pattern': 'ftp(?!/quarantine)',
                                                        'type': 'string'}}],
                             'x-atom-usages': {'call': {'server.ts': [250]}}}}
    result = js_usages_2.convert_usages()
    result = sort_openapi_result(result)
    assert result == {'/': {'get': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                              {'in': 'header', 'name': '__ecma.String'}],
               'responses': {}},
       'x-atom-usages': {'call': {'app/routes/index.js': [30],
                                  'app/routes/tutorial.js': [8]}}},
 '/allocations/{userId}': {'get': {'parameters': [], 'responses': {}},
                           'parameters': [{'in': 'path',
                                           'name': 'userId',
                                           'required': True}],
                           'x-atom-usages': {'call': {'app/routes/index.js': [63]}}},
 '/app/assets/favicon.ico': {'x-atom-usages': {'call': {'server.js': [68]}}},
 '/benefits': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'},
                                      {'in': 'header',
                                       'name': 'app/routes/session.js::program:SessionHandler:<member>(isLoggedInMiddleware)'}],
                       'responses': {}},
               'post': {'parameters': [{'in': 'header',
                                        'name': '__ecma.String'},
                                       {'in': 'header',
                                        'name': 'app/routes/session.js::program:SessionHandler:<member>(isLoggedInMiddleware)'}],
                        'responses': {}},
               'x-atom-usages': {'call': {'app/routes/index.js': [55, 56]}}},
 '/contributions': {'get': {'parameters': [{'in': 'header',
                                            'name': '__ecma.String'},
                                           {'in': 'header',
                                            'name': 'app/routes/session.js::program:SessionHandler:<member>(isLoggedInMiddleware)'}],
                            'responses': {}},
                    'post': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'},
                                            {'in': 'header',
                                             'name': 'app/routes/session.js::program:SessionHandler:<member>(isLoggedInMiddleware)'}],
                             'responses': {}},
                    'x-atom-usages': {'call': {'app/routes/index.js': [51,
                                                                       52]}}},
 '/dashboard': {'get': {'parameters': [{'in': 'header',
                                        'name': '__ecma.String'},
                                       {'in': 'header',
                                        'name': 'app/routes/session.js::program:SessionHandler:<member>(isLoggedInMiddleware)'}],
                        'responses': {}},
                'x-atom-usages': {'call': {'app/routes/index.js': [44]}}},
 '/learn': {'get': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                   {'in': 'header', 'name': '__ecma.String'},
                                   {'in': 'header',
                                    'name': 'app/routes/session.js::program:SessionHandler:<member>(isLoggedInMiddleware)'}],
                    'responses': {}},
            'x-atom-usages': {'call': {'app/routes/index.js': [70]}}},
 '/login': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                    'responses': {}},
            'post': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                     'responses': {}},
            'x-atom-usages': {'call': {'app/routes/index.js': [33, 34]}}},
 '/logout': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                     'responses': {}},
             'x-atom-usages': {'call': {'app/routes/index.js': [41]}}},
 '/memos': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'},
                                   {'in': 'header',
                                    'name': 'app/routes/session.js::program:SessionHandler:<member>(isLoggedInMiddleware)'}],
                    'responses': {}},
            'post': {'parameters': [{'in': 'header', 'name': '__ecma.String'},
                                    {'in': 'header',
                                     'name': 'app/routes/session.js::program:SessionHandler:<member>(isLoggedInMiddleware)'}],
                     'responses': {}},
            'x-atom-usages': {'call': {'app/routes/index.js': [66, 67]}}},
 '/profile': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'},
                                     {'in': 'header',
                                      'name': 'app/routes/session.js::program:SessionHandler:<member>(isLoggedInMiddleware)'}],
                      'responses': {}},
              'post': {'parameters': [{'in': 'header', 'name': '__ecma.String'},
                                      {'in': 'header',
                                       'name': 'app/routes/session.js::program:SessionHandler:<member>(isLoggedInMiddleware)'}],
                       'responses': {}},
              'x-atom-usages': {'call': {'app/routes/index.js': [47, 48]}}},
 '/research': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'},
                                      {'in': 'header',
                                       'name': 'app/routes/session.js::program:SessionHandler:<member>(isLoggedInMiddleware)'}],
                       'responses': {}},
               'x-atom-usages': {'call': {'app/routes/index.js': [76]}}},
 '/signup': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                     'responses': {}},
             'post': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                      'responses': {}},
             'x-atom-usages': {'call': {'app/routes/index.js': [37, 38]}}},
 '/tutorial': {'x-atom-usages': {'call': {'app/routes/index.js': [79]}}},
 '/tutorial/a1': {'get': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                         {'in': 'header',
                                          'name': '__ecma.String'}],
                          'responses': {}},
                  'x-atom-usages': {'call': {'app/routes/tutorial.js': [8]}}}}
    result = py_usages_1.convert_usages()
    result = sort_openapi_result(result)
    assert result == {
        '/admin': {'get': {'responses': {}},
            'post': {'responses': {}},
            'x-atom-usages': {'call': {'djangogoat/urls.py': [31]}}},
 '/conversation': {'get': {'responses': {}},
                   'post': {'responses': {}},
                   'x-atom-usages': {'call': {'djangogoat/urls.py': [35]}}},
 '/conversation/{friend_pk}': {'get': {'responses': {}},
                               'parameters': [{'in': 'path',
                                               'name': 'friend_pk',
                                               'required': True}],
                               'post': {'responses': {}},
                               'x-atom-usages': {'call': {'djangogoat/urls.py': [35]}}},
 '/dash': {'get': {'responses': {}},
           'post': {'responses': {}},
           'x-atom-usages': {'call': {'djangogoat/urls.py': [34]}}},
 '/django.contrib.auth.urls': {'get': {'responses': {}},
                               'post': {'responses': {}},
                               'x-atom-usages': {'call': {'djangogoat/urls.py': [64]}}},
 '/document_root': {'get': {'responses': {}},
                    'post': {'responses': {}},
                    'x-atom-usages': {'call': {'djangogoat/urls.py': [67]}}},
 '/instructions': {'get': {'responses': {}},
                   'post': {'responses': {}},
                   'x-atom-usages': {'call': {'djangogoat/urls.py': [52]}}},
 '/instructions.html': {'get': {'responses': {}},
                        'post': {'responses': {}},
                        'x-atom-usages': {'call': {'djangogoat/urls.py': [52]}}},
 '/landing': {'get': {'responses': {}},
              'post': {'responses': {}},
              'x-atom-usages': {'call': {'djangogoat/urls.py': [47]}}},
 '/landing.html': {'get': {'responses': {}},
                   'post': {'responses': {}},
                   'x-atom-usages': {'call': {'djangogoat/urls.py': [47]}}},
 '/login': {'get': {'responses': {}},
            'post': {'responses': {}},
            'x-atom-usages': {'call': {'djangogoat/urls.py': [59, 60]}}},
 '/login_url': {'get': {'responses': {}},
                'post': {'responses': {}},
                'x-atom-usages': {'call': {'djangogoat/urls.py': [60]}}},
 '/logout': {'get': {'responses': {}},
             'post': {'responses': {}},
             'x-atom-usages': {'call': {'djangogoat/urls.py': [60]}}},
 '/media/{path}': {'get': {'responses': {}},
                   'parameters': [{'in': 'path',
                                   'name': 'path',
                                   'required': True,
                                   'schema': {'pattern': '.*',
                                              'type': 'string'}}],
                   'post': {'responses': {}},
                   'x-atom-usages': {'call': {'djangogoat/urls.py': [67]}}},
 '/note': {'get': {'responses': {}},
           'post': {'responses': {}},
           'x-atom-usages': {'call': {'djangogoat/urls.py': [40]}}},
 '/note/{pk}': {'get': {'responses': {}},
                'parameters': [{'in': 'path', 'name': 'pk', 'required': True}],
                'post': {'responses': {}},
                'x-atom-usages': {'call': {'djangogoat/urls.py': [40]}}},
 '/profile': {'get': {'responses': {}},
              'post': {'responses': {}},
              'x-atom-usages': {'call': {'djangogoat/urls.py': [61]}}},
 '/profile-update': {'get': {'responses': {}},
                     'post': {'responses': {}},
                     'x-atom-usages': {'call': {'djangogoat/urls.py': [62]}}},
 '/profile/{pk}': {'get': {'responses': {}},
                   'parameters': [{'in': 'path',
                                   'name': 'pk',
                                   'required': True}],
                   'post': {'responses': {}},
                   'x-atom-usages': {'call': {'djangogoat/urls.py': [61]}}},
 '/sign-up': {'get': {'responses': {}},
              'post': {'responses': {}},
              'x-atom-usages': {'call': {'djangogoat/urls.py': [63]}}},
 '/vulnerabilities': {'get': {'responses': {}},
                      'post': {'responses': {}},
                      'x-atom-usages': {'call': {'djangogoat/urls.py': [44]}}},
 '/vulnerabilities.html': {'get': {'responses': {}},
                           'post': {'responses': {}},
                           'x-atom-usages': {'call': {'djangogoat/urls.py': [44]}}},
 '/write-note': {'get': {'responses': {}},
                 'post': {'responses': {}},
                 'x-atom-usages': {'call': {'djangogoat/urls.py': [41]}}}}
    assert py_usages_2.convert_usages() == {'/': {'get': {'responses': {}},
       'head': {'responses': {}},
       'options': {'responses': {}},
       'x-atom-usages': {'call': {'main.py': [108]}}},
 '/config': {'get': {'responses': {}},
             'head': {'responses': {}},
             'options': {'responses': {}},
             'x-atom-usages': {'call': {'main.py': [225]}}},
 '/evaluate': {'get': {'responses': {}},
               'head': {'responses': {}},
               'options': {'responses': {}},
               'post': {'responses': {}},
               'x-atom-usages': {'call': {'main.py': [180]}}},
 '/listservices': {'get': {'responses': {}},
                   'head': {'responses': {}},
                   'options': {'responses': {}},
                   'x-atom-usages': {'call': {'main.py': [280]}}},
 '/lookup': {'get': {'responses': {}},
             'head': {'responses': {}},
             'options': {'responses': {}},
             'post': {'responses': {}},
             'x-atom-usages': {'call': {'main.py': [161]}}},
 '/sayhi': {'get': {'responses': {}},
            'head': {'responses': {}},
            'options': {'responses': {}},
            'post': {'responses': {}},
            'x-atom-usages': {'call': {'main.py': [258]}}}}


def test_endpoints_to_openapi(java_usages_1):
    result = sort_openapi_result(java_usages_1.endpoints_to_openapi())
    assert result == {'info': {'title': 'OpenAPI Specification for data', 'version': '1.0.0'},
 'openapi': '3.1.0',
 'paths': {'/': {'post': {'responses': {}},
                 'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [35]}}},
           '/accounts/{accountName}': {'get': {'responses': {}},
                                       'parameters': [{'in': 'path',
                                                       'name': 'accountName',
                                                       'required': True}],
                                       'x-atom-usages': {'call': {'notification-service/src/main/java/com/piggymetrics/notification/client/AccountServiceClient.java': [12]}}},
           '/current': {'get': {'responses': {}},
                        'put': {'responses': {}},
                        'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [25,
                                                                                                                                                30],
                                                   'auth-service/src/main/java/com/piggymetrics/auth/controller/UserController.java': [22],
                                                   'notification-service/src/main/java/com/piggymetrics/notification/controller/RecipientController.java': [21,
                                                                                                                                                            26],
                                                   'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': [20]},
                                          'target': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [30],
                                                     'auth-service/src/main/java/com/piggymetrics/auth/controller/UserController.java': [22],
                                                     'notification-service/src/main/java/com/piggymetrics/notification/controller/RecipientController.java': [26]}}},
           '/latest': {'get': {'responses': {}},
                       'x-atom-usages': {'call': {'statistics-service/src/main/java/com/piggymetrics/statistics/client/ExchangeRatesClient.java': [13]}}},
           '/statistics/{accountName}': {'parameters': [{'in': 'path',
                                                         'name': 'accountName',
                                                         'required': True}],
                                         'put': {'responses': {}},
                                         'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/client/StatisticsServiceClient.java': [13]}}},
           '/uaa/users': {'post': {'responses': {}},
                          'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/client/AuthServiceClient.java': [12]}}},
           '/{accountName}': {'get': {'responses': {}},
                              'parameters': [{'in': 'path',
                                              'name': 'accountName',
                                              'required': True}],
                              'put': {'responses': {}},
                              'x-atom-usages': {'call': {'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': [26,
                                                                                                                                                               32]},
                                                'target': {'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': [32]}}},
           '/{name}': {'get': {'responses': {}},
                       'parameters': [{'in': 'path',
                                       'name': 'name',
                                       'required': True}],
                       'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [20]}}}}}


def test_filter_calls():
    queried_calls = [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                      'resolvedMethod': '@RequestMapping(value = "/current", method = RequestMethod.GET)',
                      'paramTypes': [], 'returnType': '', 'isExternal': False, 'lineNumber': 20,
                      'columnNumber': 2},
                     {'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                      'resolvedMethod': '@RequestMapping(value = "/{accountName}", method = RequestMethod.GET)',
                      'paramTypes': [], 'returnType': '', 'isExternal': False, 'lineNumber': 26,
                      'columnNumber': 2},
                     {'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                      'resolvedMethod': '@RequestMapping(value = "/{accountName}", method = RequestMethod.PUT)',
                      'paramTypes': [], 'returnType': '', 'isExternal': False, 'lineNumber': 32,
                      'columnNumber': 2}
                     ]
    resolved_methods = {'resolved_methods': {
        '@RequestMapping(value = "/current", method = RequestMethod.GET)': {
            'endpoints': ['/current'], 'calls': [
                {'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                 'resolvedMethod': '@RequestMapping(value = "/current", method = RequestMethod.GET)',
                 'paramTypes': [], 'returnType': '', 'isExternal': False, 'lineNumber': 20,
                 'columnNumber': 2}], 'line_nos': [20]},
        '@RequestMapping(value = "/{accountName}", method = RequestMethod.GET)': {
            'endpoints': ['/{accountName}'], 'calls': [
                {'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                 'resolvedMethod': '@RequestMapping(value = "/{accountName}", method = RequestMethod.GET)',
                 'paramTypes': [], 'returnType': '', 'isExternal': False, 'lineNumber': 26,
                 'columnNumber': 2}], 'line_nos': [26]},
        '@RequestMapping(value = "/{accountName}", method = RequestMethod.PUT)': {
            'endpoints': ['/{accountName}'], 'calls': [
                {'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                 'resolvedMethod': '@RequestMapping(value = "/{accountName}", method = RequestMethod.PUT)',
                 'paramTypes': [], 'returnType': '', 'isExternal': False, 'lineNumber': 32,
                 'columnNumber': 2}], 'line_nos': [32]}}
    }

    assert filter_calls(queried_calls, resolved_methods) == {'resolved_methods': {'@RequestMapping(value = "/current", method = RequestMethod.GET)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                     'columnNumber': 2,
                                                                                                     'isExternal': False,
                                                                                                     'lineNumber': 20,
                                                                                                     'paramTypes': [],
                                                                                                     'resolvedMethod': '@RequestMapping(value '
                                                                                                                       '= '
                                                                                                                       '"/current", '
                                                                                                                       'method '
                                                                                                                       '= '
                                                                                                                       'RequestMethod.GET)',
                                                                                                     'returnType': ''}],
                                                                                          'endpoints': ['/current'],
                                                                                          'line_nos': [20]},
                      '@RequestMapping(value = "/{accountName}", method = RequestMethod.GET)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                           'columnNumber': 2,
                                                                                                           'isExternal': False,
                                                                                                           'lineNumber': 26,
                                                                                                           'paramTypes': [],
                                                                                                           'resolvedMethod': '@RequestMapping(value '
                                                                                                                             '= '
                                                                                                                             '"/{accountName}", '
                                                                                                                             'method '
                                                                                                                             '= '
                                                                                                                             'RequestMethod.GET)',
                                                                                                           'returnType': ''}],
                                                                                                'endpoints': ['/{accountName}'],
                                                                                                'line_nos': [26]},
                      '@RequestMapping(value = "/{accountName}", method = RequestMethod.PUT)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                           'columnNumber': 2,
                                                                                                           'isExternal': False,
                                                                                                           'lineNumber': 32,
                                                                                                           'paramTypes': [],
                                                                                                           'resolvedMethod': '@RequestMapping(value '
                                                                                                                             '= '
                                                                                                                             '"/{accountName}", '
                                                                                                                             'method '
                                                                                                                             '= '
                                                                                                                             'RequestMethod.PUT)',
                                                                                                           'returnType': ''}],
                                                                                                'endpoints': ['/{accountName}'],
                                                                                                'line_nos': [32]}}
                                                             }


def test_java(java_usages_1):
    methods = java_usages_1._process_methods()
    for k, v in methods.items():
        methods[k].sort()
    assert methods == {'account-service/src/main/java/com/piggymetrics/account/AccountApplication.java': ['<operator>.arrayInitializer',
                                                                                    '<operator>.fieldAccess',
                                                                                    'com.piggymetrics.statistics.domain.Item.getCurrency:com.piggymetrics.statistics.domain.Currency()',
                                                                                    'com.piggymetrics.statistics.domain.Item.getTitle:java.lang.String()',
                                                                                    'org.springframework.boot.SpringApplication.run:org.springframework.context.ConfigurableApplicationContext(java.lang.Class,java.lang.String[])'],
 'account-service/src/main/java/com/piggymetrics/account/client/AuthServiceClient.java': ['@RequestMapping(method '
                                                                                          '= '
                                                                                          'RequestMethod.POST, '
                                                                                          'value '
                                                                                          '= '
                                                                                          '"/uaa/users", '
                                                                                          'consumes '
                                                                                          '= '
                                                                                          'MediaType.APPLICATION_JSON_UTF8_VALUE)',
                                                                                          'com.piggymetrics.account.client.AuthServiceClient.createUser:void(com.piggymetrics.account.domain.User)'],
 'account-service/src/main/java/com/piggymetrics/account/client/StatisticsServiceClient.java': ['@RequestMapping(method '
                                                                                                '= '
                                                                                                'RequestMethod.PUT, '
                                                                                                'value '
                                                                                                '= '
                                                                                                '"/statistics/{accountName}", '
                                                                                                'consumes '
                                                                                                '= '
                                                                                                'MediaType.APPLICATION_JSON_UTF8_VALUE)',
                                                                                                'com.piggymetrics.account.client.StatisticsServiceClient.updateStatistics:void(java.lang.String,com.piggymetrics.account.domain.Account)'],
 'account-service/src/main/java/com/piggymetrics/account/client/StatisticsServiceClientFallback.java': ['@Override',
                                                                                                        'LOGGER',
                                                                                                        'com.piggymetrics.account.client.StatisticsServiceClientFallback.updateStatistics:void(java.lang.String,com.piggymetrics.account.domain.Account)',
                                                                                                        'org.slf4j.Logger.error:void(java.lang.String,java.lang.Object)'],
 'account-service/src/main/java/com/piggymetrics/account/config/ResourceServerConfig.java': ['<operator>.alloc',
                                                                                             '@Autowired',
                                                                                             '@Bean',
                                                                                             '@ConfigurationProperties(prefix '
                                                                                             '= '
                                                                                             '"security.oauth2.client")',
                                                                                             '@Override',
                                                                                             'com.piggymetrics.account.config.ResourceServerConfig.clientCredentialsResourceDetails:org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails()',
                                                                                             'org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties.getClientId:java.lang.String()',
                                                                                             'org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties.getUserInfoUri:java.lang.String()',
                                                                                             'org.springframework.cloud.security.oauth2.client.feign.OAuth2FeignRequestInterceptor.<init>:void(org.springframework.security.oauth2.client.OAuth2ClientContext,org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)',
                                                                                             'org.springframework.security.config.annotation.web.builders.HttpSecurity.authorizeRequests:org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry()',
                                                                                             'org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl.authenticated:org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry()',
                                                                                             'org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl.permitAll:org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry()',
                                                                                             'org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry.antMatchers:java.lang.Object(java.lang.String[])',
                                                                                             'org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry.anyRequest:java.lang.Object()',
                                                                                             'org.springframework.security.oauth2.client.DefaultOAuth2ClientContext.<init>:void()',
                                                                                             'org.springframework.security.oauth2.client.OAuth2RestTemplate.<init>:void(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)',
                                                                                             'org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails.<init>:void()',
                                                                                             'sso'],
 'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': ['@PreAuthorize("#oauth2.hasScope(\'server\') '
                                                                                              'or '
                                                                                              '#name.equals(\'demo\')")',
                                                                                              '@RequestMapping(path '
                                                                                              '= '
                                                                                              '"/", '
                                                                                              'method '
                                                                                              '= '
                                                                                              'RequestMethod.POST)',
                                                                                              '@RequestMapping(path '
                                                                                              '= '
                                                                                              '"/current", '
                                                                                              'method '
                                                                                              '= '
                                                                                              'RequestMethod.GET)',
                                                                                              '@RequestMapping(path '
                                                                                              '= '
                                                                                              '"/current", '
                                                                                              'method '
                                                                                              '= '
                                                                                              'RequestMethod.PUT)',
                                                                                              '@RequestMapping(path '
                                                                                              '= '
                                                                                              '"/{name}", '
                                                                                              'method '
                                                                                              '= '
                                                                                              'RequestMethod.GET)',
                                                                                              'accountService',
                                                                                              'com.piggymetrics.account.service.AccountService.create:com.piggymetrics.account.domain.Account(com.piggymetrics.account.domain.User)',
                                                                                              'com.piggymetrics.account.service.AccountService.findByName:com.piggymetrics.account.domain.Account(java.lang.String)',
                                                                                              'com.piggymetrics.account.service.AccountService.saveChanges:void(java.lang.String,com.piggymetrics.account.domain.Account)',
                                                                                              'java.security.Principal.getName:java.lang.String()'],
 'account-service/src/main/java/com/piggymetrics/account/controller/ErrorHandler.java': ['@ExceptionHandler(IllegalArgumentException.class)',
                                                                                         '@ResponseStatus(HttpStatus.BAD_REQUEST)',
                                                                                         'com.piggymetrics.account.controller.ErrorHandler.getClass:java.lang.Class()',
                                                                                         'log',
                                                                                         'org.slf4j.Logger.info:void(java.lang.String,java.lang.Throwable)'],
 'account-service/src/main/java/com/piggymetrics/account/domain/Account.java': ['com.piggymetrics.account.domain.Account.<init>:void()',
                                                                                'com.piggymetrics.account.domain.Account.getExpenses:java.util.List()',
                                                                                'com.piggymetrics.account.domain.Account.getIncomes:java.util.List()',
                                                                                'com.piggymetrics.account.domain.Account.getName:java.lang.String()',
                                                                                'com.piggymetrics.account.domain.Account.getNote:java.lang.String()',
                                                                                'com.piggymetrics.account.domain.Account.getSaving:com.piggymetrics.account.domain.Saving()',
                                                                                'com.piggymetrics.account.domain.Account.setExpenses:void(java.util.List)',
                                                                                'com.piggymetrics.account.domain.Account.setIncomes:void(java.util.List)',
                                                                                'com.piggymetrics.account.domain.Account.setLastSeen:void(java.util.Date)',
                                                                                'com.piggymetrics.account.domain.Account.setName:void(java.lang.String)',
                                                                                'com.piggymetrics.account.domain.Account.setNote:void(java.lang.String)',
                                                                                'com.piggymetrics.account.domain.Account.setSaving:void(com.piggymetrics.account.domain.Saving)',
                                                                                'expenses',
                                                                                'incomes',
                                                                                'lastSeen',
                                                                                'name',
                                                                                'note',
                                                                                'saving'],
 'account-service/src/main/java/com/piggymetrics/account/domain/Currency.java': ['EUR',
                                                                                 'RUB',
                                                                                 'USD',
                                                                                 'com.piggymetrics.account.domain.Currency.getDefault:com.piggymetrics.account.domain.Currency()'],
 'account-service/src/main/java/com/piggymetrics/account/domain/Item.java': ['amount',
                                                                             'currency',
                                                                             'icon',
                                                                             'period',
                                                                             'title'],
 'account-service/src/main/java/com/piggymetrics/account/domain/Saving.java': ['amount',
                                                                               'capitalization',
                                                                               'com.piggymetrics.account.domain.Saving.<init>:void()',
                                                                               'com.piggymetrics.account.domain.Saving.setAmount:void(java.math.BigDecimal)',
                                                                               'com.piggymetrics.account.domain.Saving.setCapitalization:void(java.lang.Boolean)',
                                                                               'com.piggymetrics.account.domain.Saving.setCurrency:void(com.piggymetrics.account.domain.Currency)',
                                                                               'com.piggymetrics.account.domain.Saving.setDeposit:void(java.lang.Boolean)',
                                                                               'com.piggymetrics.account.domain.Saving.setInterest:void(java.math.BigDecimal)',
                                                                               'currency',
                                                                               'deposit',
                                                                               'interest'],
 'account-service/src/main/java/com/piggymetrics/account/domain/TimePeriod.java': ['DAY',
                                                                                   'HOUR',
                                                                                   'MONTH',
                                                                                   'QUARTER',
                                                                                   'YEAR'],
 'account-service/src/main/java/com/piggymetrics/account/domain/User.java': ['com.piggymetrics.account.domain.User.getUsername:java.lang.String()',
                                                                             'password',
                                                                             'username'],
 'account-service/src/main/java/com/piggymetrics/account/repository/AccountRepository.java': ['com.piggymetrics.account.repository.AccountRepository.findByName:com.piggymetrics.account.domain.Account(java.lang.String)'],
 'account-service/src/main/java/com/piggymetrics/account/service/AccountService.java': ['com.piggymetrics.account.service.AccountService.create:com.piggymetrics.account.domain.Account(com.piggymetrics.account.domain.User)',
                                                                                        'com.piggymetrics.account.service.AccountService.findByName:com.piggymetrics.account.domain.Account(java.lang.String)',
                                                                                        'com.piggymetrics.account.service.AccountService.saveChanges:void(java.lang.String,com.piggymetrics.account.domain.Account)'],
 'account-service/src/main/java/com/piggymetrics/account/service/AccountServiceImpl.java': ['<operator>.addition',
                                                                                            '@Override',
                                                                                            'authClient',
                                                                                            'com.piggymetrics.account.client.AuthServiceClient.createUser:void(com.piggymetrics.account.domain.User)',
                                                                                            'com.piggymetrics.account.client.StatisticsServiceClient.updateStatistics:void(java.lang.String,com.piggymetrics.account.domain.Account)',
                                                                                            'com.piggymetrics.account.domain.Account.<init>:void()',
                                                                                            'com.piggymetrics.account.domain.Account.getExpenses:java.util.List()',
                                                                                            'com.piggymetrics.account.domain.Account.getIncomes:java.util.List()',
                                                                                            'com.piggymetrics.account.domain.Account.getName:java.lang.String()',
                                                                                            'com.piggymetrics.account.domain.Account.getNote:java.lang.String()',
                                                                                            'com.piggymetrics.account.domain.Account.getSaving:com.piggymetrics.account.domain.Saving()',
                                                                                            'com.piggymetrics.account.domain.Account.setExpenses:void(java.util.List)',
                                                                                            'com.piggymetrics.account.domain.Account.setIncomes:void(java.util.List)',
                                                                                            'com.piggymetrics.account.domain.Account.setName:void(java.lang.String)',
                                                                                            'com.piggymetrics.account.domain.Account.setNote:void(java.lang.String)',
                                                                                            'com.piggymetrics.account.domain.Account.setSaving:void(com.piggymetrics.account.domain.Saving)',
                                                                                            'com.piggymetrics.account.domain.Saving.<init>:void()',
                                                                                            'com.piggymetrics.account.domain.Saving.setCapitalization:void(java.lang.Boolean)',
                                                                                            'com.piggymetrics.account.domain.Saving.setCurrency:void(com.piggymetrics.account.domain.Currency)',
                                                                                            'com.piggymetrics.account.domain.Saving.setDeposit:void(java.lang.Boolean)',
                                                                                            'com.piggymetrics.account.domain.User.getUsername:java.lang.String()',
                                                                                            'com.piggymetrics.account.repository.AccountRepository.findByName:com.piggymetrics.account.domain.Account(java.lang.String)',
                                                                                            'com.piggymetrics.account.repository.AccountRepository.save:java.lang.Object(java.lang.Object)',
                                                                                            'com.piggymetrics.account.service.AccountServiceImpl.create:com.piggymetrics.account.domain.Account(com.piggymetrics.account.domain.User)',
                                                                                            'com.piggymetrics.account.service.AccountServiceImpl.findByName:com.piggymetrics.account.domain.Account(java.lang.String)',
                                                                                            'com.piggymetrics.account.service.AccountServiceImpl.getClass:java.lang.Class()',
                                                                                            'com.piggymetrics.account.service.AccountServiceImpl.saveChanges:void(java.lang.String,com.piggymetrics.account.domain.Account)',
                                                                                            'com.piggymetrics.statistics.domain.Account',
                                                                                            'com.piggymetrics.statistics.domain.Saving',
                                                                                            'java.math.BigDecimal',
                                                                                            'java.math.BigDecimal.<init>:void(int)',
                                                                                            'java.util.Date',
                                                                                            'java.util.Date.<init>:void()',
                                                                                            'log',
                                                                                            'org.slf4j.Logger.debug:void(java.lang.String,java.lang.Object)',
                                                                                            'org.slf4j.Logger.info:void(java.lang.String)',
                                                                                            'org.springframework.util.Assert.hasLength:void(java.lang.String)',
                                                                                            'org.springframework.util.Assert.isNull:void(java.lang.Object,java.lang.String)',
                                                                                            'org.springframework.util.Assert.notNull:void(java.lang.Object,java.lang.String)',
                                                                                            'repository',
                                                                                            'statisticsClient'],
 'account-service/src/main/java/com/piggymetrics/account/service/security/CustomUserInfoTokenServices.java': ['<operator>.cast',
                                                                                                              '<operator>.conditional',
                                                                                                              '<operator>.equals',
                                                                                                              '<operator>.indexAccess',
                                                                                                              '<operator>.lessThan',
                                                                                                              '<operator>.logicalNot',
                                                                                                              '<operator>.logicalOr',
                                                                                                              '<operator>.postIncrement',
                                                                                                              '<operator>.throw',
                                                                                                              '@Override',
                                                                                                              '@SuppressWarnings({ '
                                                                                                              '"unchecked" '
                                                                                                              '})',
                                                                                                              'PRINCIPAL_KEYS',
                                                                                                              'authoritiesExtractor',
                                                                                                              'clientId',
                                                                                                              'com.piggymetrics.account.service.security.CustomUserInfoTokenServices.<init>:void(java.lang.String,java.lang.String)',
                                                                                                              'com.piggymetrics.account.service.security.CustomUserInfoTokenServices.extractAuthentication:org.springframework.security.oauth2.provider.OAuth2Authentication(java.util.Map)',
                                                                                                              'com.piggymetrics.account.service.security.CustomUserInfoTokenServices.getClass:java.lang.Class()',
                                                                                                              'com.piggymetrics.account.service.security.CustomUserInfoTokenServices.getMap:java.util.Map(java.lang.String,java.lang.String)',
                                                                                                              'com.piggymetrics.account.service.security.CustomUserInfoTokenServices.getPrincipal:java.lang.Object(java.util.Map)',
                                                                                                              'com.piggymetrics.account.service.security.CustomUserInfoTokenServices.getRequest:org.springframework.security.oauth2.provider.OAuth2Request(java.util.Map)',
                                                                                                              'java.lang.Exception.getClass:java.lang.Class()',
                                                                                                              'java.lang.Exception.getMessage:java.lang.String()',
                                                                                                              'java.lang.String.equals:boolean(java.lang.Object)',
                                                                                                              'java.lang.UnsupportedOperationException.<init>:void(java.lang.String)',
                                                                                                              'java.util.Collections.emptySet:java.util.Set()',
                                                                                                              'java.util.Collections.singletonMap:java.util.Map(java.lang.Object,java.lang.Object)',
                                                                                                              'java.util.HashSet.<init>:void(java.util.Collection)',
                                                                                                              'java.util.LinkedHashSet.<init>:void(java.util.Collection)',
                                                                                                              'java.util.Map.containsKey:boolean(java.lang.Object)',
                                                                                                              'java.util.Map.get:java.lang.Object(java.lang.Object)',
                                                                                                              'logger',
                                                                                                              'org.apache.commons.logging.Log.debug:void(java.lang.Object)',
                                                                                                              'org.apache.commons.logging.Log.info:void(java.lang.Object)',
                                                                                                              'org.apache.commons.logging.LogFactory.getLog:org.apache.commons.logging.Log(java.lang.Class)',
                                                                                                              'org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor.extractAuthorities:java.util.List(java.util.Map)',
                                                                                                              'org.springframework.boot.autoconfigure.security.oauth2.resource.FixedAuthoritiesExtractor.<init>:void()',
                                                                                                              'org.springframework.http.ResponseEntity.getBody:java.lang.Object()',
                                                                                                              'org.springframework.security.authentication.UsernamePasswordAuthenticationToken',
                                                                                                              'org.springframework.security.authentication.UsernamePasswordAuthenticationToken.<init>:void(java.lang.Object,java.lang.Object,java.util.Collection)',
                                                                                                              'org.springframework.security.authentication.UsernamePasswordAuthenticationToken.setDetails:void(java.lang.Object)',
                                                                                                              'org.springframework.security.oauth2.client.OAuth2ClientContext.getAccessToken:org.springframework.security.oauth2.common.OAuth2AccessToken()',
                                                                                                              'org.springframework.security.oauth2.client.OAuth2ClientContext.setAccessToken:void(org.springframework.security.oauth2.common.OAuth2AccessToken)',
                                                                                                              'org.springframework.security.oauth2.client.OAuth2RestOperations.getForEntity:org.springframework.http.ResponseEntity(java.lang.String,java.lang.Class,java.lang.Object[])',
                                                                                                              'org.springframework.security.oauth2.client.OAuth2RestOperations.getOAuth2ClientContext:org.springframework.security.oauth2.client.OAuth2ClientContext()',
                                                                                                              'org.springframework.security.oauth2.client.OAuth2RestTemplate',
                                                                                                              'org.springframework.security.oauth2.client.OAuth2RestTemplate.<init>:void(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)',
                                                                                                              'org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails',
                                                                                                              'org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails.<init>:void()',
                                                                                                              'org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails.setClientId:void(java.lang.String)',
                                                                                                              'org.springframework.security.oauth2.common.DefaultOAuth2AccessToken',
                                                                                                              'org.springframework.security.oauth2.common.DefaultOAuth2AccessToken.<init>:void(java.lang.String)',
                                                                                                              'org.springframework.security.oauth2.common.DefaultOAuth2AccessToken.setTokenType:void(java.lang.String)',
                                                                                                              'org.springframework.security.oauth2.common.OAuth2AccessToken.getValue:java.lang.String()',
                                                                                                              'org.springframework.security.oauth2.common.exceptions.InvalidTokenException.<init>:void(java.lang.String)',
                                                                                                              'org.springframework.security.oauth2.provider.OAuth2Authentication.<init>:void(org.springframework.security.oauth2.provider.OAuth2Request,org.springframework.security.core.Authentication)',
                                                                                                              'org.springframework.security.oauth2.provider.OAuth2Request',
                                                                                                              'org.springframework.security.oauth2.provider.OAuth2Request.<init>:void(java.util.Map,java.lang.String,java.util.Collection,boolean,java.util.Set,java.util.Set,java.lang.String,java.util.Set,java.util.Map)',
                                                                                                              'restTemplate',
                                                                                                              'tokenType',
                                                                                                              'userInfoEndpointUrl'],
 'auth-service/src/main/java/com/piggymetrics/auth/config/OAuth2AuthorizationConfig.java': ['@Override',
                                                                                            'NOOP_PASSWORD_ENCODE',
                                                                                            'authenticationManager',
                                                                                            'env',
                                                                                            'org.springframework.core.env.Environment.getProperty:java.lang.String(java.lang.String)',
                                                                                            'org.springframework.security.crypto.password.NoOpPasswordEncoder.getInstance:org.springframework.security.crypto.password.PasswordEncoder()',
                                                                                            'org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder$ClientBuilder.and:org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder()',
                                                                                            'org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder$ClientBuilder.authorizedGrantTypes:org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder$ClientBuilder(java.lang.String[])',
                                                                                            'org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder$ClientBuilder.scopes:org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder$ClientBuilder(java.lang.String[])',
                                                                                            'org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder$ClientBuilder.secret:org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder$ClientBuilder(java.lang.String)',
                                                                                            'org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder.withClient:org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder$ClientBuilder(java.lang.String)',
                                                                                            'org.springframework.security.oauth2.config.annotation.builders.InMemoryClientDetailsServiceBuilder.withClient:org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder$ClientBuilder(java.lang.String)',
                                                                                            'org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer.inMemory:org.springframework.security.oauth2.config.annotation.builders.InMemoryClientDetailsServiceBuilder()',
                                                                                            'org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.authenticationManager:org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer(org.springframework.security.authentication.AuthenticationManager)',
                                                                                            'org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.tokenStore:org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer(org.springframework.security.oauth2.provider.token.TokenStore)',
                                                                                            'org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.userDetailsService:org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer(org.springframework.security.core.userdetails.UserDetailsService)',
                                                                                            'org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer.checkTokenAccess:org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer(java.lang.String)',
                                                                                            'org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer.passwordEncoder:org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer(org.springframework.security.crypto.password.PasswordEncoder)',
                                                                                            'org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer.tokenKeyAccess:org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer(java.lang.String)',
                                                                                            'org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore.<init>:void()',
                                                                                            'tokenStore',
                                                                                            'userDetailsService'],
 'auth-service/src/main/java/com/piggymetrics/auth/config/WebSecurityConfig.java': ['<unresolvedNamespace>.disable:<unresolvedSignature>(0)',
                                                                                    '@Bean',
                                                                                    '@Override',
                                                                                    'org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder.userDetailsService:org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer(org.springframework.security.core.userdetails.UserDetailsService)',
                                                                                    'org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer.passwordEncoder:org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer(org.springframework.security.crypto.password.PasswordEncoder)',
                                                                                    'org.springframework.security.config.annotation.web.HttpSecurityBuilder.csrf:<unresolvedSignature>(0)',
                                                                                    'org.springframework.security.config.annotation.web.builders.HttpSecurity.authorizeRequests:org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry()',
                                                                                    'org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.authenticationManagerBean:org.springframework.security.authentication.AuthenticationManager()',
                                                                                    'org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry.and:org.springframework.security.config.annotation.web.HttpSecurityBuilder()',
                                                                                    'org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.<init>:void()',
                                                                                    'userDetailsService'],
 'auth-service/src/main/java/com/piggymetrics/auth/controller/UserController.java': ['@PreAuthorize("#oauth2.hasScope(\'server\')")',
                                                                                     '@RequestMapping(method '
                                                                                     '= '
                                                                                     'RequestMethod.POST)',
                                                                                     '@RequestMapping(value '
                                                                                     '= '
                                                                                     '"/current", '
                                                                                     'method '
                                                                                     '= '
                                                                                     'RequestMethod.GET)',
                                                                                     'com.piggymetrics.auth.service.UserService.create:void(com.piggymetrics.auth.domain.User)',
                                                                                     'userService'],
 'auth-service/src/main/java/com/piggymetrics/auth/domain/User.java': ['@Override',
                                                                       'com.piggymetrics.auth.domain.User.getPassword:java.lang.String()',
                                                                       'com.piggymetrics.auth.domain.User.getUsername:java.lang.String()',
                                                                       'com.piggymetrics.auth.domain.User.setPassword:void(java.lang.String)',
                                                                       'password',
                                                                       'username'],
 'auth-service/src/main/java/com/piggymetrics/auth/service/UserService.java': ['com.piggymetrics.auth.service.UserService.create:void(com.piggymetrics.auth.domain.User)'],
 'auth-service/src/main/java/com/piggymetrics/auth/service/UserServiceImpl.java': ['@Override',
                                                                                   'com.piggymetrics.auth.domain.User.getPassword:java.lang.String()',
                                                                                   'com.piggymetrics.auth.domain.User.getUsername:java.lang.String()',
                                                                                   'com.piggymetrics.auth.domain.User.setPassword:void(java.lang.String)',
                                                                                   'com.piggymetrics.auth.repository.UserRepository.findById:java.util.Optional(java.lang.Object)',
                                                                                   'com.piggymetrics.auth.repository.UserRepository.save:java.lang.Object(java.lang.Object)',
                                                                                   'com.piggymetrics.auth.service.UserServiceImpl.create:void(com.piggymetrics.auth.domain.User)',
                                                                                   'com.piggymetrics.auth.service.UserServiceImpl.getClass:java.lang.Class()',
                                                                                   'encoder',
                                                                                   'java.lang.IllegalArgumentException.<init>:void(java.lang.String)',
                                                                                   'java.util.Optional.ifPresent:void(java.util.function.Consumer)',
                                                                                   'log',
                                                                                   'org.slf4j.Logger.info:void(java.lang.String,java.lang.Object)',
                                                                                   'org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode:java.lang.String(java.lang.CharSequence)',
                                                                                   'repository'],
 'auth-service/src/main/java/com/piggymetrics/auth/service/security/MongoUserDetailsService.java': ['@Override',
                                                                                                    'com.piggymetrics.auth.repository.UserRepository.findById:java.util.Optional(java.lang.Object)',
                                                                                                    'java.util.Optional.orElseThrow:java.lang.Object(java.util.function.Supplier)',
                                                                                                    'org.springframework.security.core.userdetails.UsernameNotFoundException.<init>:void(java.lang.String)',
                                                                                                    'repository'],
 'config/src/main/java/com/piggymetrics/config/SecurityConfig.java': ['@Override',
                                                                      'org.springframework.security.config.annotation.web.HttpSecurityBuilder.httpBasic:<unresolvedSignature>(0)',
                                                                      'org.springframework.security.config.annotation.web.builders.HttpSecurity.authorizeRequests:org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry()',
                                                                      'org.springframework.security.config.annotation.web.builders.HttpSecurity.csrf:org.springframework.security.config.annotation.web.configurers.CsrfConfigurer()',
                                                                      'org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.disable:org.springframework.security.config.annotation.web.HttpSecurityBuilder()'],
 'notification-service/src/main/java/com/piggymetrics/notification/NotificationServiceApplication.java': ['@Bean',
                                                                                                          'java.util.Arrays.asList:java.util.List(java.lang.Object[])',
                                                                                                          'org.springframework.data.mongodb.core.convert.CustomConversions.<init>:void(java.util.List)'],
 'notification-service/src/main/java/com/piggymetrics/notification/client/AccountServiceClient.java': ['@RequestMapping(method '
                                                                                                       '= '
                                                                                                       'RequestMethod.GET, '
                                                                                                       'value '
                                                                                                       '= '
                                                                                                       '"/accounts/{accountName}", '
                                                                                                       'consumes '
                                                                                                       '= '
                                                                                                       'MediaType.APPLICATION_JSON_UTF8_VALUE)',
                                                                                                       'com.piggymetrics.notification.client.AccountServiceClient.getAccount:java.lang.String(java.lang.String)'],
 'notification-service/src/main/java/com/piggymetrics/notification/config/ResourceServerConfig.java': ['@Bean',
                                                                                                       '@ConfigurationProperties(prefix '
                                                                                                       '= '
                                                                                                       '"security.oauth2.client")',
                                                                                                       'com.piggymetrics.notification.config.ResourceServerConfig.clientCredentialsResourceDetails:org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails()'],
 'notification-service/src/main/java/com/piggymetrics/notification/controller/RecipientController.java': ['@RequestMapping(path '
                                                                                                          '= '
                                                                                                          '"/current", '
                                                                                                          'method '
                                                                                                          '= '
                                                                                                          'RequestMethod.GET)',
                                                                                                          '@RequestMapping(path '
                                                                                                          '= '
                                                                                                          '"/current", '
                                                                                                          'method '
                                                                                                          '= '
                                                                                                          'RequestMethod.PUT)',
                                                                                                          'com.piggymetrics.notification.service.RecipientService.save:com.piggymetrics.notification.domain.Recipient(java.lang.String,com.piggymetrics.notification.domain.Recipient)',
                                                                                                          'java.security.Principal.getName:java.lang.String()',
                                                                                                          'recipientService'],
 'notification-service/src/main/java/com/piggymetrics/notification/domain/Frequency.java': ['MONTHLY',
                                                                                            'QUARTERLY',
                                                                                            'WEEKLY',
                                                                                            'com.piggymetrics.notification.domain.Frequency.getDays:int()',
                                                                                            'com.piggymetrics.notification.domain.Frequency.values:com.piggymetrics.notification.domain.Frequency[]()',
                                                                                            'com.piggymetrics.notification.domain.Frequency.withDays:com.piggymetrics.notification.domain.Frequency(int)',
                                                                                            'days',
                                                                                            'java.util.stream.Stream.filter:java.util.stream.Stream(java.util.function.Predicate)',
                                                                                            'java.util.stream.Stream.findFirst:java.util.Optional()',
                                                                                            'java.util.stream.Stream.of:java.util.stream.Stream(java.lang.Object[])'],
 'notification-service/src/main/java/com/piggymetrics/notification/domain/NotificationSettings.java': ['active',
                                                                                                       'com.piggymetrics.notification.domain.NotificationSettings.getLastNotified:java.util.Date()',
                                                                                                       'com.piggymetrics.notification.domain.NotificationSettings.setLastNotified:void(java.util.Date)',
                                                                                                       'frequency',
                                                                                                       'lastNotified'],
 'notification-service/src/main/java/com/piggymetrics/notification/domain/NotificationType.java': ['BACKUP',
                                                                                                   'REMIND',
                                                                                                   'attachment',
                                                                                                   'com.piggymetrics.notification.domain.NotificationType.getAttachment:java.lang.String()',
                                                                                                   'com.piggymetrics.notification.domain.NotificationType.getSubject:java.lang.String()',
                                                                                                   'com.piggymetrics.notification.domain.NotificationType.getText:java.lang.String()',
                                                                                                   'subject',
                                                                                                   'text'],
 'notification-service/src/main/java/com/piggymetrics/notification/domain/Recipient.java': ['@Override',
                                                                                            'accountName',
                                                                                            'com.piggymetrics.notification.domain.Recipient.getAccountName:java.lang.String()',
                                                                                            'com.piggymetrics.notification.domain.Recipient.getEmail:java.lang.String()',
                                                                                            'com.piggymetrics.notification.domain.Recipient.getScheduledNotifications:java.util.Map()',
                                                                                            'com.piggymetrics.notification.domain.Recipient.setAccountName:void(java.lang.String)',
                                                                                            'email',
                                                                                            'scheduledNotifications'],
 'notification-service/src/main/java/com/piggymetrics/notification/repository/RecipientRepository.java': ['@Query("{ '
                                                                                                          '$and: '
                                                                                                          '[ '
                                                                                                          "{'scheduledNotifications.BACKUP.active': "
                                                                                                          'true '
                                                                                                          '}, '
                                                                                                          '{ '
                                                                                                          '$where: '
                                                                                                          "'this.scheduledNotifications.BACKUP.lastNotified "
                                                                                                          '< '
                                                                                                          '" '
                                                                                                          '+ '
                                                                                                          '"new '
                                                                                                          'Date(new '
                                                                                                          'Date().setDate(new '
                                                                                                          'Date().getDate() '
                                                                                                          '- '
                                                                                                          'this.scheduledNotifications.BACKUP.frequency '
                                                                                                          "))' "
                                                                                                          '}] '
                                                                                                          '}")',
                                                                                                          '@Query("{ '
                                                                                                          '$and: '
                                                                                                          '[ '
                                                                                                          "{'scheduledNotifications.REMIND.active': "
                                                                                                          'true '
                                                                                                          '}, '
                                                                                                          '{ '
                                                                                                          '$where: '
                                                                                                          "'this.scheduledNotifications.REMIND.lastNotified "
                                                                                                          '< '
                                                                                                          '" '
                                                                                                          '+ '
                                                                                                          '"new '
                                                                                                          'Date(new '
                                                                                                          'Date().setDate(new '
                                                                                                          'Date().getDate() '
                                                                                                          '- '
                                                                                                          'this.scheduledNotifications.REMIND.frequency '
                                                                                                          "))' "
                                                                                                          '}] '
                                                                                                          '}")',
                                                                                                          'com.piggymetrics.notification.repository.RecipientRepository.findByAccountName:com.piggymetrics.notification.domain.Recipient(java.lang.String)',
                                                                                                          'com.piggymetrics.notification.repository.RecipientRepository.findReadyForBackup:java.util.List()',
                                                                                                          'com.piggymetrics.notification.repository.RecipientRepository.findReadyForRemind:java.util.List()'],
 'notification-service/src/main/java/com/piggymetrics/notification/repository/converter/FrequencyReaderConverter.java': ['@Override',
                                                                                                                         'com.piggymetrics.notification.domain.Frequency.withDays:com.piggymetrics.notification.domain.Frequency(int)',
                                                                                                                         'com.piggymetrics.notification.repository.converter.FrequencyReaderConverter.<init>:void()'],
 'notification-service/src/main/java/com/piggymetrics/notification/repository/converter/FrequencyWriterConverter.java': ['@Override',
                                                                                                                         'com.piggymetrics.notification.domain.Frequency.getDays:int()',
                                                                                                                         'com.piggymetrics.notification.repository.converter.FrequencyWriterConverter.<init>:void()'],
 'notification-service/src/main/java/com/piggymetrics/notification/service/EmailServiceImpl.java': ['@Override',
                                                                                                    'com.piggymetrics.notification.domain.NotificationType.getAttachment:java.lang.String()',
                                                                                                    'com.piggymetrics.notification.domain.NotificationType.getSubject:java.lang.String()',
                                                                                                    'com.piggymetrics.notification.domain.NotificationType.getText:java.lang.String()',
                                                                                                    'com.piggymetrics.notification.domain.Recipient.getAccountName:java.lang.String()',
                                                                                                    'com.piggymetrics.notification.domain.Recipient.getEmail:java.lang.String()',
                                                                                                    'com.piggymetrics.notification.service.EmailServiceImpl.getClass:java.lang.Class()',
                                                                                                    'env',
                                                                                                    'java.lang.String.getBytes:byte[]()',
                                                                                                    'java.text.MessageFormat.format:java.lang.String(java.lang.String,java.lang.Object[])',
                                                                                                    'log',
                                                                                                    'mailSender',
                                                                                                    'org.slf4j.Logger.info:void(java.lang.String,java.lang.Object,java.lang.Object)',
                                                                                                    'org.springframework.core.env.Environment.getProperty:java.lang.String(java.lang.String)',
                                                                                                    'org.springframework.core.io.ByteArrayResource',
                                                                                                    'org.springframework.core.io.ByteArrayResource.<init>:void(byte[])',
                                                                                                    'org.springframework.mail.javamail.JavaMailSender.createMimeMessage:javax.mail.internet.MimeMessage()',
                                                                                                    'org.springframework.mail.javamail.JavaMailSender.send:void(javax.mail.internet.MimeMessage)',
                                                                                                    'org.springframework.mail.javamail.MimeMessageHelper',
                                                                                                    'org.springframework.mail.javamail.MimeMessageHelper.<init>:void(javax.mail.internet.MimeMessage,boolean)',
                                                                                                    'org.springframework.mail.javamail.MimeMessageHelper.addAttachment:void(java.lang.String,org.springframework.core.io.InputStreamSource)',
                                                                                                    'org.springframework.mail.javamail.MimeMessageHelper.setSubject:void(java.lang.String)',
                                                                                                    'org.springframework.mail.javamail.MimeMessageHelper.setText:void(java.lang.String)',
                                                                                                    'org.springframework.mail.javamail.MimeMessageHelper.setTo:void(java.lang.String)',
                                                                                                    'org.springframework.util.StringUtils.hasLength:boolean(java.lang.String)'],
 'notification-service/src/main/java/com/piggymetrics/notification/service/NotificationServiceImpl.java': ['<operator>.fieldAccess',
                                                                                                           '@Override',
                                                                                                           '@Scheduled(cron '
                                                                                                           '= '
                                                                                                           '"${backup.cron}")',
                                                                                                           '@Scheduled(cron '
                                                                                                           '= '
                                                                                                           '"${remind.cron}")',
                                                                                                           'client',
                                                                                                           'com.piggymetrics.notification.client.AccountServiceClient.getAccount:java.lang.String(java.lang.String)',
                                                                                                           'com.piggymetrics.notification.service.EmailService.send:<unresolvedSignature>(3)',
                                                                                                           'com.piggymetrics.notification.service.NotificationServiceImpl.getClass:java.lang.Class()',
                                                                                                           'com.piggymetrics.notification.service.RecipientService.findReadyToNotify:java.util.List(com.piggymetrics.notification.domain.NotificationType)',
                                                                                                           'com.piggymetrics.notification.service.RecipientService.markNotified:<unresolvedSignature>(2)',
                                                                                                           'emailService',
                                                                                                           'java.lang.Object.getAccountName:<unresolvedSignature>(0)',
                                                                                                           'java.util.List.forEach:void(java.util.function.Consumer)',
                                                                                                           'java.util.List.size:int()',
                                                                                                           'java.util.concurrent.CompletableFuture.runAsync:java.util.concurrent.CompletableFuture(java.lang.Runnable)',
                                                                                                           'log',
                                                                                                           'org.slf4j.Logger.error:<unresolvedSignature>(3)',
                                                                                                           'recipientService'],
 'notification-service/src/main/java/com/piggymetrics/notification/service/RecipientService.java': ['com.piggymetrics.notification.service.RecipientService.findByAccountName:com.piggymetrics.notification.domain.Recipient(java.lang.String)',
                                                                                                    'com.piggymetrics.notification.service.RecipientService.findReadyToNotify:java.util.List(com.piggymetrics.notification.domain.NotificationType)',
                                                                                                    'com.piggymetrics.notification.service.RecipientService.save:com.piggymetrics.notification.domain.Recipient(java.lang.String,com.piggymetrics.notification.domain.Recipient)'],
 'notification-service/src/main/java/com/piggymetrics/notification/service/RecipientServiceImpl.java': ['@Override',
                                                                                                        'com.piggymetrics.notification.domain.NotificationSettings.getLastNotified:java.util.Date()',
                                                                                                        'com.piggymetrics.notification.domain.Recipient.getScheduledNotifications:java.util.Map()',
                                                                                                        'com.piggymetrics.notification.domain.Recipient.setAccountName:void(java.lang.String)',
                                                                                                        'com.piggymetrics.notification.repository.RecipientRepository.findByAccountName:com.piggymetrics.notification.domain.Recipient(java.lang.String)',
                                                                                                        'com.piggymetrics.notification.repository.RecipientRepository.save:java.lang.Object(java.lang.Object)',
                                                                                                        'com.piggymetrics.notification.service.RecipientServiceImpl.findByAccountName:com.piggymetrics.notification.domain.Recipient(java.lang.String)',
                                                                                                        'com.piggymetrics.notification.service.RecipientServiceImpl.findReadyToNotify:java.util.List(com.piggymetrics.notification.domain.NotificationType)',
                                                                                                        'com.piggymetrics.notification.service.RecipientServiceImpl.getClass:java.lang.Class()',
                                                                                                        'com.piggymetrics.notification.service.RecipientServiceImpl.save:com.piggymetrics.notification.domain.Recipient(java.lang.String,com.piggymetrics.notification.domain.Recipient)',
                                                                                                        'java.lang.IllegalArgumentException.<init>:void()',
                                                                                                        'java.util.Collection.forEach:void(java.util.function.Consumer)',
                                                                                                        'java.util.Date',
                                                                                                        'java.util.Map.get:java.lang.Object(java.lang.Object)',
                                                                                                        'java.util.Map.values:java.util.Collection()',
                                                                                                        'log',
                                                                                                        'org.slf4j.Logger.info:void(java.lang.String,java.lang.Object)',
                                                                                                        'org.springframework.util.Assert.hasLength:void(java.lang.String)',
                                                                                                        'repository'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/StatisticsApplication.java': ['@Bean'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/client/ExchangeRatesClient.java': ['@RequestMapping(method '
                                                                                                  '= '
                                                                                                  'RequestMethod.GET, '
                                                                                                  'value '
                                                                                                  '= '
                                                                                                  '"/latest")',
                                                                                                  'com.piggymetrics.statistics.client.ExchangeRatesClient.getRates:com.piggymetrics.statistics.domain.ExchangeRatesContainer(com.piggymetrics.statistics.domain.Currency)'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/client/ExchangeRatesClientFallback.java': ['@Override',
                                                                                                          'com.piggymetrics.statistics.client.ExchangeRatesClientFallback.getRates:com.piggymetrics.statistics.domain.ExchangeRatesContainer(com.piggymetrics.statistics.domain.Currency)',
                                                                                                          'com.piggymetrics.statistics.domain.ExchangeRatesContainer',
                                                                                                          'com.piggymetrics.statistics.domain.ExchangeRatesContainer.<init>:void()',
                                                                                                          'com.piggymetrics.statistics.domain.ExchangeRatesContainer.setBase:void(com.piggymetrics.statistics.domain.Currency)',
                                                                                                          'com.piggymetrics.statistics.domain.ExchangeRatesContainer.setRates:void(java.util.Map)',
                                                                                                          'java.util.Collections.emptyMap:java.util.Map()'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/config/ResourceServerConfig.java': ['@Bean',
                                                                                                   'sso'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': ['@PreAuthorize("#oauth2.hasScope(\'server\') '
                                                                                                       'or '
                                                                                                       '#accountName.equals(\'demo\')")',
                                                                                                       '@PreAuthorize("#oauth2.hasScope(\'server\')")',
                                                                                                       '@RequestMapping(value '
                                                                                                       '= '
                                                                                                       '"/current", '
                                                                                                       'method '
                                                                                                       '= '
                                                                                                       'RequestMethod.GET)',
                                                                                                       '@RequestMapping(value '
                                                                                                       '= '
                                                                                                       '"/{accountName}", '
                                                                                                       'method '
                                                                                                       '= '
                                                                                                       'RequestMethod.GET)',
                                                                                                       '@RequestMapping(value '
                                                                                                       '= '
                                                                                                       '"/{accountName}", '
                                                                                                       'method '
                                                                                                       '= '
                                                                                                       'RequestMethod.PUT)',
                                                                                                       'com.piggymetrics.statistics.service.StatisticsService.findByAccountName:java.util.List(java.lang.String)',
                                                                                                       'com.piggymetrics.statistics.service.StatisticsService.save:com.piggymetrics.statistics.domain.timeseries.DataPoint(java.lang.String,com.piggymetrics.statistics.domain.Account)',
                                                                                                       'java.security.Principal.getName:java.lang.String()',
                                                                                                       'statisticsService'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/domain/Account.java': ['com.piggymetrics.statistics.domain.Account.getExpenses:java.util.List()',
                                                                                      'com.piggymetrics.statistics.domain.Account.getIncomes:java.util.List()',
                                                                                      'com.piggymetrics.statistics.domain.Account.getSaving:com.piggymetrics.statistics.domain.Saving()',
                                                                                      'expenses',
                                                                                      'incomes',
                                                                                      'saving'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/domain/Currency.java': ['EUR',
                                                                                       'RUB',
                                                                                       'USD',
                                                                                       'com.piggymetrics.statistics.domain.Currency.getBase:com.piggymetrics.statistics.domain.Currency()'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/domain/ExchangeRatesContainer.java': ['@Override',
                                                                                                     'base',
                                                                                                     'com.piggymetrics.statistics.domain.ExchangeRatesContainer.<init>:void()',
                                                                                                     'com.piggymetrics.statistics.domain.ExchangeRatesContainer.getDate:java.time.LocalDate()',
                                                                                                     'com.piggymetrics.statistics.domain.ExchangeRatesContainer.getRates:java.util.Map()',
                                                                                                     'com.piggymetrics.statistics.domain.ExchangeRatesContainer.setBase:void(com.piggymetrics.statistics.domain.Currency)',
                                                                                                     'com.piggymetrics.statistics.domain.ExchangeRatesContainer.setRates:void(java.util.Map)',
                                                                                                     'date',
                                                                                                     'java.time.LocalDate.now:java.time.LocalDate()',
                                                                                                     'rates'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/domain/Item.java': ['amount',
                                                                                   'com.piggymetrics.statistics.domain.Item.getAmount:java.math.BigDecimal()',
                                                                                   'com.piggymetrics.statistics.domain.Item.getCurrency:com.piggymetrics.statistics.domain.Currency()',
                                                                                   'com.piggymetrics.statistics.domain.Item.getPeriod:com.piggymetrics.statistics.domain.TimePeriod()',
                                                                                   'com.piggymetrics.statistics.domain.Item.getTitle:java.lang.String()',
                                                                                   'currency',
                                                                                   'period',
                                                                                   'title'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/domain/Saving.java': ['amount',
                                                                                     'capitalization',
                                                                                     'com.piggymetrics.statistics.domain.Saving.getAmount:java.math.BigDecimal()',
                                                                                     'com.piggymetrics.statistics.domain.Saving.getCurrency:com.piggymetrics.statistics.domain.Currency()',
                                                                                     'currency',
                                                                                     'deposit',
                                                                                     'interest'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/domain/TimePeriod.java': ['DAY',
                                                                                         'HOUR',
                                                                                         'MONTH',
                                                                                         'QUARTER',
                                                                                         'YEAR',
                                                                                         'baseRatio',
                                                                                         'com.piggymetrics.statistics.domain.TimePeriod.getBaseRatio:java.math.BigDecimal()',
                                                                                         'java.math.BigDecimal.<init>:void(double)'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/domain/timeseries/DataPoint.java': ['com.piggymetrics.statistics.domain.timeseries.DataPoint.<init>:void()',
                                                                                                   'com.piggymetrics.statistics.domain.timeseries.DataPoint.setExpenses:void(java.util.Set)',
                                                                                                   'com.piggymetrics.statistics.domain.timeseries.DataPoint.setId:void(com.piggymetrics.statistics.domain.timeseries.DataPointId)',
                                                                                                   'com.piggymetrics.statistics.domain.timeseries.DataPoint.setIncomes:void(java.util.Set)',
                                                                                                   'com.piggymetrics.statistics.domain.timeseries.DataPoint.setRates:void(java.util.Map)',
                                                                                                   'com.piggymetrics.statistics.domain.timeseries.DataPoint.setStatistics:void(java.util.Map)',
                                                                                                   'expenses',
                                                                                                   'id',
                                                                                                   'incomes',
                                                                                                   'rates',
                                                                                                   'statistics'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/domain/timeseries/DataPointId.java': ['@Override',
                                                                                                     'account',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPointId.<init>:void(java.lang.String,java.util.Date)',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPointId.getAccount:java.lang.String()',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPointId.getDate:java.util.Date()',
                                                                                                     'date',
                                                                                                     'serialVersionUID'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/domain/timeseries/ItemMetric.java': ['<operator>.notEquals',
                                                                                                    '@Override',
                                                                                                    'amount',
                                                                                                    'com.piggymetrics.statistics.domain.timeseries.ItemMetric.<init>:void(java.lang.String,java.math.BigDecimal)',
                                                                                                    'com.piggymetrics.statistics.domain.timeseries.ItemMetric.getClass:java.lang.Class()',
                                                                                                    'java.lang.Object.getClass:java.lang.Class()',
                                                                                                    'java.lang.String.equalsIgnoreCase:boolean(java.lang.String)',
                                                                                                    'java.lang.String.hashCode:int()',
                                                                                                    'title'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/domain/timeseries/StatisticMetric.java': ['EXPENSES_AMOUNT',
                                                                                                         'INCOMES_AMOUNT',
                                                                                                         'SAVING_AMOUNT'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/repository/DataPointRepository.java': ['com.piggymetrics.statistics.repository.DataPointRepository.findByIdAccount:java.util.List(java.lang.String)'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/repository/converter/DataPointIdReaderConverter.java': ['<operator>.cast',
                                                                                                                       '@Override',
                                                                                                                       'com.mongodb.DBObject.get:java.lang.Object(java.lang.String)',
                                                                                                                       'com.piggymetrics.statistics.domain.timeseries.DataPointId.<init>:void(java.lang.String,java.util.Date)',
                                                                                                                       'com.piggymetrics.statistics.repository.converter.DataPointIdReaderConverter.<init>:void()'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/repository/converter/DataPointIdWriterConverter.java': ['@Override',
                                                                                                                       'FIELDS',
                                                                                                                       'com.mongodb.BasicDBObject',
                                                                                                                       'com.mongodb.BasicDBObject.<init>:void(int)',
                                                                                                                       'com.mongodb.DBObject.put:java.lang.Object(java.lang.String,java.lang.Object)',
                                                                                                                       'com.piggymetrics.statistics.domain.timeseries.DataPointId.getAccount:java.lang.String()',
                                                                                                                       'com.piggymetrics.statistics.domain.timeseries.DataPointId.getDate:java.util.Date()',
                                                                                                                       'com.piggymetrics.statistics.repository.converter.DataPointIdWriterConverter.<init>:void()'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/service/ExchangeRatesService.java': ['com.piggymetrics.statistics.service.ExchangeRatesService.convert:java.math.BigDecimal(com.piggymetrics.statistics.domain.Currency,com.piggymetrics.statistics.domain.Currency,java.math.BigDecimal)',
                                                                                                    'com.piggymetrics.statistics.service.ExchangeRatesService.getCurrentRates:java.util.Map()'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/service/ExchangeRatesServiceImpl.java': ['@Override',
                                                                                                        'client',
                                                                                                        'com.google.common.collect.ImmutableMap.of:com.google.common.collect.ImmutableMap(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)',
                                                                                                        'com.piggymetrics.statistics.domain.Currency.name:java.lang.String()',
                                                                                                        'com.piggymetrics.statistics.service.ExchangeRatesServiceImpl.convert:java.math.BigDecimal(com.piggymetrics.statistics.domain.Currency,com.piggymetrics.statistics.domain.Currency,java.math.BigDecimal)',
                                                                                                        'com.piggymetrics.statistics.service.ExchangeRatesServiceImpl.getCurrentRates:java.util.Map()',
                                                                                                        'container',
                                                                                                        'java.math.BigDecimal.divide:java.math.BigDecimal(java.math.BigDecimal,int,java.math.RoundingMode)',
                                                                                                        'java.math.BigDecimal.multiply:java.math.BigDecimal(java.math.BigDecimal)',
                                                                                                        'java.time.LocalDate.equals:boolean(java.lang.Object)',
                                                                                                        'java.util.Map.get:java.lang.Object(java.lang.Object)',
                                                                                                        'log',
                                                                                                        'org.springframework.util.Assert.notNull:void(java.lang.Object)'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/service/StatisticsService.java': ['com.piggymetrics.statistics.service.StatisticsService.findByAccountName:java.util.List(java.lang.String)',
                                                                                                 'com.piggymetrics.statistics.service.StatisticsService.save:com.piggymetrics.statistics.domain.timeseries.DataPoint(java.lang.String,com.piggymetrics.statistics.domain.Account)'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/service/StatisticsServiceImpl.java': ['@Override',
                                                                                                     'com.google.common.collect.ImmutableMap.of:com.google.common.collect.ImmutableMap(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)',
                                                                                                     'com.piggymetrics.statistics.domain.Account.getExpenses:java.util.List()',
                                                                                                     'com.piggymetrics.statistics.domain.Account.getIncomes:java.util.List()',
                                                                                                     'com.piggymetrics.statistics.domain.Account.getSaving:com.piggymetrics.statistics.domain.Saving()',
                                                                                                     'com.piggymetrics.statistics.domain.Item.getAmount:java.math.BigDecimal()',
                                                                                                     'com.piggymetrics.statistics.domain.Item.getCurrency:com.piggymetrics.statistics.domain.Currency()',
                                                                                                     'com.piggymetrics.statistics.domain.Item.getPeriod:com.piggymetrics.statistics.domain.TimePeriod()',
                                                                                                     'com.piggymetrics.statistics.domain.Item.getTitle:java.lang.String()',
                                                                                                     'com.piggymetrics.statistics.domain.Saving.getAmount:java.math.BigDecimal()',
                                                                                                     'com.piggymetrics.statistics.domain.Saving.getCurrency:com.piggymetrics.statistics.domain.Currency()',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPoint',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPoint.<init>:void()',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPoint.setExpenses:void(java.util.Set)',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPoint.setId:void(com.piggymetrics.statistics.domain.timeseries.DataPointId)',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPoint.setIncomes:void(java.util.Set)',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPoint.setRates:void(java.util.Map)',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPoint.setStatistics:void(java.util.Map)',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPointId',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.DataPointId.<init>:void(java.lang.String,java.util.Date)',
                                                                                                     'com.piggymetrics.statistics.domain.timeseries.ItemMetric.<init>:void(java.lang.String,java.math.BigDecimal)',
                                                                                                     'com.piggymetrics.statistics.repository.DataPointRepository.findByIdAccount:java.util.List(java.lang.String)',
                                                                                                     'com.piggymetrics.statistics.repository.DataPointRepository.save:java.lang.Object(java.lang.Object)',
                                                                                                     'com.piggymetrics.statistics.service.ExchangeRatesService.convert:java.math.BigDecimal(com.piggymetrics.statistics.domain.Currency,com.piggymetrics.statistics.domain.Currency,java.math.BigDecimal)',
                                                                                                     'com.piggymetrics.statistics.service.StatisticsServiceImpl.createStatisticMetrics:java.util.Map(java.util.Set,java.util.Set,com.piggymetrics.statistics.domain.Saving)',
                                                                                                     'com.piggymetrics.statistics.service.StatisticsServiceImpl.findByAccountName:java.util.List(java.lang.String)',
                                                                                                     'com.piggymetrics.statistics.service.StatisticsServiceImpl.getClass:java.lang.Class()',
                                                                                                     'com.piggymetrics.statistics.service.StatisticsServiceImpl.save:com.piggymetrics.statistics.domain.timeseries.DataPoint(java.lang.String,com.piggymetrics.statistics.domain.Account)',
                                                                                                     'java.math.BigDecimal.divide:java.math.BigDecimal(java.math.BigDecimal,int,java.math.RoundingMode)',
                                                                                                     'java.time.LocalDate.atStartOfDay:java.time.LocalDateTime()',
                                                                                                     'java.time.LocalDateTime.atZone:java.time.ZonedDateTime(java.time.ZoneId)',
                                                                                                     'java.time.ZoneId.systemDefault:java.time.ZoneId()',
                                                                                                     'java.time.ZonedDateTime.toInstant:java.time.Instant()',
                                                                                                     'java.util.Date.from:java.util.Date(java.time.Instant)',
                                                                                                     'java.util.List.stream:java.util.stream.Stream()',
                                                                                                     'java.util.Set.stream:java.util.stream.Stream()',
                                                                                                     'java.util.stream.Collectors.toSet:java.util.stream.Collector()',
                                                                                                     'java.util.stream.Stream.collect:java.lang.Object(java.util.stream.Collector)',
                                                                                                     'java.util.stream.Stream.map:java.util.stream.Stream(java.util.function.Function)',
                                                                                                     'java.util.stream.Stream.reduce:java.lang.Object(java.lang.Object,java.util.function.BinaryOperator)',
                                                                                                     'log',
                                                                                                     'org.slf4j.Logger.debug:void(java.lang.String,java.lang.Object)',
                                                                                                     'org.springframework.util.Assert.hasLength:void(java.lang.String)',
                                                                                                     'ratesService',
                                                                                                     'repository'],
 'statistics-service/src/main/java/com/piggymetrics/statistics/service/security/CustomUserInfoTokenServices.java': ['<operator>.cast',
                                                                                                                    '<operator>.indexAccess',
                                                                                                                    '@Override',
                                                                                                                    '@SuppressWarnings({ '
                                                                                                                    '"unchecked" '
                                                                                                                    '})',
                                                                                                                    'PRINCIPAL_KEYS',
                                                                                                                    'authoritiesExtractor',
                                                                                                                    'clientId',
                                                                                                                    'com.piggymetrics.statistics.service.security.CustomUserInfoTokenServices.<init>:void(java.lang.String,java.lang.String)',
                                                                                                                    'com.piggymetrics.statistics.service.security.CustomUserInfoTokenServices.extractAuthentication:org.springframework.security.oauth2.provider.OAuth2Authentication(java.util.Map)',
                                                                                                                    'com.piggymetrics.statistics.service.security.CustomUserInfoTokenServices.getClass:java.lang.Class()',
                                                                                                                    'com.piggymetrics.statistics.service.security.CustomUserInfoTokenServices.getMap:java.util.Map(java.lang.String,java.lang.String)',
                                                                                                                    'com.piggymetrics.statistics.service.security.CustomUserInfoTokenServices.getPrincipal:java.lang.Object(java.util.Map)',
                                                                                                                    'com.piggymetrics.statistics.service.security.CustomUserInfoTokenServices.getRequest:org.springframework.security.oauth2.provider.OAuth2Request(java.util.Map)',
                                                                                                                    'java.lang.String.equals:boolean(java.lang.Object)',
                                                                                                                    'java.util.HashSet.<init>:void(java.util.Collection)',
                                                                                                                    'java.util.LinkedHashSet.<init>:void(java.util.Collection)',
                                                                                                                    'java.util.Map.containsKey:boolean(java.lang.Object)',
                                                                                                                    'java.util.Map.get:java.lang.Object(java.lang.Object)',
                                                                                                                    'logger',
                                                                                                                    'org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor.extractAuthorities:java.util.List(java.util.Map)',
                                                                                                                    'org.springframework.security.authentication.UsernamePasswordAuthenticationToken',
                                                                                                                    'org.springframework.security.authentication.UsernamePasswordAuthenticationToken.<init>:void(java.lang.Object,java.lang.Object,java.util.Collection)',
                                                                                                                    'org.springframework.security.authentication.UsernamePasswordAuthenticationToken.setDetails:void(java.lang.Object)',
                                                                                                                    'org.springframework.security.oauth2.client.OAuth2ClientContext.getAccessToken:org.springframework.security.oauth2.common.OAuth2AccessToken()',
                                                                                                                    'org.springframework.security.oauth2.client.OAuth2ClientContext.setAccessToken:void(org.springframework.security.oauth2.common.OAuth2AccessToken)',
                                                                                                                    'org.springframework.security.oauth2.client.OAuth2RestOperations.getForEntity:org.springframework.http.ResponseEntity(java.lang.String,java.lang.Class,java.lang.Object[])',
                                                                                                                    'org.springframework.security.oauth2.client.OAuth2RestOperations.getOAuth2ClientContext:org.springframework.security.oauth2.client.OAuth2ClientContext()',
                                                                                                                    'org.springframework.security.oauth2.client.OAuth2RestTemplate',
                                                                                                                    'org.springframework.security.oauth2.client.OAuth2RestTemplate.<init>:void(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)',
                                                                                                                    'org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails',
                                                                                                                    'org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails.<init>:void()',
                                                                                                                    'org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails.setClientId:void(java.lang.String)',
                                                                                                                    'org.springframework.security.oauth2.common.DefaultOAuth2AccessToken',
                                                                                                                    'org.springframework.security.oauth2.common.DefaultOAuth2AccessToken.<init>:void(java.lang.String)',
                                                                                                                    'org.springframework.security.oauth2.common.DefaultOAuth2AccessToken.setTokenType:void(java.lang.String)',
                                                                                                                    'org.springframework.security.oauth2.common.OAuth2AccessToken.getValue:java.lang.String()',
                                                                                                                    'org.springframework.security.oauth2.common.exceptions.InvalidTokenException.<init>:void(java.lang.String)',
                                                                                                                    'org.springframework.security.oauth2.provider.OAuth2Authentication.<init>:void(org.springframework.security.oauth2.provider.OAuth2Request,org.springframework.security.core.Authentication)',
                                                                                                                    'org.springframework.security.oauth2.provider.OAuth2Request',
                                                                                                                    'restTemplate',
                                                                                                                    'tokenType',
                                                                                                                    'userInfoEndpointUrl']
                       }
    methods = java_usages_1.methods_to_endpoints(methods)
    assert methods == {
        'file_names': {'account-service/src/main/java/com/piggymetrics/account/client/AuthServiceClient.java': {'resolved_methods': {'@RequestMapping(method = RequestMethod.POST, value = "/uaa/users", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)': {'endpoints': ['/uaa/users']}}},
                'account-service/src/main/java/com/piggymetrics/account/client/StatisticsServiceClient.java': {'resolved_methods': {'@RequestMapping(method = RequestMethod.PUT, value = "/statistics/{accountName}", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)': {'endpoints': ['/statistics/{accountName}']}}},
                'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': {'resolved_methods': {'@RequestMapping(path = "/", method = RequestMethod.POST)': {'endpoints': ['/']},
                                                                                                                                  '@RequestMapping(path = "/current", method = RequestMethod.GET)': {'endpoints': ['/current']},
                                                                                                                                  '@RequestMapping(path = "/current", method = RequestMethod.PUT)': {'endpoints': ['/current']},
                                                                                                                                  '@RequestMapping(path = "/{name}", method = RequestMethod.GET)': {'endpoints': ['/{name}']}}},
                'auth-service/src/main/java/com/piggymetrics/auth/controller/UserController.java': {'resolved_methods': {'@RequestMapping(value = "/current", method = RequestMethod.GET)': {'endpoints': ['/current']}}},
                'notification-service/src/main/java/com/piggymetrics/notification/client/AccountServiceClient.java': {'resolved_methods': {'@RequestMapping(method = RequestMethod.GET, value = "/accounts/{accountName}", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)': {'endpoints': ['/accounts/{accountName}']}}},
                'notification-service/src/main/java/com/piggymetrics/notification/controller/RecipientController.java': {'resolved_methods': {'@RequestMapping(path = "/current", method = RequestMethod.GET)': {'endpoints': ['/current']},
                                                                                                                                              '@RequestMapping(path = "/current", method = RequestMethod.PUT)': {'endpoints': ['/current']}}},
                'statistics-service/src/main/java/com/piggymetrics/statistics/client/ExchangeRatesClient.java': {'resolved_methods': {'@RequestMapping(method = RequestMethod.GET, value = "/latest")': {'endpoints': ['/latest']}}},
                'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': {'resolved_methods': {'@RequestMapping(value = "/current", method = RequestMethod.GET)': {'endpoints': ['/current']},
                                                                                                                                           '@RequestMapping(value = "/{accountName}", method = RequestMethod.GET)': {'endpoints': ['/{accountName}']},
                                                                                                                                           '@RequestMapping(value = "/{accountName}", method = RequestMethod.PUT)': {'endpoints': ['/{accountName}']}}}}}

    java_usages_1.target_line_nums = java_usages_1._identify_target_line_nums(methods)
    file_endpoint_map = java_usages_1.create_file_to_method_dict(methods)
    java_usages_1.file_endpoint_map = sort_openapi_result(file_endpoint_map)
    assert java_usages_1.file_endpoint_map == {'/': ['account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java'],
 '/accounts/{accountName}': ['notification-service/src/main/java/com/piggymetrics/notification/client/AccountServiceClient.java'],
 '/current': ['account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java',
              'auth-service/src/main/java/com/piggymetrics/auth/controller/UserController.java',
              'notification-service/src/main/java/com/piggymetrics/notification/controller/RecipientController.java',
              'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java'],
 '/latest': ['statistics-service/src/main/java/com/piggymetrics/statistics/client/ExchangeRatesClient.java'],
 '/statistics/{accountName}': ['account-service/src/main/java/com/piggymetrics/account/client/StatisticsServiceClient.java'],
 '/uaa/users': ['account-service/src/main/java/com/piggymetrics/account/client/AuthServiceClient.java'],
 '/{accountName}': ['statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java'],
 '/{name}': ['account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java']}

    methods = java_usages_1._process_calls(methods)
    assert methods == {
        'file_names': {'account-service/src/main/java/com/piggymetrics/account/client/AuthServiceClient.java': {'resolved_methods': {'@RequestMapping(method = RequestMethod.POST, value = "/uaa/users", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                                                                                  'columnNumber': 2,
                                                                                                                                                                                                                                                                  'isExternal': False,
                                                                                                                                                                                                                                                                  'lineNumber': 12,
                                                                                                                                                                                                                                                                  'paramTypes': [],
                                                                                                                                                                                                                                                                  'resolvedMethod': '@RequestMapping(method '
                                                                                                                                                                                                                                                                                    '= '
                                                                                                                                                                                                                                                                                    'RequestMethod.POST, '
                                                                                                                                                                                                                                                                                    'value '
                                                                                                                                                                                                                                                                                    '= '
                                                                                                                                                                                                                                                                                    '"/uaa/users", '
                                                                                                                                                                                                                                                                                    'consumes '
                                                                                                                                                                                                                                                                                    '= '
                                                                                                                                                                                                                                                                                    'MediaType.APPLICATION_JSON_UTF8_VALUE)',
                                                                                                                                                                                                                                                                  'returnType': ''}],
                                                                                                                                                                                                                                                       'endpoints': ['/uaa/users'],
                                                                                                                                                                                                                                                       'line_nos': [12]}}},
                'account-service/src/main/java/com/piggymetrics/account/client/StatisticsServiceClient.java': {'resolved_methods': {'@RequestMapping(method = RequestMethod.PUT, value = "/statistics/{accountName}", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                                                                                                      'columnNumber': 2,
                                                                                                                                                                                                                                                                                      'isExternal': False,
                                                                                                                                                                                                                                                                                      'lineNumber': 13,
                                                                                                                                                                                                                                                                                      'paramTypes': [],
                                                                                                                                                                                                                                                                                      'resolvedMethod': '@RequestMapping(method '
                                                                                                                                                                                                                                                                                                        '= '
                                                                                                                                                                                                                                                                                                        'RequestMethod.PUT, '
                                                                                                                                                                                                                                                                                                        'value '
                                                                                                                                                                                                                                                                                                        '= '
                                                                                                                                                                                                                                                                                                        '"/statistics/{accountName}", '
                                                                                                                                                                                                                                                                                                        'consumes '
                                                                                                                                                                                                                                                                                                        '= '
                                                                                                                                                                                                                                                                                                        'MediaType.APPLICATION_JSON_UTF8_VALUE)',
                                                                                                                                                                                                                                                                                      'returnType': ''}],
                                                                                                                                                                                                                                                                           'endpoints': ['/statistics/{accountName}'],
                                                                                                                                                                                                                                                                           'line_nos': [13]}}},
                'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': {'resolved_methods': {'@RequestMapping(path = "/", method = RequestMethod.POST)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                          'columnNumber': 2,
                                                                                                                                                                                                          'isExternal': False,
                                                                                                                                                                                                          'lineNumber': 35,
                                                                                                                                                                                                          'paramTypes': [],
                                                                                                                                                                                                          'resolvedMethod': '@RequestMapping(path '
                                                                                                                                                                                                                            '= '
                                                                                                                                                                                                                            '"/", '
                                                                                                                                                                                                                            'method '
                                                                                                                                                                                                                            '= '
                                                                                                                                                                                                                            'RequestMethod.POST)',
                                                                                                                                                                                                          'returnType': ''}],
                                                                                                                                                                                               'endpoints': ['/'],
                                                                                                                                                                                               'line_nos': [35]},
                                                                                                                                  '@RequestMapping(path = "/current", method = RequestMethod.GET)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                                'columnNumber': 2,
                                                                                                                                                                                                                'isExternal': False,
                                                                                                                                                                                                                'lineNumber': 25,
                                                                                                                                                                                                                'paramTypes': [],
                                                                                                                                                                                                                'resolvedMethod': '@RequestMapping(path '
                                                                                                                                                                                                                                  '= '
                                                                                                                                                                                                                                  '"/current", '
                                                                                                                                                                                                                                  'method '
                                                                                                                                                                                                                                  '= '
                                                                                                                                                                                                                                  'RequestMethod.GET)',
                                                                                                                                                                                                                'returnType': ''}],
                                                                                                                                                                                                     'endpoints': ['/current'],
                                                                                                                                                                                                     'line_nos': [25]},
                                                                                                                                  '@RequestMapping(path = "/current", method = RequestMethod.PUT)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                                'columnNumber': 2,
                                                                                                                                                                                                                'isExternal': False,
                                                                                                                                                                                                                'lineNumber': 30,
                                                                                                                                                                                                                'paramTypes': [],
                                                                                                                                                                                                                'resolvedMethod': '@RequestMapping(path '
                                                                                                                                                                                                                                  '= '
                                                                                                                                                                                                                                  '"/current", '
                                                                                                                                                                                                                                  'method '
                                                                                                                                                                                                                                  '= '
                                                                                                                                                                                                                                  'RequestMethod.PUT)',
                                                                                                                                                                                                                'returnType': ''}],
                                                                                                                                                                                                     'endpoints': ['/current'],
                                                                                                                                                                                                     'line_nos': [30]},
                                                                                                                                  '@RequestMapping(path = "/{name}", method = RequestMethod.GET)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                               'columnNumber': 2,
                                                                                                                                                                                                               'isExternal': False,
                                                                                                                                                                                                               'lineNumber': 20,
                                                                                                                                                                                                               'paramTypes': [],
                                                                                                                                                                                                               'resolvedMethod': '@RequestMapping(path '
                                                                                                                                                                                                                                 '= '
                                                                                                                                                                                                                                 '"/{name}", '
                                                                                                                                                                                                                                 'method '
                                                                                                                                                                                                                                 '= '
                                                                                                                                                                                                                                 'RequestMethod.GET)',
                                                                                                                                                                                                               'returnType': ''}],
                                                                                                                                                                                                    'endpoints': ['/{name}'],
                                                                                                                                                                                                    'line_nos': [20]}}},
                'auth-service/src/main/java/com/piggymetrics/auth/controller/UserController.java': {'resolved_methods': {'@RequestMapping(value = "/current", method = RequestMethod.GET)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                        'columnNumber': 2,
                                                                                                                                                                                                        'isExternal': False,
                                                                                                                                                                                                        'lineNumber': 22,
                                                                                                                                                                                                        'paramTypes': [],
                                                                                                                                                                                                        'resolvedMethod': '@RequestMapping(value '
                                                                                                                                                                                                                          '= '
                                                                                                                                                                                                                          '"/current", '
                                                                                                                                                                                                                          'method '
                                                                                                                                                                                                                          '= '
                                                                                                                                                                                                                          'RequestMethod.GET)',
                                                                                                                                                                                                        'returnType': ''}],
                                                                                                                                                                                             'endpoints': ['/current'],
                                                                                                                                                                                             'line_nos': [22]}}},
                'notification-service/src/main/java/com/piggymetrics/notification/client/AccountServiceClient.java': {'resolved_methods': {'@RequestMapping(method = RequestMethod.GET, value = "/accounts/{accountName}", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                                                                                                           'columnNumber': 2,
                                                                                                                                                                                                                                                                                           'isExternal': False,
                                                                                                                                                                                                                                                                                           'lineNumber': 12,
                                                                                                                                                                                                                                                                                           'paramTypes': [],
                                                                                                                                                                                                                                                                                           'resolvedMethod': '@RequestMapping(method '
                                                                                                                                                                                                                                                                                                             '= '
                                                                                                                                                                                                                                                                                                             'RequestMethod.GET, '
                                                                                                                                                                                                                                                                                                             'value '
                                                                                                                                                                                                                                                                                                             '= '
                                                                                                                                                                                                                                                                                                             '"/accounts/{accountName}", '
                                                                                                                                                                                                                                                                                                             'consumes '
                                                                                                                                                                                                                                                                                                             '= '
                                                                                                                                                                                                                                                                                                             'MediaType.APPLICATION_JSON_UTF8_VALUE)',
                                                                                                                                                                                                                                                                                           'returnType': ''}],
                                                                                                                                                                                                                                                                                'endpoints': ['/accounts/{accountName}'],
                                                                                                                                                                                                                                                                                'line_nos': [12]}}},
                'notification-service/src/main/java/com/piggymetrics/notification/controller/RecipientController.java': {'resolved_methods': {'@RequestMapping(path = "/current", method = RequestMethod.GET)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                                            'columnNumber': 2,
                                                                                                                                                                                                                            'isExternal': False,
                                                                                                                                                                                                                            'lineNumber': 21,
                                                                                                                                                                                                                            'paramTypes': [],
                                                                                                                                                                                                                            'resolvedMethod': '@RequestMapping(path '
                                                                                                                                                                                                                                              '= '
                                                                                                                                                                                                                                              '"/current", '
                                                                                                                                                                                                                                              'method '
                                                                                                                                                                                                                                              '= '
                                                                                                                                                                                                                                              'RequestMethod.GET)',
                                                                                                                                                                                                                            'returnType': ''}],
                                                                                                                                                                                                                 'endpoints': ['/current'],
                                                                                                                                                                                                                 'line_nos': [21]},
                                                                                                                                              '@RequestMapping(path = "/current", method = RequestMethod.PUT)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                                            'columnNumber': 2,
                                                                                                                                                                                                                            'isExternal': False,
                                                                                                                                                                                                                            'lineNumber': 26,
                                                                                                                                                                                                                            'paramTypes': [],
                                                                                                                                                                                                                            'resolvedMethod': '@RequestMapping(path '
                                                                                                                                                                                                                                              '= '
                                                                                                                                                                                                                                              '"/current", '
                                                                                                                                                                                                                                              'method '
                                                                                                                                                                                                                                              '= '
                                                                                                                                                                                                                                              'RequestMethod.PUT)',
                                                                                                                                                                                                                            'returnType': ''}],
                                                                                                                                                                                                                 'endpoints': ['/current'],
                                                                                                                                                                                                                 'line_nos': [26]}}},
                'statistics-service/src/main/java/com/piggymetrics/statistics/client/ExchangeRatesClient.java': {'resolved_methods': {'@RequestMapping(method = RequestMethod.GET, value = "/latest")': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                                    'columnNumber': 5,
                                                                                                                                                                                                                    'isExternal': False,
                                                                                                                                                                                                                    'lineNumber': 13,
                                                                                                                                                                                                                    'paramTypes': [],
                                                                                                                                                                                                                    'resolvedMethod': '@RequestMapping(method '
                                                                                                                                                                                                                                      '= '
                                                                                                                                                                                                                                      'RequestMethod.GET, '
                                                                                                                                                                                                                                      'value '
                                                                                                                                                                                                                                      '= '
                                                                                                                                                                                                                                      '"/latest")',
                                                                                                                                                                                                                    'returnType': ''}],
                                                                                                                                                                                                         'endpoints': ['/latest'],
                                                                                                                                                                                                         'line_nos': [13]}}},
                'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': {'resolved_methods': {'@RequestMapping(value = "/current", method = RequestMethod.GET)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                                          'columnNumber': 2,
                                                                                                                                                                                                                          'isExternal': False,
                                                                                                                                                                                                                          'lineNumber': 20,
                                                                                                                                                                                                                          'paramTypes': [],
                                                                                                                                                                                                                          'resolvedMethod': '@RequestMapping(value '
                                                                                                                                                                                                                                            '= '
                                                                                                                                                                                                                                            '"/current", '
                                                                                                                                                                                                                                            'method '
                                                                                                                                                                                                                                            '= '
                                                                                                                                                                                                                                            'RequestMethod.GET)',
                                                                                                                                                                                                                          'returnType': ''}],
                                                                                                                                                                                                               'endpoints': ['/current'],
                                                                                                                                                                                                               'line_nos': [20]},
                                                                                                                                           '@RequestMapping(value = "/{accountName}", method = RequestMethod.GET)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                                                'columnNumber': 2,
                                                                                                                                                                                                                                'isExternal': False,
                                                                                                                                                                                                                                'lineNumber': 26,
                                                                                                                                                                                                                                'paramTypes': [],
                                                                                                                                                                                                                                'resolvedMethod': '@RequestMapping(value '
                                                                                                                                                                                                                                                  '= '
                                                                                                                                                                                                                                                  '"/{accountName}", '
                                                                                                                                                                                                                                                  'method '
                                                                                                                                                                                                                                                  '= '
                                                                                                                                                                                                                                                  'RequestMethod.GET)',
                                                                                                                                                                                                                                'returnType': ''}],
                                                                                                                                                                                                                     'endpoints': ['/{accountName}'],
                                                                                                                                                                                                                     'line_nos': [26]},
                                                                                                                                           '@RequestMapping(value = "/{accountName}", method = RequestMethod.PUT)': {'calls': [{'callName': 'org.springframework.web.bind.annotation.RequestMapping',
                                                                                                                                                                                                                                'columnNumber': 2,
                                                                                                                                                                                                                                'isExternal': False,
                                                                                                                                                                                                                                'lineNumber': 32,
                                                                                                                                                                                                                                'paramTypes': [],
                                                                                                                                                                                                                                'resolvedMethod': '@RequestMapping(value '
                                                                                                                                                                                                                                                  '= '
                                                                                                                                                                                                                                                  '"/{accountName}", '
                                                                                                                                                                                                                                                  'method '
                                                                                                                                                                                                                                                  '= '
                                                                                                                                                                                                                                                  'RequestMethod.PUT)',
                                                                                                                                                                                                                                'returnType': ''}],
                                                                                                                                                                                                                     'endpoints': ['/{accountName}'],
                                                                                                                                                                                                                     'line_nos': [32]}}}}}

    endpoints = java_usages_1.populate_endpoints(methods)
    assert endpoints == {'/': {'post': {'responses': {}},
       'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [35]}}},
 '/accounts/{accountName}': {'get': {'responses': {}},
                             'parameters': [{'in': 'path',
                                             'name': 'accountName',
                                             'required': True}],
                             'x-atom-usages': {'call': {'notification-service/src/main/java/com/piggymetrics/notification/client/AccountServiceClient.java': [12]}}},
 '/current': {'get': {'responses': {}},
              'put': {'responses': {}},
              'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [25,
                                                                                                                                      30],
                                         'auth-service/src/main/java/com/piggymetrics/auth/controller/UserController.java': [22],
                                         'notification-service/src/main/java/com/piggymetrics/notification/controller/RecipientController.java': [21,
                                                                                                                                                  26],
                                         'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': [20]},
                                'target': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [30],
                                           'auth-service/src/main/java/com/piggymetrics/auth/controller/UserController.java': [22],
                                           'notification-service/src/main/java/com/piggymetrics/notification/controller/RecipientController.java': [26]}}},
 '/latest': {'get': {'responses': {}},
             'x-atom-usages': {'call': {'statistics-service/src/main/java/com/piggymetrics/statistics/client/ExchangeRatesClient.java': [13]}}},
 '/statistics/{accountName}': {'parameters': [{'in': 'path',
                                               'name': 'accountName',
                                               'required': True}],
                               'put': {'responses': {}},
                               'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/client/StatisticsServiceClient.java': [13]}}},
 '/uaa/users': {'post': {'responses': {}},
                'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/client/AuthServiceClient.java': [12]}}},
 '/{accountName}': {'get': {'responses': {}},
                    'parameters': [{'in': 'path',
                                    'name': 'accountName',
                                    'required': True}],
                    'put': {'responses': {}},
                    'x-atom-usages': {'call': {'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': [26,
                                                                                                                                                     32]},
                                      'target': {'statistics-service/src/main/java/com/piggymetrics/statistics/controller/StatisticsController.java': [32]}}},
 '/{name}': {'get': {'responses': {}},
             'parameters': [{'in': 'path', 'name': 'name', 'required': True}],
             'x-atom-usages': {'call': {'account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java': [20]}}}}


def test_js(js_usages_1):
    methods = js_usages_1._process_methods()
    assert list(methods.keys()) == ['app.ts',
 'data/datacache.ts',
 'data/datacreator.ts',
 'data/mongodb.ts',
 'data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts',
 'data/static/codefixes/accessLogDisclosureChallenge_2.ts',
 'data/static/codefixes/accessLogDisclosureChallenge_3.ts',
 'data/static/codefixes/accessLogDisclosureChallenge_4.ts',
 'data/static/codefixes/adminSectionChallenge_1_correct.ts',
 'data/static/codefixes/adminSectionChallenge_2.ts',
 'data/static/codefixes/adminSectionChallenge_3.ts',
 'data/static/codefixes/adminSectionChallenge_4.ts',
 'data/static/codefixes/changeProductChallenge_1.ts',
 'data/static/codefixes/changeProductChallenge_2.ts',
 'data/static/codefixes/changeProductChallenge_3_correct.ts',
 'data/static/codefixes/changeProductChallenge_4.ts',
 'data/static/codefixes/dbSchemaChallenge_1.ts',
 'data/static/codefixes/dbSchemaChallenge_2_correct.ts',
 'data/static/codefixes/dbSchemaChallenge_3.ts',
 'data/static/codefixes/directoryListingChallenge_1_correct.ts',
 'data/static/codefixes/directoryListingChallenge_2.ts',
 'data/static/codefixes/directoryListingChallenge_3.ts',
 'data/static/codefixes/directoryListingChallenge_4.ts',
 'data/static/codefixes/exposedMetricsChallenge_1.ts',
 'data/static/codefixes/exposedMetricsChallenge_2.ts',
 'data/static/codefixes/exposedMetricsChallenge_3_correct.ts',
 'data/static/codefixes/localXssChallenge_1.ts',
 'data/static/codefixes/localXssChallenge_2_correct.ts',
 'data/static/codefixes/localXssChallenge_3.ts',
 'data/static/codefixes/localXssChallenge_4.ts',
 'data/static/codefixes/noSqlReviewsChallenge_3_correct.ts',
 'data/static/codefixes/redirectChallenge_1.ts',
 'data/static/codefixes/redirectChallenge_3.ts',
 'data/static/codefixes/restfulXssChallenge_1_correct.ts',
 'data/static/codefixes/restfulXssChallenge_2.ts',
 'data/static/codefixes/restfulXssChallenge_3.ts',
 'data/static/codefixes/restfulXssChallenge_4.ts',
 'data/static/codefixes/scoreBoardChallenge_1_correct.ts',
 'data/static/codefixes/scoreBoardChallenge_2.ts',
 'data/static/codefixes/scoreBoardChallenge_3.ts',
 'data/static/codefixes/unionSqlInjectionChallenge_1.ts',
 'data/static/codefixes/unionSqlInjectionChallenge_2_correct.ts',
 'data/static/codefixes/unionSqlInjectionChallenge_3.ts',
 'data/static/codefixes/web3SandboxChallenge_1_correct.ts',
 'data/static/codefixes/web3SandboxChallenge_2.ts',
 'data/static/codefixes/web3SandboxChallenge_3.ts',
 'data/static/codefixes/xssBonusChallenge_1_correct.ts',
 'data/static/codefixes/xssBonusChallenge_2.ts',
 'data/static/codefixes/xssBonusChallenge_3.ts',
 'data/static/codefixes/xssBonusChallenge_4.ts',
 'data/types.ts',
 'frontend/src/app/Models/challenge.model.ts',
 'frontend/src/app/Services/address.service.ts',
 'frontend/src/app/Services/administration.service.ts',
 'frontend/src/app/Services/basket.service.ts',
 'frontend/src/app/Services/captcha.service.ts',
 'frontend/src/app/Services/challenge.service.ts',
 'frontend/src/app/Services/chatbot.service.ts',
 'frontend/src/app/Services/code-fixes.service.ts',
 'frontend/src/app/Services/code-snippet.service.ts',
 'frontend/src/app/Services/complaint.service.ts',
 'frontend/src/app/Services/configuration.service.ts',
 'frontend/src/app/Services/country-mapping.service.ts',
 'frontend/src/app/Services/data-subject.service.ts',
 'frontend/src/app/Services/delivery.service.ts',
 'frontend/src/app/Services/feature-flag.service.ts',
 'frontend/src/app/Services/feedback.service.ts',
 'frontend/src/app/Services/form-submit.service.ts',
 'frontend/src/app/Services/image-captcha.service.ts',
 'frontend/src/app/Services/keys.service.ts',
 'frontend/src/app/Services/languages.service.ts',
 'frontend/src/app/Services/local-backup.service.ts',
 'frontend/src/app/Services/order-history.service.ts',
 'frontend/src/app/Services/payment.service.ts',
 'frontend/src/app/Services/photo-wall.service.ts',
 'frontend/src/app/Services/product-review.service.ts',
 'frontend/src/app/Services/product.service.ts',
 'frontend/src/app/Services/quantity.service.ts',
 'frontend/src/app/Services/recycle.service.ts',
 'frontend/src/app/Services/request.interceptor.ts',
 'frontend/src/app/Services/security-answer.service.ts',
 'frontend/src/app/Services/security-question.service.ts',
 'frontend/src/app/Services/snack-bar-helper.service.ts',
 'frontend/src/app/Services/socket-io.service.ts',
 'frontend/src/app/Services/track-order.service.ts',
 'frontend/src/app/Services/two-factor-auth-service.ts',
 'frontend/src/app/Services/user.service.ts',
 'frontend/src/app/Services/vuln-lines.service.ts',
 'frontend/src/app/Services/wallet.service.ts',
 'frontend/src/app/Services/window-ref.service.ts',
 'frontend/src/app/about/about.component.ts',
 'frontend/src/app/accounting/accounting.component.ts',
 'frontend/src/app/address-create/address-create.component.ts',
 'frontend/src/app/address-select/address-select.component.ts',
 'frontend/src/app/address/address.component.ts',
 'frontend/src/app/administration/administration.component.ts',
 'frontend/src/app/app.component.ts',
 'frontend/src/app/app.guard.ts',
 'frontend/src/app/app.module.ts',
 'frontend/src/app/app.routing.ts',
 'frontend/src/app/basket/basket.component.ts',
 'frontend/src/app/challenge-solved-notification/challenge-solved-notification.component.ts',
 'frontend/src/app/challenge-status-badge/challenge-status-badge.component.ts',
 'frontend/src/app/change-password/change-password.component.ts',
 'frontend/src/app/chatbot/chatbot.component.ts',
 'frontend/src/app/code-area/code-area.component.ts',
 'frontend/src/app/code-fixes/code-fixes.component.ts',
 'frontend/src/app/code-snippet/code-snippet.component.ts',
 'frontend/src/app/complaint/complaint.component.ts',
 'frontend/src/app/contact/contact.component.ts',
 'frontend/src/app/data-export/data-export.component.ts',
 'frontend/src/app/delivery-method/delivery-method.component.ts',
 'frontend/src/app/deluxe-user/deluxe-user.component.ts',
 'frontend/src/app/error-page/error-page.component.ts',
 'frontend/src/app/faucet/faucet.component.ts',
 'frontend/src/app/faucet/faucet.module.ts',
 'frontend/src/app/feedback-details/feedback-details.component.ts',
 'frontend/src/app/forgot-password/forgot-password.component.ts',
 'frontend/src/app/last-login-ip/last-login-ip.component.ts',
 'frontend/src/app/login/login.component.ts',
 'frontend/src/app/navbar/navbar.component.ts',
 'frontend/src/app/nft-unlock/nft-unlock.component.ts',
 'frontend/src/app/oauth/oauth.component.ts',
 'frontend/src/app/order-completion/order-completion.component.ts',
 'frontend/src/app/order-history/order-history.component.ts',
 'frontend/src/app/order-summary/order-summary.component.ts',
 'frontend/src/app/payment-method/payment-method.component.ts',
 'frontend/src/app/payment/payment.component.ts',
 'frontend/src/app/photo-wall/mime-type.validator.ts',
 'frontend/src/app/photo-wall/photo-wall.component.ts',
 'frontend/src/app/privacy-policy/privacy-policy.component.ts',
 'frontend/src/app/privacy-security/privacy-security.component.ts',
 'frontend/src/app/product-details/product-details.component.ts',
 'frontend/src/app/product-review-edit/product-review-edit.component.ts',
 'frontend/src/app/purchase-basket/purchase-basket.component.ts',
 'frontend/src/app/qr-code/qr-code.component.ts',
 'frontend/src/app/recycle/recycle.component.ts',
 'frontend/src/app/register/register.component.ts',
 'frontend/src/app/saved-address/saved-address.component.ts',
 'frontend/src/app/saved-payment-methods/saved-payment-methods.component.ts',
 'frontend/src/app/score-board-legacy/score-board-legacy.component.ts',
 'frontend/src/app/score-board/components/challenge-card/challenge-card.component.ts',
 'frontend/src/app/score-board/components/challenges-unavailable-warning/challenges-unavailable-warning.component.ts',
 'frontend/src/app/score-board/components/coding-challenge-progress-score-card/coding-challenge-progress-score-card.component.ts',
 'frontend/src/app/score-board/components/difficulty-overview-score-card/difficulty-overview-score-card.component.ts',
 'frontend/src/app/score-board/components/difficulty-stars/difficulty-stars.component.ts',
 'frontend/src/app/score-board/components/filter-settings/components/category-filter/category-filter.component.ts',
 'frontend/src/app/score-board/components/filter-settings/components/score-board-additional-settings-dialog/score-board-additional-settings-dialog.component.ts',
 'frontend/src/app/score-board/components/filter-settings/filter-settings.component.ts',
 'frontend/src/app/score-board/components/filter-settings/pipes/difficulty-selection-summary.pipe.ts',
 'frontend/src/app/score-board/components/hacking-challenge-progress-score-card/hacking-challenge-progress-score-card.component.ts',
 'frontend/src/app/score-board/components/legacy-notice/legacy-notice.component.ts',
 'frontend/src/app/score-board/components/score-card/score-card.component.ts',
 'frontend/src/app/score-board/components/tutorial-mode-warning/tutorial-mode-warning.component.ts',
 'frontend/src/app/score-board/components/warning-card/warning-card.component.ts',
 'frontend/src/app/score-board/filter-settings/query-params-converters.ts',
 'frontend/src/app/score-board/helpers/challenge-filtering.ts',
 'frontend/src/app/score-board/helpers/challenge-sorting.ts',
 'frontend/src/app/score-board/pipes/challenge-hint.pipe.ts',
 'frontend/src/app/score-board/score-board.component.ts',
 'frontend/src/app/score-board/score-board.module.ts',
 'frontend/src/app/score-board/types/EnrichedChallenge.ts',
 'frontend/src/app/search-result/search-result.component.ts',
 'frontend/src/app/server-started-notification/server-started-notification.component.ts',
 'frontend/src/app/sidenav/sidenav.component.ts',
 'frontend/src/app/token-sale/token-sale.component.ts',
 'frontend/src/app/track-result/track-result.component.ts',
 'frontend/src/app/two-factor-auth-enter/two-factor-auth-enter.component.ts',
 'frontend/src/app/two-factor-auth/two-factor-auth.component.ts',
 'frontend/src/app/user-details/user-details.component.ts',
 'frontend/src/app/wallet-web3/wallet-web3.component.ts',
 'frontend/src/app/wallet-web3/wallet-web3.module.ts',
 'frontend/src/app/wallet/wallet.component.ts',
 'frontend/src/app/web3-sandbox/web3-sandbox.component.ts',
 'frontend/src/app/web3-sandbox/web3-sandbox.module.ts',
 'frontend/src/app/welcome-banner/welcome-banner.component.ts',
 'frontend/src/app/welcome/welcome.component.ts',
 'frontend/src/assets/private/EffectComposer.js',
 'frontend/src/assets/private/MaskPass.js',
 'frontend/src/assets/private/OrbitControls.js',
 'frontend/src/confetti/index.ts',
 'frontend/src/hacking-instructor/challenges/bonusPayload.ts',
 'frontend/src/hacking-instructor/challenges/codingChallenges.ts',
 'frontend/src/hacking-instructor/challenges/domXss.ts',
 'frontend/src/hacking-instructor/challenges/forgedFeedback.ts',
 'frontend/src/hacking-instructor/challenges/loginBender.ts',
 'frontend/src/hacking-instructor/challenges/loginJim.ts',
 'frontend/src/hacking-instructor/challenges/passwordStrength.ts',
 'frontend/src/hacking-instructor/challenges/privacyPolicy.ts',
 'frontend/src/hacking-instructor/challenges/scoreBoard.ts',
 'frontend/src/hacking-instructor/challenges/viewBasket.ts',
 'frontend/src/hacking-instructor/helpers/helpers.ts',
 'frontend/src/hacking-instructor/index.ts',
 'frontend/src/hacking-instructor/tutorialUnavailable.ts',
 'frontend/src/main.ts',
 'frontend/src/polyfills.ts',
 'lib/accuracy.ts',
 'lib/antiCheat.ts',
 'lib/botUtils.ts',
 'lib/challengeUtils.ts',
 'lib/codingChallenges.ts',
 'lib/insecurity.ts',
 'lib/is-docker.ts',
 'lib/is-heroku.ts',
 'lib/is-windows.ts',
 'lib/logger.ts',
 'lib/noUpdate.ts',
 'lib/startup/cleanupFtpFolder.ts',
 'lib/startup/customizeApplication.ts',
 'lib/startup/customizeEasterEgg.ts',
 'lib/startup/registerWebsocketEvents.ts',
 'lib/startup/restoreOverwrittenFilesWithOriginals.ts',
 'lib/startup/validateChatBot.ts',
 'lib/startup/validateDependencies.ts',
 'lib/startup/validatePreconditions.ts',
 'lib/utils.ts',
 'lib/webhook.ts',
 'models/address.ts',
 'models/basket.ts',
 'models/basketitem.ts',
 'models/captcha.ts',
 'models/card.ts',
 'models/challenge.ts',
 'models/complaint.ts',
 'models/delivery.ts',
 'models/feedback.ts',
 'models/imageCaptcha.ts',
 'models/index.ts',
 'models/memory.ts',
 'models/privacyRequests.ts',
 'models/product.ts',
 'models/quantity.ts',
 'models/recycle.ts',
 'models/relations.ts',
 'models/securityAnswer.ts',
 'models/securityQuestion.ts',
 'models/user.ts',
 'models/wallet.ts',
 'routes/2fa.ts',
 'routes/address.ts',
 'routes/angular.ts',
 'routes/appConfiguration.ts',
 'routes/appVersion.ts',
 'routes/authenticatedUsers.ts',
 'routes/b2bOrder.ts',
 'routes/basket.ts',
 'routes/basketItems.ts',
 'routes/captcha.ts',
 'routes/changePassword.ts',
 'routes/chatbot.ts',
 'routes/checkKeys.ts',
 'routes/continueCode.ts',
 'routes/countryMapping.ts',
 'routes/coupon.ts',
 'routes/createProductReviews.ts',
 'routes/currentUser.ts',
 'routes/dataErasure.ts',
 'routes/dataExport.ts',
 'routes/delivery.ts',
 'routes/deluxe.ts',
 'routes/easterEgg.ts',
 'routes/fileServer.ts',
 'routes/fileUpload.ts',
 'routes/imageCaptcha.ts',
 'routes/keyServer.ts',
 'routes/languages.ts',
 'routes/likeProductReviews.ts',
 'routes/logfileServer.ts',
 'routes/login.ts',
 'routes/memory.ts',
 'routes/metrics.ts',
 'routes/nftMint.ts',
 'routes/order.ts',
 'routes/orderHistory.ts',
 'routes/payment.ts',
 'routes/premiumReward.ts',
 'routes/privacyPolicyProof.ts',
 'routes/profileImageFileUpload.ts',
 'routes/profileImageUrlUpload.ts',
 'routes/quarantineServer.ts',
 'routes/recycles.ts',
 'routes/redirect.ts',
 'routes/repeatNotification.ts',
 'routes/resetPassword.ts',
 'routes/restoreProgress.ts',
 'routes/saveLoginIp.ts',
 'routes/search.ts',
 'routes/securityQuestion.ts',
 'routes/showProductReviews.ts',
 'routes/trackOrder.ts',
 'routes/updateProductReviews.ts',
 'routes/updateUserProfile.ts',
 'routes/userProfile.ts',
 'routes/verify.ts',
 'routes/videoHandler.ts',
 'routes/vulnCodeFixes.ts',
 'routes/vulnCodeSnippet.ts',
 'routes/wallet.ts',
 'routes/web3Wallet.ts',
 'rsn/rsn-update.ts',
 'rsn/rsn-verbose.ts',
 'rsn/rsn.ts',
 'rsn/rsnUtil.ts',
 'server.ts',
 'data/static/codefixes/forgedReviewChallenge_1.ts',
 'data/static/codefixes/forgedReviewChallenge_2_correct.ts',
 'data/static/codefixes/forgedReviewChallenge_3.ts',
 'data/static/codefixes/noSqlReviewsChallenge_1.ts',
 'data/static/codefixes/noSqlReviewsChallenge_2.ts',
 'data/static/codefixes/redirectChallenge_2.ts',
 'data/static/codefixes/redirectChallenge_4_correct.ts',
 'data/static/codefixes/redirectCryptoCurrencyChallenge_1.ts',
 'data/static/codefixes/redirectCryptoCurrencyChallenge_2.ts',
 'data/static/codefixes/redirectCryptoCurrencyChallenge_3_correct.ts',
 'data/static/codefixes/redirectCryptoCurrencyChallenge_4.ts',
 'frontend/src/assets/private/RenderPass.js',
 'frontend/src/assets/private/ShaderPass.js',
 'data/static/codefixes/resetPasswordMortyChallenge_1.ts',
 'data/static/codefixes/resetPasswordMortyChallenge_2.ts',
 'data/static/codefixes/resetPasswordMortyChallenge_3.ts',
 'frontend/src/app/Models/backup.model.ts',
 'frontend/src/app/Models/deliveryMethod.model.ts',
 'frontend/src/app/Models/product.model.ts',
 'frontend/src/app/Models/review.model.ts',
 'frontend/src/app/Models/securityQuestion.model.ts',
 'frontend/src/app/score-board/filter-settings/FilterSetting.ts']
    methods = js_usages_1.methods_to_endpoints(methods)
    assert methods == {'file_names': {'routes/dataErasure.ts': {'resolved_methods': {"router.get('/',async(req:Request,res:Response,next:NextFunction):Promise<void>=>{\rconstloggedInUser=insecurity.authenticatedUsers.get(req.cookies.token)\rif(!loggedInUser){\rnext(newError('Blockedillegalactivityby'+req.socket.remoteAddress))\rreturn\r}\rconstemail=loggedInUser.data.email\r\rtry{\rconstanswer=awaitSecurityAnswerModel.findOne({\rinclude:[{\rmodel:UserModel,\rwhere:{email}\r}]\r})\rif(answer==null){\rthrownewError('Noanswerfound!')\r}\rconstquestion=awaitSecurityQuestionModel.findByPk(answer.SecurityQuestionId)\rif(question==null){\rthrownewError('Noquestionfound!')\r}\r\rres.render('dataErasureForm',{userEmail:email,securityQuestion:question.question})\r}catch(error){\rnext(error)\r}\r})": {'endpoints': ['/',
lockedillegalactivityby',
oanswerfound!',
oquestionfound!',
dataErasureForm']},
                                                               "router.post('/',async(req:Request<Record<string,unknown>,Record<string,unknown>,DataErasureRequestParams>,res:Response,next:NextFunction):Promise<void>=>{\rconstloggedInUser=insecurity.authenticatedUsers.get(req.cookies.token)\rif(!loggedInUser){\rnext(newError('Blockedillegalactivityby'+req.socket.remoteAddress))\rreturn\r}\r\rtry{\rawaitPrivacyRequestModel.create({\rUserId:loggedInUser.data.id,\rdeletionRequested:true\r})\r\rres.clearCookie('token')\rif(req.body.layout){\rconstfilePath:string=path.resolve(req.body.layout).toLowerCase()\rconstisForbiddenFile:boolean=(filePath.includes('ftp')||filePath.includes('ctf.key')||filePath.includes('encryptionkeys'))\rif(!isForbiddenFile){\rres.render('dataErasureResult',{\r...req.body\r},(error,html)=>{\rif(!html||error){\rnext(newError(error.message))\r}else{\r...": {'endpoints': ['/',
lockedillegalactivityby',
token',
ftp',
ctf.key',
encryptionkeys',
dataErasureResult']}}},
                'server.ts': {'resolved_methods': {"app.delete('/api/Addresss/:id',security.appendUserId(),address.delAddressById())": {'endpoints': ['/api/Addresss/:id']},
                                                   "app.delete('/api/Cards/:id',security.appendUserId(),payment.delPaymentMethodById())": {'endpoints': ['/api/Cards/:id']},
                                                   "app.delete('/api/Products/:id',security.denyAll())": {'endpoints': ['/api/Products/:id']},
                                                   "app.delete('/api/Quantitys/:id',security.denyAll())": {'endpoints': ['/api/Quantitys/:id']},
                                                   "app.delete('/api/Recycles/:id',security.denyAll())": {'endpoints': ['/api/Recycles/:id']},
                                                   "app.enable('trustproxy')": {'endpoints': ['/trustproxy']},
                                                   "app.get('/api/Addresss',security.appendUserId(),address.getAddress())": {'endpoints': ['/api/Addresss']},
                                                   "app.get('/api/Addresss/:id',security.appendUserId(),address.getAddressById())": {'endpoints': ['/api/Addresss/:id']},
                                                   "app.get('/api/Cards',security.appendUserId(),payment.getPaymentMethods())": {'endpoints': ['/api/Cards']},
                                                   "app.get('/api/Cards/:id',security.appendUserId(),payment.getPaymentMethodById())": {'endpoints': ['/api/Cards/:id']},
                                                   "app.get('/api/Complaints',security.isAuthorized())": {'endpoints': ['/api/Complaints']},
                                                   "app.get('/api/Deliverys',delivery.getDeliveryMethods())": {'endpoints': ['/api/Deliverys']},
                                                   "app.get('/api/Deliverys/:id',delivery.getDeliveryMethod())": {'endpoints': ['/api/Deliverys/:id']},
                                                   "app.get('/api/PrivacyRequests',security.denyAll())": {'endpoints': ['/api/PrivacyRequests']},
                                                   "app.get('/api/Recycles',recycles.blockRecycleItems())": {'endpoints': ['/api/Recycles']},
                                                   "app.get('/api/Recycles/:id',recycles.getRecycleItem())": {'endpoints': ['/api/Recycles/:id']},
                                                   "app.get('/api/SecurityAnswers',security.denyAll())": {'endpoints': ['/api/SecurityAnswers']},
                                                   "app.get('/api/Users',security.isAuthorized())": {'endpoints': ['/api/Users']},
                                                   "app.get('/metrics',metrics.serveMetrics())": {'endpoints': ['/metrics']},
                                                   "app.get('/profile',security.updateAuthenticatedUsers(),userProfile())": {'endpoints': ['/profile']},
                                                   "app.get('/promotion',videoHandler.promotionVideo())": {'endpoints': ['/promotion']},
                                                   "app.get('/redirect',redirect())": {'endpoints': ['/redirect']},
                                                   "app.get('/rest/2fa/status',security.isAuthorized(),twoFactorAuth.status())": {'endpoints': ['/rest/2fa/status']},
                                                   "app.get('/rest/admin/application-configuration',appConfiguration())": {'endpoints': ['/rest/admin/application-configuration']},
                                                   "app.get('/rest/admin/application-version',appVersion())": {'endpoints': ['/rest/admin/application-version']},
                                                   "app.get('/rest/basket/:id',basket())": {'endpoints': ['/rest/basket/:id']},
                                                   "app.get('/rest/captcha',captcha())": {'endpoints': ['/rest/captcha']},
                                                   "app.get('/rest/chatbot/status',chatbot.status())": {'endpoints': ['/rest/chatbot/status']},
                                                   "app.get('/rest/continue-code',continueCode.continueCode())": {'endpoints': ['/rest/continue-code']},
                                                   "app.get('/rest/continue-code-findIt',continueCode.continueCodeFindIt())": {'endpoints': ['/rest/continue-code-findIt']},
                                                   "app.get('/rest/continue-code-fixIt',continueCode.continueCodeFixIt())": {'endpoints': ['/rest/continue-code-fixIt']},
                                                   "app.get('/rest/country-mapping',countryMapping())": {'endpoints': ['/rest/country-mapping']},
                                                   "app.get('/rest/deluxe-membership',deluxe.deluxeMembershipStatus())": {'endpoints': ['/rest/deluxe-membership']},
                                                   "app.get('/rest/image-captcha',imageCaptcha())": {'endpoints': ['/rest/image-captcha']},
                                                   "app.get('/rest/languages',languageList())": {'endpoints': ['/rest/languages']},
                                                   "app.get('/rest/memories',memory.getMemories())": {'endpoints': ['/rest/memories']},
                                                   "app.get('/rest/order-history',orderHistory.orderHistory())": {'endpoints': ['/rest/order-history']},
                                                   "app.get('/rest/order-history/orders',security.isAccounting(),orderHistory.allOrders())": {'endpoints': ['/rest/order-history/orders']},
                                                   "app.get('/rest/products/:id/reviews',showProductReviews())": {'endpoints': ['/rest/products/:id/reviews']},
                                                   "app.get('/rest/products/search',search())": {'endpoints': ['/rest/products/search']},
                                                   "app.get('/rest/repeat-notification',repeatNotification())": {'endpoints': ['/rest/repeat-notification']},
                                                   "app.get('/rest/saveLoginIp',saveLoginIp())": {'endpoints': ['/rest/saveLoginIp']},
                                                   "app.get('/rest/track-order/:id',trackOrder())": {'endpoints': ['/rest/track-order/:id']},
                                                   "app.get('/rest/user/authentication-details',authenticatedUsers())": {'endpoints': ['/rest/user/authentication-details']},
                                                   "app.get('/rest/user/change-password',changePassword())": {'endpoints': ['/rest/user/change-password']},
                                                   "app.get('/rest/user/security-question',securityQuestion())": {'endpoints': ['/rest/user/security-question']},
                                                   "app.get('/rest/user/whoami',security.updateAuthenticatedUsers(),currentUser())": {'endpoints': ['/rest/user/whoami']},
                                                   "app.get('/rest/wallet/balance',security.appendUserId(),wallet.getWalletBalance())": {'endpoints': ['/rest/wallet/balance']},
                                                   "app.get('/rest/web3/nftMintListen',nftMint.nftMintListener())": {'endpoints': ['/rest/web3/nftMintListen']},
                                                   "app.get('/rest/web3/nftUnlocked',checkKeys.nftUnlocked())": {'endpoints': ['/rest/web3/nftUnlocked']},
                                                   "app.get('/snippets',vulnCodeSnippet.serveChallengesWithCodeSnippet())": {'endpoints': ['/snippets']},
                                                   "app.get('/snippets/:challenge',vulnCodeSnippet.serveCodeSnippet())": {'endpoints': ['/snippets/:challenge']},
                                                   "app.get('/snippets/fixes/:key',vulnCodeFixes.serveCodeFixes())": {'endpoints': ['/snippets/fixes/:key']},
                                                   "app.get('/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg',easterEgg())": {'endpoints': ['/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg']},
                                                   "app.get('/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us',premiumReward())": {'endpoints': ['/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us']},
                                                   "app.get('/video',videoHandler.getVideo())": {'endpoints': ['/video']},
                                                   "app.get('/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility',privacyPolicyProof())": {'endpoints': ['/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility']},
                                                   "app.get(['/.well-known/security.txt','/security.txt'],verify.accessControlChallenges())": {'endpoints': ['/.well-known/security.txt',
                                                                                                                                                             '/security.txt']},
                                                   "app.patch('/rest/products/reviews',security.isAuthorized(),updateProductReviews())": {'endpoints': ['/rest/products/reviews']},
                                                   "app.post('/api/Addresss',security.appendUserId())": {'endpoints': ['/api/Addresss']},
                                                   "app.post('/api/BasketItems',security.appendUserId(),basketItems.quantityCheckBeforeBasketItemAddition(),basketItems.addBasketItem())": {'endpoints': ['/api/BasketItems']},
                                                   "app.post('/api/Cards',security.appendUserId())": {'endpoints': ['/api/Cards']},
                                                   "app.post('/api/Challenges',security.denyAll())": {'endpoints': ['/api/Challenges']},
                                                   "app.post('/api/Complaints',security.isAuthorized())": {'endpoints': ['/api/Complaints']},
                                                   "app.post('/api/Feedbacks',captcha.verifyCaptcha())": {'endpoints': ['/api/Feedbacks']},
                                                   "app.post('/api/Feedbacks',verify.captchaBypassChallenge())": {'endpoints': ['/api/Feedbacks']},
                                                   "app.post('/api/Feedbacks',verify.forgedFeedbackChallenge())": {'endpoints': ['/api/Feedbacks']},
                                                   "app.post('/api/PrivacyRequests',security.isAuthorized())": {'endpoints': ['/api/PrivacyRequests']},
                                                   "app.post('/api/Products',security.isAuthorized())": {'endpoints': ['/api/Products']},
                                                   "app.post('/api/Quantitys',security.denyAll())": {'endpoints': ['/api/Quantitys']},
                                                   "app.post('/api/Recycles',security.isAuthorized())": {'endpoints': ['/api/Recycles']},
                                                   "app.post('/api/SecurityQuestions',security.denyAll())": {'endpoints': ['/api/SecurityQuestions']},
                                                   "app.post('/api/Users',(req:Request,res:Response,next:NextFunction)=>{\rif(req.body.email!==undefined&&req.body.password!==undefined&&req.body.passwordRepeat!==undefined){\rif(req.body.email.length!==0&&req.body.password.length!==0){\rreq.body.email=req.body.email.trim()\rreq.body.password=req.body.password.trim()\rreq.body.passwordRepeat=req.body.passwordRepeat.trim()\r}else{\rres.status(400).send(res.__('Invalidemail/passwordcannotbeempty'))\r}\r}\rnext()\r})": {'endpoints': ['/api/Users',
nvalidemail/passwordcannotbeempty']},
                                                   "app.post('/api/Users',verify.emptyUserRegistration())": {'endpoints': ['/api/Users']},
                                                   "app.post('/api/Users',verify.passwordRepeatChallenge())": {'endpoints': ['/api/Users']},
                                                   "app.post('/api/Users',verify.registerAdminChallenge())": {'endpoints': ['/api/Users']},
                                                   "app.post('/b2b/v2/orders',b2bOrder())": {'endpoints': ['/b2b/v2/orders']},
                                                   "app.post('/file-upload',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),handleZipFileUpload,checkUploadSize,checkFileType,handleXmlUpload)": {'endpoints': ['/file-upload',
                                                                                                                                                                                                                                                              '/file']},
                                                   "app.post('/profile',updateUserProfile())": {'endpoints': ['/profile']},
                                                   "app.post('/profile/image/file',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),profileImageFileUpload())": {'endpoints': ['/profile/image/file',
                                                                                                                                                                                                                            '/file']},
                                                   "app.post('/profile/image/url',uploadToMemory.single('file'),profileImageUrlUpload())": {'endpoints': ['/profile/image/url',
                                                                                                                                                          '/file']},
                                                   "app.post('/rest/2fa/disable',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rsecurity.isAuthorized(),\rtwoFactorAuth.disable()\r)": {'endpoints': ['/rest/2fa/disable']},
                                                   "app.post('/rest/2fa/setup',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rsecurity.isAuthorized(),\rtwoFactorAuth.setup()\r)": {'endpoints': ['/rest/2fa/setup']},
                                                   "app.post('/rest/2fa/verify',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rtwoFactorAuth.verify()\r)": {'endpoints': ['/rest/2fa/verify']},
                                                   "app.post('/rest/basket/:id/checkout',order())": {'endpoints': ['/rest/basket/:id/checkout']},
                                                   "app.post('/rest/chatbot/respond',chatbot.process())": {'endpoints': ['/rest/chatbot/respond']},
                                                   "app.post('/rest/deluxe-membership',security.appendUserId(),deluxe.upgradeToDeluxe())": {'endpoints': ['/rest/deluxe-membership']},
                                                   "app.post('/rest/memories',uploadToDisk.single('image'),ensureFileIsPassed,security.appendUserId(),metrics.observeFileUploadMetricsMiddleware(),memory.addMemory())": {'endpoints': ['/rest/memories',
                                                                                                                                                                                                                                        '/image']},
                                                   "app.post('/rest/products/reviews',security.isAuthorized(),likeProductReviews())": {'endpoints': ['/rest/products/reviews']},
                                                   "app.post('/rest/user/data-export',security.appendUserId(),dataExport())": {'endpoints': ['/rest/user/data-export']},
                                                   "app.post('/rest/user/data-export',security.appendUserId(),imageCaptcha.verifyCaptcha())": {'endpoints': ['/rest/user/data-export']},
                                                   "app.post('/rest/user/login',login())": {'endpoints': ['/rest/user/login']},
                                                   "app.post('/rest/user/reset-password',resetPassword())": {'endpoints': ['/rest/user/reset-password']},
                                                   "app.post('/rest/web3/submitKey',checkKeys.checkKeys())": {'endpoints': ['/rest/web3/submitKey']},
                                                   "app.post('/rest/web3/walletExploitAddress',web3Wallet.contractExploitListener())": {'endpoints': ['/rest/web3/walletExploitAddress']},
                                                   "app.post('/rest/web3/walletNFTVerify',nftMint.walletNFTVerify())": {'endpoints': ['/rest/web3/walletNFTVerify']},
                                                   "app.post('/snippets/fixes',vulnCodeFixes.checkCorrectFix())": {'endpoints': ['/snippets/fixes']},
                                                   "app.post('/snippets/verdict',vulnCodeSnippet.checkVulnLines())": {'endpoints': ['/snippets/verdict']},
                                                   "app.put('/api/Addresss/:id',security.appendUserId())": {'endpoints': ['/api/Addresss/:id']},
                                                   "app.put('/api/BasketItems/:id',security.appendUserId(),basketItems.quantityCheckBeforeBasketItemUpdate())": {'endpoints': ['/api/BasketItems/:id']},
                                                   "app.put('/api/Cards/:id',security.denyAll())": {'endpoints': ['/api/Cards/:id']},
                                                   "app.put('/api/Feedbacks/:id',security.denyAll())": {'endpoints': ['/api/Feedbacks/:id']},
                                                   "app.put('/api/Recycles/:id',security.denyAll())": {'endpoints': ['/api/Recycles/:id']},
                                                   "app.put('/rest/basket/:id/coupon/:coupon',coupon())": {'endpoints': ['/rest/basket/:id/coupon/:coupon']},
                                                   "app.put('/rest/continue-code-findIt/apply/:continueCode',restoreProgress.restoreProgressFindIt())": {'endpoints': ['/rest/continue-code-findIt/apply/:continueCode']},
                                                   "app.put('/rest/continue-code-fixIt/apply/:continueCode',restoreProgress.restoreProgressFixIt())": {'endpoints': ['/rest/continue-code-fixIt/apply/:continueCode']},
                                                   "app.put('/rest/continue-code/apply/:continueCode',restoreProgress.restoreProgress())": {'endpoints': ['/rest/continue-code/apply/:continueCode']},
                                                   "app.put('/rest/order-history/:id/delivery-status',security.isAccounting(),orderHistory.toggleDeliveryStatus())": {'endpoints': ['/rest/order-history/:id/delivery-status']},
                                                   "app.put('/rest/products/:id/reviews',createProductReviews())": {'endpoints': ['/rest/products/:id/reviews']},
                                                   "app.put('/rest/wallet/balance',security.appendUserId(),wallet.addWalletBalance())": {'endpoints': ['/rest/wallet/balance']},
                                                   "app.route('/api/Users/:id')": {'endpoints': ['/api/Users/:id']},
                                                   "app.use('/api-docs',swaggerUi.serve,swaggerUi.setup(swaggerDocument))": {'endpoints': ['/api-docs']},
                                                   "app.use('/api/BasketItems',security.isAuthorized())": {'endpoints': ['/api/BasketItems']},
                                                   "app.use('/api/BasketItems/:id',security.isAuthorized())": {'endpoints': ['/api/BasketItems/:id']},
                                                   "app.use('/api/Challenges/:id',security.denyAll())": {'endpoints': ['/api/Challenges/:id']},
                                                   "app.use('/api/Complaints/:id',security.denyAll())": {'endpoints': ['/api/Complaints/:id']},
                                                   "app.use('/api/Feedbacks/:id',security.isAuthorized())": {'endpoints': ['/api/Feedbacks/:id']},
                                                   "app.use('/api/PrivacyRequests',security.isAuthorized())": {'endpoints': ['/api/PrivacyRequests']},
                                                   "app.use('/api/PrivacyRequests/:id',security.denyAll())": {'endpoints': ['/api/PrivacyRequests/:id']},
                                                   "app.use('/api/PrivacyRequests/:id',security.isAuthorized())": {'endpoints': ['/api/PrivacyRequests/:id']},
                                                   "app.use('/api/Quantitys/:id',security.isAccounting(),ipfilter(['123.456.789'],{mode:'allow'}))": {'endpoints': ['/api/Quantitys/:id',
                                                                                                                                                                    '/123.456.789']},
                                                   "app.use('/api/SecurityAnswers/:id',security.denyAll())": {'endpoints': ['/api/SecurityAnswers/:id']},
                                                   "app.use('/api/SecurityQuestions/:id',security.denyAll())": {'endpoints': ['/api/SecurityQuestions/:id']},
                                                   "app.use('/assets/i18n',verify.accessControlChallenges())": {'endpoints': ['/assets/i18n']},
                                                   "app.use('/assets/public/images/padding',verify.accessControlChallenges())": {'endpoints': ['/assets/public/images/padding']},
                                                   "app.use('/assets/public/images/products',verify.accessControlChallenges())": {'endpoints': ['/assets/public/images/products']},
                                                   "app.use('/assets/public/images/uploads',verify.accessControlChallenges())": {'endpoints': ['/assets/public/images/uploads']},
                                                   "app.use('/b2b/v2',security.isAuthorized())": {'endpoints': ['/b2b/v2']},
                                                   "app.use('/dataerasure',dataErasure)": {'endpoints': ['/dataerasure']},
                                                   "app.use('/encryptionkeys',serveIndexMiddleware,serveIndex('encryptionkeys',{icons:true,view:'details'}))": {'endpoints': ['/encryptionkeys',
                                                                                                                                                                              '/encryptionkeys',
                                                                                                                                                                              '/details']},
                                                   "app.use('/encryptionkeys/:file',keyServer())": {'endpoints': ['/encryptionkeys/:file']},
                                                   "app.use('/ftp',serveIndexMiddleware,serveIndex('ftp',{icons:true}))": {'endpoints': ['/ftp',
                                                                                                                                         '/ftp']},
                                                   "app.use('/ftp(?!/quarantine)/:file',fileServer())": {'endpoints': ['/{regex_param_1}/:file']},
                                                   "app.use('/ftp/quarantine/:file',quarantineServer())": {'endpoints': ['/ftp/quarantine/:file']},
                                                   "app.use('/rest/basket',security.isAuthorized(),security.appendUserId())": {'endpoints': ['/rest/basket']},
                                                   "app.use('/rest/basket/:id',security.isAuthorized())": {'endpoints': ['/rest/basket/:id']},
                                                   "app.use('/rest/basket/:id/order',security.isAuthorized())": {'endpoints': ['/rest/basket/:id/order']},
                                                   "app.use('/rest/user/authentication-details',security.isAuthorized())": {'endpoints': ['/rest/user/authentication-details']},
                                                   "app.use('/rest/user/reset-password',newRateLimit({\rwindowMs:5*60*1000,\rmax:100,\rkeyGenerator({headers,ip}:{headers:any,ip:any}){returnheaders['X-Forwarded-For']||ip}//vuln-code-snippetvuln-lineresetPasswordMortyChallenge\r}))": {'endpoints': ['/rest/user/reset-password']},
                                                   "app.use('/solve/challenges/server-side',verify.serverSideChallenges())": {'endpoints': ['/solve/challenges/server-side']},
                                                   "app.use('/support/logs',serveIndexMiddleware,serveIndex('logs',{icons:true,view:'details'}))": {'endpoints': ['/support/logs',
                                                                                                                                                                  '/logs',
                                                                                                                                                                  '/details']},
                                                   "app.use('/support/logs',verify.accessControlChallenges())": {'endpoints': ['/support/logs']},
                                                   "app.use('/support/logs/:file',logFileServer())": {'endpoints': ['/support/logs/:file']},
                                                   "app.use((req:Request,res:Response,next:NextFunction)=>{\rreq.url=req.url.replace(/[/]+/g,'/')\rnext()\r})": {'endpoints': ['/']},
                                                   "app.use((req:Request,res:Response,next:NextFunction)=>{\rres.append('X-Recruiting',config.get('application.securityTxt.hiring'))\rnext()\r})": {'endpoints': ['/application.securityTxt.hiring']},
                                                   "app.use(['/.well-known/security.txt','/security.txt'],securityTxt({\rcontact:config.get('application.securityTxt.contact'),\rencryption:config.get('application.securityTxt.encryption'),\racknowledgements:config.get('application.securityTxt.acknowledgements'),\r'Preferred-Languages':[...newSet(locales.map((locale:{key:string})=>locale.key.substr(0,2)))].join(','),\rhiring:config.get('application.securityTxt.hiring'),\rexpires:securityTxtExpiration.toUTCString()\r}))": {'endpoints': ['/.well-known/security.txt',
security.txt',
application.securityTxt.contact',
application.securityTxt.encryption',
application.securityTxt.acknowledgements',
referred-Languages',
application.securityTxt.hiring']},
                                                   "app.use(cookieParser('kekse'))": {'endpoints': ['/kekse']},
                                                   "app.use(express.static(path.resolve('frontend/dist/frontend')))": {'endpoints': ['/frontend/dist/frontend']},
                                                   "app.use(morgan('combined',{stream:accessLogStream}))": {'endpoints': ['/combined']},
                                                   "app.use(robots({UserAgent:'*',Disallow:'/ftp'}))": {'endpoints': ['/ftp']}}}}}

    js_usages_1.target_line_nums = js_usages_1._identify_target_line_nums(methods)
    js_usages_1.file_endpoint_map = js_usages_1.create_file_to_method_dict(methods)
    file_endpoint_map = sort_openapi_result(js_usages_1.file_endpoint_map)
    assert file_endpoint_map == {'/': ['routes/dataErasure.ts', 'server.ts'],
 '/.well-known/security.txt': ['server.ts'],
 '/123.456.789': ['server.ts'],
 '/Blockedillegalactivityby': ['routes/dataErasure.ts'],
 '/Invalidemail/passwordcannotbeempty': ['server.ts'],
 '/Noanswerfound!': ['routes/dataErasure.ts'],
 '/Noquestionfound!': ['routes/dataErasure.ts'],
 '/Preferred-Languages': ['server.ts'],
 '/api-docs': ['server.ts'],
 '/api/Addresss': ['server.ts'],
 '/api/Addresss/:id': ['server.ts'],
 '/api/BasketItems': ['server.ts'],
 '/api/BasketItems/:id': ['server.ts'],
 '/api/Cards': ['server.ts'],
 '/api/Cards/:id': ['server.ts'],
 '/api/Challenges': ['server.ts'],
 '/api/Challenges/:id': ['server.ts'],
 '/api/Complaints': ['server.ts'],
 '/api/Complaints/:id': ['server.ts'],
 '/api/Deliverys': ['server.ts'],
 '/api/Deliverys/:id': ['server.ts'],
 '/api/Feedbacks': ['server.ts'],
 '/api/Feedbacks/:id': ['server.ts'],
 '/api/PrivacyRequests': ['server.ts'],
 '/api/PrivacyRequests/:id': ['server.ts'],
 '/api/Products': ['server.ts'],
 '/api/Products/:id': ['server.ts'],
 '/api/Quantitys': ['server.ts'],
 '/api/Quantitys/:id': ['server.ts'],
 '/api/Recycles': ['server.ts'],
 '/api/Recycles/:id': ['server.ts'],
 '/api/SecurityAnswers': ['server.ts'],
 '/api/SecurityAnswers/:id': ['server.ts'],
 '/api/SecurityQuestions': ['server.ts'],
 '/api/SecurityQuestions/:id': ['server.ts'],
 '/api/Users': ['server.ts'],
 '/api/Users/:id': ['server.ts'],
 '/application.securityTxt.acknowledgements': ['server.ts'],
 '/application.securityTxt.contact': ['server.ts'],
 '/application.securityTxt.encryption': ['server.ts'],
 '/application.securityTxt.hiring': ['server.ts'],
 '/assets/i18n': ['server.ts'],
 '/assets/public/images/padding': ['server.ts'],
 '/assets/public/images/products': ['server.ts'],
 '/assets/public/images/uploads': ['server.ts'],
 '/b2b/v2': ['server.ts'],
 '/b2b/v2/orders': ['server.ts'],
 '/combined': ['server.ts'],
 '/ctf.key': ['routes/dataErasure.ts'],
 '/dataErasureForm': ['routes/dataErasure.ts'],
 '/dataErasureResult': ['routes/dataErasure.ts'],
 '/dataerasure': ['server.ts'],
 '/details': ['server.ts'],
 '/encryptionkeys': ['routes/dataErasure.ts', 'server.ts'],
 '/encryptionkeys/:file': ['server.ts'],
 '/file': ['server.ts'],
 '/file-upload': ['server.ts'],
 '/frontend/dist/frontend': ['server.ts'],
 '/ftp': ['routes/dataErasure.ts', 'server.ts'],
 '/ftp/quarantine/:file': ['server.ts'],
 '/image': ['server.ts'],
 '/kekse': ['server.ts'],
 '/logs': ['server.ts'],
 '/metrics': ['server.ts'],
 '/profile': ['server.ts'],
 '/profile/image/file': ['server.ts'],
 '/profile/image/url': ['server.ts'],
 '/promotion': ['server.ts'],
 '/redirect': ['server.ts'],
 '/rest/2fa/disable': ['server.ts'],
 '/rest/2fa/setup': ['server.ts'],
 '/rest/2fa/status': ['server.ts'],
 '/rest/2fa/verify': ['server.ts'],
 '/rest/admin/application-configuration': ['server.ts'],
 '/rest/admin/application-version': ['server.ts'],
 '/rest/basket': ['server.ts'],
 '/rest/basket/:id': ['server.ts'],
 '/rest/basket/:id/checkout': ['server.ts'],
 '/rest/basket/:id/coupon/:coupon': ['server.ts'],
 '/rest/basket/:id/order': ['server.ts'],
 '/rest/captcha': ['server.ts'],
 '/rest/chatbot/respond': ['server.ts'],
 '/rest/chatbot/status': ['server.ts'],
 '/rest/continue-code': ['server.ts'],
 '/rest/continue-code-findIt': ['server.ts'],
 '/rest/continue-code-findIt/apply/:continueCode': ['server.ts'],
 '/rest/continue-code-fixIt': ['server.ts'],
 '/rest/continue-code-fixIt/apply/:continueCode': ['server.ts'],
 '/rest/continue-code/apply/:continueCode': ['server.ts'],
 '/rest/country-mapping': ['server.ts'],
 '/rest/deluxe-membership': ['server.ts'],
 '/rest/image-captcha': ['server.ts'],
 '/rest/languages': ['server.ts'],
 '/rest/memories': ['server.ts'],
 '/rest/order-history': ['server.ts'],
 '/rest/order-history/:id/delivery-status': ['server.ts'],
 '/rest/order-history/orders': ['server.ts'],
 '/rest/products/:id/reviews': ['server.ts'],
 '/rest/products/reviews': ['server.ts'],
 '/rest/products/search': ['server.ts'],
 '/rest/repeat-notification': ['server.ts'],
 '/rest/saveLoginIp': ['server.ts'],
 '/rest/track-order/:id': ['server.ts'],
 '/rest/user/authentication-details': ['server.ts'],
 '/rest/user/change-password': ['server.ts'],
 '/rest/user/data-export': ['server.ts'],
 '/rest/user/login': ['server.ts'],
 '/rest/user/reset-password': ['server.ts'],
 '/rest/user/security-question': ['server.ts'],
 '/rest/user/whoami': ['server.ts'],
 '/rest/wallet/balance': ['server.ts'],
 '/rest/web3/nftMintListen': ['server.ts'],
 '/rest/web3/nftUnlocked': ['server.ts'],
 '/rest/web3/submitKey': ['server.ts'],
 '/rest/web3/walletExploitAddress': ['server.ts'],
 '/rest/web3/walletNFTVerify': ['server.ts'],
 '/security.txt': ['server.ts'],
 '/snippets': ['server.ts'],
 '/snippets/:challenge': ['server.ts'],
 '/snippets/fixes': ['server.ts'],
 '/snippets/fixes/:key': ['server.ts'],
 '/snippets/verdict': ['server.ts'],
 '/solve/challenges/server-side': ['server.ts'],
 '/support/logs': ['server.ts'],
 '/support/logs/:file': ['server.ts'],
 '/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg': ['server.ts'],
 '/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us': ['server.ts'],
 '/token': ['routes/dataErasure.ts'],
 '/trustproxy': ['server.ts'],
 '/video': ['server.ts'],
 '/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility': ['server.ts'],
 '/{regex_param_1}/:file': ['server.ts']}
    assert js_usages_1.target_line_nums == {'routes/dataErasure.ts': {'()': [80]},
 'server.ts': {'()': [694], 'server.ts::program:readyCallback': [702]}}

    methods = js_usages_1._process_calls(methods)
    assert methods == {'file_names': {'routes/dataErasure.ts': {'resolved_methods': {"router.get('/',async(req:Request,res:Response,next:NextFunction):Promise<void>=>{\rconstloggedInUser=insecurity.authenticatedUsers.get(req.cookies.token)\rif(!loggedInUser){\rnext(newError('Blockedillegalactivityby'+req.socket.remoteAddress))\rreturn\r}\rconstemail=loggedInUser.data.email\r\rtry{\rconstanswer=awaitSecurityAnswerModel.findOne({\rinclude:[{\rmodel:UserModel,\rwhere:{email}\r}]\r})\rif(answer==null){\rthrownewError('Noanswerfound!')\r}\rconstquestion=awaitSecurityQuestionModel.findByPk(answer.SecurityQuestionId)\rif(question==null){\rthrownewError('Noquestionfound!')\r}\r\rres.render('dataErasureForm',{userEmail:email,securityQuestion:question.question})\r}catch(error){\rnext(error)\r}\r})": {'calls': [{'callName': 'get',
columnNumber': 0,
isExternal': None,
lineNumber': 18,
paramTypes': ['__ecma.String',

resolvedMethod': "router.get('/',async(req:Request,res:Response,next:NextFunction):Promise<void>=>{\r"
constloggedInUser=insecurity.authenticatedUsers.get(req.cookies.token)\r'
if(!loggedInUser){\r'
next(newError('Blockedillegalactivityby'+req.socket.remoteAddress))\r"
return\r'
}\r'
constemail=loggedInUser.data.email\r'
r'
try{\r'
constanswer=awaitSecurityAnswerModel.findOne({\r'
include:[{\r'
model:UserModel,\r'
where:{email}\r'
}]\r'
})\r'
if(answer==null){\r'
thrownewError('Noanswerfound!')\r"
}\r'
constquestion=awaitSecurityQuestionModel.findByPk(answer.SecurityQuestionId)\r'
if(question==null){\r'
thrownewError('Noquestionfound!')\r"
}\r'
r'
res.render('dataErasureForm',{userEmail:email,securityQuestion:question.question})\r"
}catch(error){\r'
next(error)\r'
}\r'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         '})',
returnType': 'ANY'}],
endpoints': ['/',
lockedillegalactivityby',
oanswerfound!',
oquestionfound!',
dataErasureForm'],
line_nos': [18]},
                                                               "router.post('/',async(req:Request<Record<string,unknown>,Record<string,unknown>,DataErasureRequestParams>,res:Response,next:NextFunction):Promise<void>=>{\rconstloggedInUser=insecurity.authenticatedUsers.get(req.cookies.token)\rif(!loggedInUser){\rnext(newError('Blockedillegalactivityby'+req.socket.remoteAddress))\rreturn\r}\r\rtry{\rawaitPrivacyRequestModel.create({\rUserId:loggedInUser.data.id,\rdeletionRequested:true\r})\r\rres.clearCookie('token')\rif(req.body.layout){\rconstfilePath:string=path.resolve(req.body.layout).toLowerCase()\rconstisForbiddenFile:boolean=(filePath.includes('ftp')||filePath.includes('ctf.key')||filePath.includes('encryptionkeys'))\rif(!isForbiddenFile){\rres.render('dataErasureResult',{\r...req.body\r},(error,html)=>{\rif(!html||error){\rnext(newError(error.message))\r}else{\r...": {'calls': [{'callName': 'post',
columnNumber': 0,
isExternal': None,
lineNumber': 54,
paramTypes': ['__ecma.String',

resolvedMethod': "router.post('/',async(req:Request<Record<string,unknown>,Record<string,unknown>,DataErasureRequestParams>,res:Response,next:NextFunction):Promise<void>=>{\r"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    'constloggedInUser=insecurity.authenticatedUsers.get(req.cookies.token)\r'
if(!loggedInUser){\r'
next(newError('Blockedillegalactivityby'+req.socket.remoteAddress))\r"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    'return\r'
}\r'
r'
try{\r'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    'awaitPrivacyRequestModel.create({\r'
serId:loggedInUser.data.id,\r'
deletionRequested:true\r'
})\r'
r'
res.clearCookie('token')\r"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    'if(req.body.layout){\r'
constfilePath:string=path.resolve(req.body.layout).toLowerCase()\r'
constisForbiddenFile:boolean=(filePath.includes('ftp')||filePath.includes('ctf.key')||filePath.includes('encryptionkeys'))\r"
if(!isForbiddenFile){\r'
res.render('dataErasureResult',{\r"
req.body\r'
},(error,html)=>{\r'
if(!html||error){\r'
next(newError(error.message))\r'
}else{\r'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    '...',
returnType': 'ANY'}],
endpoints': ['/',
lockedillegalactivityby',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     '/token',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     '/ftp',
ctf.key',
encryptionkeys',
dataErasureResult'],
line_nos': [54]}}},
                'server.ts': {'resolved_methods': {"app.delete('/api/Addresss/:id',security.appendUserId(),address.delAddressById())": {'calls': [{'callName': 'delete',
                                                                                                                                                   'columnNumber': 2,
                                                                                                                                                   'isExternal': True,
                                                                                                                                                   'lineNumber': 415,
                                                                                                                                                   'paramTypes': ['__ecma.String',
                                                                                                                                                                  'ANY',
                                                                                                                                                                  'ANY'],
                                                                                                                                                   'resolvedMethod': "app.delete('/api/Addresss/:id',security.appendUserId(),address.delAddressById())",
                                                                                                                                                   'returnType': 'ANY'}],
                                                                                                                                        'endpoints': ['/api/Addresss/:id'],
                                                                                                                                        'line_nos': [415]},
                                                   "app.delete('/api/Cards/:id',security.appendUserId(),payment.delPaymentMethodById())": {'calls': [{'callName': 'delete',
                                                                                                                                                      'columnNumber': 2,
                                                                                                                                                      'isExternal': True,
                                                                                                                                                      'lineNumber': 405,
                                                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                                                     'ANY',
                                                                                                                                                                     'ANY'],
                                                                                                                                                      'resolvedMethod': "app.delete('/api/Cards/:id',security.appendUserId(),payment.delPaymentMethodById())",
                                                                                                                                                      'returnType': 'ANY'}],
                                                                                                                                           'endpoints': ['/api/Cards/:id'],
                                                                                                                                           'line_nos': [405]},
                                                   "app.delete('/api/Products/:id',security.denyAll())": {'calls': [{'callName': 'delete',
                                                                                                                     'columnNumber': 2,
                                                                                                                     'isExternal': True,
                                                                                                                     'lineNumber': 340,
                                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                                    'express-jwt:expressJwt:<returnValue>'],
                                                                                                                     'resolvedMethod': "app.delete('/api/Products/:id',security.denyAll())",
                                                                                                                     'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                          'endpoints': ['/api/Products/:id'],
                                                                                                          'line_nos': [340]},
                                                   "app.delete('/api/Quantitys/:id',security.denyAll())": {'calls': [{'callName': 'delete',
                                                                                                                      'columnNumber': 2,
                                                                                                                      'isExternal': True,
                                                                                                                      'lineNumber': 393,
                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                     'express-jwt:expressJwt:<returnValue>'],
                                                                                                                      'resolvedMethod': "app.delete('/api/Quantitys/:id',security.denyAll())",
                                                                                                                      'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                           'endpoints': ['/api/Quantitys/:id'],
                                                                                                           'line_nos': [393]},
                                                   "app.delete('/api/Recycles/:id',security.denyAll())": {'calls': [{'callName': 'delete',
                                                                                                                     'columnNumber': 2,
                                                                                                                     'isExternal': True,
                                                                                                                     'lineNumber': 354,
                                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                                    'express-jwt:expressJwt:<returnValue>'],
                                                                                                                     'resolvedMethod': "app.delete('/api/Recycles/:id',security.denyAll())",
                                                                                                                     'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                          'endpoints': ['/api/Recycles/:id'],
                                                                                                          'line_nos': [354]},
                                                   "app.enable('trustproxy')": {'calls': [{'callName': 'enable',
                                                                                           'columnNumber': 2,
                                                                                           'isExternal': True,
                                                                                           'lineNumber': 312,
                                                                                           'paramTypes': ['__ecma.String'],
                                                                                           'resolvedMethod': "app.enable('trustproxy')",
                                                                                           'returnType': 'ANY'}],
                                                                                'endpoints': ['/trustproxy'],
                                                                                'line_nos': [312]},
                                                   "app.get('/api/Addresss',security.appendUserId(),address.getAddress())": {'calls': [{'callName': 'get',
                                                                                                                                        'columnNumber': 2,
                                                                                                                                        'isExternal': True,
                                                                                                                                        'lineNumber': 413,
                                                                                                                                        'paramTypes': ['__ecma.String',
                                                                                                                                                       'ANY',
                                                                                                                                                       'ANY'],
                                                                                                                                        'resolvedMethod': "app.get('/api/Addresss',security.appendUserId(),address.getAddress())",
                                                                                                                                        'returnType': 'ANY'}],
                                                                                                                             'endpoints': ['/api/Addresss'],
                                                                                                                             'line_nos': [413]},
                                                   "app.get('/api/Addresss/:id',security.appendUserId(),address.getAddressById())": {'calls': [{'callName': 'get',
                                                                                                                                                'columnNumber': 2,
                                                                                                                                                'isExternal': True,
                                                                                                                                                'lineNumber': 416,
                                                                                                                                                'paramTypes': ['__ecma.String',
                                                                                                                                                               'ANY',
                                                                                                                                                               'ANY'],
                                                                                                                                                'resolvedMethod': "app.get('/api/Addresss/:id',security.appendUserId(),address.getAddressById())",
                                                                                                                                                'returnType': 'ANY'}],
                                                                                                                                     'endpoints': ['/api/Addresss/:id'],
                                                                                                                                     'line_nos': [416]},
                                                   "app.get('/api/Cards',security.appendUserId(),payment.getPaymentMethods())": {'calls': [{'callName': 'get',
                                                                                                                                            'columnNumber': 2,
                                                                                                                                            'isExternal': True,
                                                                                                                                            'lineNumber': 403,
                                                                                                                                            'paramTypes': ['__ecma.String',
                                                                                                                                                           'ANY',
                                                                                                                                                           'ANY'],
                                                                                                                                            'resolvedMethod': "app.get('/api/Cards',security.appendUserId(),payment.getPaymentMethods())",
                                                                                                                                            'returnType': 'ANY'}],
                                                                                                                                 'endpoints': ['/api/Cards'],
                                                                                                                                 'line_nos': [403]},
                                                   "app.get('/api/Cards/:id',security.appendUserId(),payment.getPaymentMethodById())": {'calls': [{'callName': 'get',
                                                                                                                                                   'columnNumber': 2,
                                                                                                                                                   'isExternal': True,
                                                                                                                                                   'lineNumber': 406,
                                                                                                                                                   'paramTypes': ['__ecma.String',
                                                                                                                                                                  'ANY',
                                                                                                                                                                  'ANY'],
                                                                                                                                                   'resolvedMethod': "app.get('/api/Cards/:id',security.appendUserId(),payment.getPaymentMethodById())",
                                                                                                                                                   'returnType': 'ANY'}],
                                                                                                                                        'endpoints': ['/api/Cards/:id'],
                                                                                                                                        'line_nos': [406]},
                                                   "app.get('/api/Complaints',security.isAuthorized())": {'calls': [{'callName': 'get',
                                                                                                                     'columnNumber': 2,
                                                                                                                     'isExternal': True,
                                                                                                                     'lineNumber': 345,
                                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                                    'express-jwt:expressJwt:<returnValue>'],
                                                                                                                     'resolvedMethod': "app.get('/api/Complaints',security.isAuthorized())",
                                                                                                                     'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                          'endpoints': ['/api/Complaints'],
                                                                                                          'line_nos': [345]},
                                                   "app.get('/api/Deliverys',delivery.getDeliveryMethods())": {'calls': [{'callName': 'get',
                                                                                                                          'columnNumber': 2,
                                                                                                                          'isExternal': True,
                                                                                                                          'lineNumber': 417,
                                                                                                                          'paramTypes': ['__ecma.String',
                                                                                                                                         'ANY'],
                                                                                                                          'resolvedMethod': "app.get('/api/Deliverys',delivery.getDeliveryMethods())",
                                                                                                                          'returnType': 'ANY'}],
                                                                                                               'endpoints': ['/api/Deliverys'],
                                                                                                               'line_nos': [417]},
                                                   "app.get('/api/Deliverys/:id',delivery.getDeliveryMethod())": {'calls': [{'callName': 'get',
                                                                                                                             'columnNumber': 2,
                                                                                                                             'isExternal': True,
                                                                                                                             'lineNumber': 418,
                                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                                            'ANY'],
                                                                                                                             'resolvedMethod': "app.get('/api/Deliverys/:id',delivery.getDeliveryMethod())",
                                                                                                                             'returnType': 'ANY'}],
                                                                                                                  'endpoints': ['/api/Deliverys/:id'],
                                                                                                                  'line_nos': [418]},
                                                   "app.get('/api/PrivacyRequests',security.denyAll())": {'calls': [{'callName': 'get',
                                                                                                                     'columnNumber': 2,
                                                                                                                     'isExternal': True,
                                                                                                                     'lineNumber': 409,
                                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                                    'express-jwt:expressJwt:<returnValue>'],
                                                                                                                     'resolvedMethod': "app.get('/api/PrivacyRequests',security.denyAll())",
                                                                                                                     'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                          'endpoints': ['/api/PrivacyRequests'],
                                                                                                          'line_nos': [409]},
                                                   "app.get('/api/Recycles',recycles.blockRecycleItems())": {'calls': [{'callName': 'get',
                                                                                                                        'columnNumber': 2,
                                                                                                                        'isExternal': True,
                                                                                                                        'lineNumber': 349,
                                                                                                                        'paramTypes': ['__ecma.String',
                                                                                                                                       'ANY'],
                                                                                                                        'resolvedMethod': "app.get('/api/Recycles',recycles.blockRecycleItems())",
                                                                                                                        'returnType': 'ANY'}],
                                                                                                             'endpoints': ['/api/Recycles'],
                                                                                                             'line_nos': [349]},
                                                   "app.get('/api/Recycles/:id',recycles.getRecycleItem())": {'calls': [{'callName': 'get',
                                                                                                                         'columnNumber': 2,
                                                                                                                         'isExternal': True,
                                                                                                                         'lineNumber': 352,
                                                                                                                         'paramTypes': ['__ecma.String',
                                                                                                                                        'ANY'],
                                                                                                                         'resolvedMethod': "app.get('/api/Recycles/:id',recycles.getRecycleItem())",
                                                                                                                         'returnType': 'ANY'}],
                                                                                                              'endpoints': ['/api/Recycles/:id'],
                                                                                                              'line_nos': [352]},
                                                   "app.get('/api/SecurityAnswers',security.denyAll())": {'calls': [{'callName': 'get',
                                                                                                                     'columnNumber': 2,
                                                                                                                     'isExternal': True,
                                                                                                                     'lineNumber': 359,
                                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                                    'express-jwt:expressJwt:<returnValue>'],
                                                                                                                     'resolvedMethod': "app.get('/api/SecurityAnswers',security.denyAll())",
                                                                                                                     'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                          'endpoints': ['/api/SecurityAnswers'],
                                                                                                          'line_nos': [359]},
                                                   "app.get('/api/Users',security.isAuthorized())": {'calls': [{'callName': 'get',
                                                                                                                'columnNumber': 2,
                                                                                                                'isExternal': True,
                                                                                                                'lineNumber': 332,
                                                                                                                'paramTypes': ['__ecma.String',
                                                                                                                               'express-jwt:expressJwt:<returnValue>'],
                                                                                                                'resolvedMethod': "app.get('/api/Users',security.isAuthorized())",
                                                                                                                'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                     'endpoints': ['/api/Users'],
                                                                                                     'line_nos': [332]},
                                                   "app.get('/metrics',metrics.serveMetrics())": {'calls': [{'callName': 'get',
                                                                                                             'columnNumber': 0,
                                                                                                             'isExternal': True,
                                                                                                             'lineNumber': 678,
                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                            'ANY'],
                                                                                                             'resolvedMethod': "app.get('/metrics',metrics.serveMetrics())",
                                                                                                             'returnType': 'ANY'}],
                                                                                                  'endpoints': ['/metrics'],
                                                                                                  'line_nos': [678]},
                                                   "app.get('/profile',security.updateAuthenticatedUsers(),userProfile())": {'calls': [{'callName': 'get',
                                                                                                                                        'columnNumber': 2,
                                                                                                                                        'isExternal': True,
                                                                                                                                        'lineNumber': 620,
                                                                                                                                        'paramTypes': ['__ecma.String',
                                                                                                                                                       'ANY',
                                                                                                                                                       'ANY'],
                                                                                                                                        'resolvedMethod': "app.get('/profile',security.updateAuthenticatedUsers(),userProfile())",
                                                                                                                                        'returnType': 'ANY'}],
                                                                                                                             'endpoints': ['/profile'],
                                                                                                                             'line_nos': [620]},
                                                   "app.get('/promotion',videoHandler.promotionVideo())": {'calls': [{'callName': 'get',
                                                                                                                      'columnNumber': 2,
                                                                                                                      'isExternal': True,
                                                                                                                      'lineNumber': 616,
                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                     'ANY'],
                                                                                                                      'resolvedMethod': "app.get('/promotion',videoHandler.promotionVideo())",
                                                                                                                      'returnType': 'ANY'}],
                                                                                                           'endpoints': ['/promotion'],
                                                                                                           'line_nos': [616]},
                                                   "app.get('/redirect',redirect())": {'calls': [{'callName': 'get',
                                                                                                  'columnNumber': 2,
                                                                                                  'isExternal': True,
                                                                                                  'lineNumber': 613,
                                                                                                  'paramTypes': ['__ecma.String',
                                                                                                                 'ANY'],
                                                                                                  'resolvedMethod': "app.get('/redirect',redirect())",
                                                                                                  'returnType': 'ANY'}],
                                                                                       'endpoints': ['/redirect'],
                                                                                       'line_nos': [613]},
                                                   "app.get('/rest/2fa/status',security.isAuthorized(),twoFactorAuth.status())": {'calls': [{'callName': 'get',
                                                                                                                                             'columnNumber': 2,
                                                                                                                                             'isExternal': True,
                                                                                                                                             'lineNumber': 427,
                                                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                                                            'express-jwt:expressJwt:<returnValue>',
                                                                                                                                                            'routes/2fa.ts::program:status'],
                                                                                                                                             'resolvedMethod': "app.get('/rest/2fa/status',security.isAuthorized(),twoFactorAuth.status())",
                                                                                                                                             'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                                                  'endpoints': ['/rest/2fa/status'],
                                                                                                                                  'line_nos': [427]},
                                                   "app.get('/rest/admin/application-configuration',appConfiguration())": {'calls': [{'callName': 'get',
                                                                                                                                      'columnNumber': 2,
                                                                                                                                      'isExternal': True,
                                                                                                                                      'lineNumber': 561,
                                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                                     'ANY'],
                                                                                                                                      'resolvedMethod': "app.get('/rest/admin/application-configuration',appConfiguration())",
                                                                                                                                      'returnType': 'ANY'}],
                                                                                                                           'endpoints': ['/rest/admin/application-configuration'],
                                                                                                                           'line_nos': [561]},
                                                   "app.get('/rest/admin/application-version',appVersion())": {'calls': [{'callName': 'get',
                                                                                                                          'columnNumber': 2,
                                                                                                                          'isExternal': True,
                                                                                                                          'lineNumber': 560,
                                                                                                                          'paramTypes': ['__ecma.String',
                                                                                                                                         'ANY'],
                                                                                                                          'resolvedMethod': "app.get('/rest/admin/application-version',appVersion())",
                                                                                                                          'returnType': 'ANY'},
                                                                                                                         {'callName': 'get',
                                                                                                                          'columnNumber': 2,
                                                                                                                          'isExternal': True,
                                                                                                                          'lineNumber': 569,
                                                                                                                          'paramTypes': ['__ecma.String',
                                                                                                                                         'ANY'],
                                                                                                                          'resolvedMethod': "app.get('/rest/admin/application-version',appVersion())",
                                                                                                                          'returnType': 'ANY'}],
                                                                                                               'endpoints': ['/rest/admin/application-version'],
                                                                                                               'line_nos': [560,
                                                                                                                            569]},
                                                   "app.get('/rest/basket/:id',basket())": {'calls': [{'callName': 'get',
                                                                                                       'columnNumber': 2,
                                                                                                       'isExternal': True,
                                                                                                       'lineNumber': 557,
                                                                                                       'paramTypes': ['__ecma.String',
                                                                                                                      'ANY'],
                                                                                                       'resolvedMethod': "app.get('/rest/basket/:id',basket())",
                                                                                                       'returnType': 'ANY'}],
                                                                                            'endpoints': ['/rest/basket/:id'],
                                                                                            'line_nos': [557]},
                                                   "app.get('/rest/captcha',captcha())": {'calls': [{'callName': 'get',
                                                                                                     'columnNumber': 2,
                                                                                                     'isExternal': True,
                                                                                                     'lineNumber': 570,
                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                    'ANY'],
                                                                                                     'resolvedMethod': "app.get('/rest/captcha',captcha())",
                                                                                                     'returnType': 'ANY'}],
                                                                                          'endpoints': ['/rest/captcha'],
                                                                                          'line_nos': [570]},
                                                   "app.get('/rest/chatbot/status',chatbot.status())": {'calls': [{'callName': 'get',
                                                                                                                   'columnNumber': 2,
                                                                                                                   'isExternal': True,
                                                                                                                   'lineNumber': 586,
                                                                                                                   'paramTypes': ['__ecma.String',
                                                                                                                                  'ANY'],
                                                                                                                   'resolvedMethod': "app.get('/rest/chatbot/status',chatbot.status())",
                                                                                                                   'returnType': 'ANY'}],
                                                                                                        'endpoints': ['/rest/chatbot/status'],
                                                                                                        'line_nos': [586]},
                                                   "app.get('/rest/continue-code',continueCode.continueCode())": {'calls': [{'callName': 'get',
                                                                                                                             'columnNumber': 2,
                                                                                                                             'isExternal': True,
                                                                                                                             'lineNumber': 563,
                                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                                            'ANY'],
                                                                                                                             'resolvedMethod': "app.get('/rest/continue-code',continueCode.continueCode())",
                                                                                                                             'returnType': 'ANY'}],
                                                                                                                  'endpoints': ['/rest/continue-code'],
                                                                                                                  'line_nos': [563]},
                                                   "app.get('/rest/continue-code-findIt',continueCode.continueCodeFindIt())": {'calls': [{'callName': 'get',
                                                                                                                                          'columnNumber': 2,
                                                                                                                                          'isExternal': True,
                                                                                                                                          'lineNumber': 564,
                                                                                                                                          'paramTypes': ['__ecma.String',
                                                                                                                                                         'ANY'],
                                                                                                                                          'resolvedMethod': "app.get('/rest/continue-code-findIt',continueCode.continueCodeFindIt())",
                                                                                                                                          'returnType': 'ANY'}],
                                                                                                                               'endpoints': ['/rest/continue-code-findIt'],
                                                                                                                               'line_nos': [564]},
                                                   "app.get('/rest/continue-code-fixIt',continueCode.continueCodeFixIt())": {'calls': [{'callName': 'get',
                                                                                                                                        'columnNumber': 2,
                                                                                                                                        'isExternal': True,
                                                                                                                                        'lineNumber': 565,
                                                                                                                                        'paramTypes': ['__ecma.String',
                                                                                                                                                       'ANY'],
                                                                                                                                        'resolvedMethod': "app.get('/rest/continue-code-fixIt',continueCode.continueCodeFixIt())",
                                                                                                                                        'returnType': 'ANY'}],
                                                                                                                             'endpoints': ['/rest/continue-code-fixIt'],
                                                                                                                             'line_nos': [565]},
                                                   "app.get('/rest/country-mapping',countryMapping())": {'calls': [{'callName': 'get',
                                                                                                                    'columnNumber': 2,
                                                                                                                    'isExternal': True,
                                                                                                                    'lineNumber': 573,
                                                                                                                    'paramTypes': ['__ecma.String',
                                                                                                                                   'ANY'],
                                                                                                                    'resolvedMethod': "app.get('/rest/country-mapping',countryMapping())",
                                                                                                                    'returnType': 'ANY'}],
                                                                                                         'endpoints': ['/rest/country-mapping'],
                                                                                                         'line_nos': [573]},
                                                   "app.get('/rest/deluxe-membership',deluxe.deluxeMembershipStatus())": {'calls': [{'callName': 'get',
                                                                                                                                     'columnNumber': 2,
                                                                                                                                     'isExternal': True,
                                                                                                                                     'lineNumber': 583,
                                                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                                                    'ANY'],
                                                                                                                                     'resolvedMethod': "app.get('/rest/deluxe-membership',deluxe.deluxeMembershipStatus())",
                                                                                                                                     'returnType': 'ANY'}],
                                                                                                                          'endpoints': ['/rest/deluxe-membership'],
                                                                                                                          'line_nos': [583]},
                                                   "app.get('/rest/image-captcha',imageCaptcha())": {'calls': [{'callName': 'get',
                                                                                                                'columnNumber': 2,
                                                                                                                'isExternal': True,
                                                                                                                'lineNumber': 571,
                                                                                                                'paramTypes': ['__ecma.String',
                                                                                                                               'ANY'],
                                                                                                                'resolvedMethod': "app.get('/rest/image-captcha',imageCaptcha())",
                                                                                                                'returnType': 'ANY'}],
                                                                                                     'endpoints': ['/rest/image-captcha'],
                                                                                                     'line_nos': [571]},
                                                   "app.get('/rest/languages',languageList())": {'calls': [{'callName': 'get',
                                                                                                            'columnNumber': 2,
                                                                                                            'isExternal': True,
                                                                                                            'lineNumber': 577,
                                                                                                            'paramTypes': ['__ecma.String',
                                                                                                                           'ANY'],
                                                                                                            'resolvedMethod': "app.get('/rest/languages',languageList())",
                                                                                                            'returnType': 'ANY'}],
                                                                                                 'endpoints': ['/rest/languages'],
                                                                                                 'line_nos': [577]},
                                                   "app.get('/rest/memories',memory.getMemories())": {'calls': [{'callName': 'get',
                                                                                                                 'columnNumber': 2,
                                                                                                                 'isExternal': True,
                                                                                                                 'lineNumber': 585,
                                                                                                                 'paramTypes': ['__ecma.String',
                                                                                                                                'ANY'],
                                                                                                                 'resolvedMethod': "app.get('/rest/memories',memory.getMemories())",
                                                                                                                 'returnType': 'ANY'}],
                                                                                                      'endpoints': ['/rest/memories'],
                                                                                                      'line_nos': [585]},
                                                   "app.get('/rest/order-history',orderHistory.orderHistory())": {'calls': [{'callName': 'get',
                                                                                                                             'columnNumber': 2,
                                                                                                                             'isExternal': True,
                                                                                                                             'lineNumber': 578,
                                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                                            'ANY'],
                                                                                                                             'resolvedMethod': "app.get('/rest/order-history',orderHistory.orderHistory())",
                                                                                                                             'returnType': 'ANY'}],
                                                                                                                  'endpoints': ['/rest/order-history'],
                                                                                                                  'line_nos': [578]},
                                                   "app.get('/rest/order-history/orders',security.isAccounting(),orderHistory.allOrders())": {'calls': [{'callName': 'get',
                                                                                                                                                         'columnNumber': 2,
                                                                                                                                                         'isExternal': True,
                                                                                                                                                         'lineNumber': 579,
                                                                                                                                                         'paramTypes': ['__ecma.String',
                                                                                                                                                                        'ANY',
                                                                                                                                                                        'ANY'],
                                                                                                                                                         'resolvedMethod': "app.get('/rest/order-history/orders',security.isAccounting(),orderHistory.allOrders())",
                                                                                                                                                         'returnType': 'ANY'}],
                                                                                                                                              'endpoints': ['/rest/order-history/orders'],
                                                                                                                                              'line_nos': [579]},
                                                   "app.get('/rest/products/:id/reviews',showProductReviews())": {'calls': [{'callName': 'get',
                                                                                                                             'columnNumber': 2,
                                                                                                                             'isExternal': True,
                                                                                                                             'lineNumber': 589,
                                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                                            'ANY'],
                                                                                                                             'resolvedMethod': "app.get('/rest/products/:id/reviews',showProductReviews())",
                                                                                                                             'returnType': 'ANY'}],
                                                                                                                  'endpoints': ['/rest/products/:id/reviews'],
                                                                                                                  'line_nos': [589]},
                                                   "app.get('/rest/products/search',search())": {'calls': [{'callName': 'get',
                                                                                                            'columnNumber': 2,
                                                                                                            'isExternal': True,
                                                                                                            'lineNumber': 556,
                                                                                                            'paramTypes': ['__ecma.String',
                                                                                                                           'ANY'],
                                                                                                            'resolvedMethod': "app.get('/rest/products/search',search())",
                                                                                                            'returnType': 'ANY'}],
                                                                                                 'endpoints': ['/rest/products/search'],
                                                                                                 'line_nos': [556]},
                                                   "app.get('/rest/repeat-notification',repeatNotification())": {'calls': [{'callName': 'get',
                                                                                                                            'columnNumber': 2,
                                                                                                                            'isExternal': True,
                                                                                                                            'lineNumber': 562,
                                                                                                                            'paramTypes': ['__ecma.String',
                                                                                                                                           'ANY'],
                                                                                                                            'resolvedMethod': "app.get('/rest/repeat-notification',repeatNotification())",
                                                                                                                            'returnType': 'ANY'}],
                                                                                                                 'endpoints': ['/rest/repeat-notification'],
                                                                                                                 'line_nos': [562]},
                                                   "app.get('/rest/saveLoginIp',saveLoginIp())": {'calls': [{'callName': 'get',
                                                                                                             'columnNumber': 2,
                                                                                                             'isExternal': True,
                                                                                                             'lineNumber': 574,
                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                            'ANY'],
                                                                                                             'resolvedMethod': "app.get('/rest/saveLoginIp',saveLoginIp())",
                                                                                                             'returnType': 'ANY'}],
                                                                                                  'endpoints': ['/rest/saveLoginIp'],
                                                                                                  'line_nos': [574]},
                                                   "app.get('/rest/track-order/:id',trackOrder())": {'calls': [{'callName': 'get',
                                                                                                                'columnNumber': 2,
                                                                                                                'isExternal': True,
                                                                                                                'lineNumber': 572,
                                                                                                                'paramTypes': ['__ecma.String',
                                                                                                                               'ANY'],
                                                                                                                'resolvedMethod': "app.get('/rest/track-order/:id',trackOrder())",
                                                                                                                'returnType': 'ANY'}],
                                                                                                     'endpoints': ['/rest/track-order/:id'],
                                                                                                     'line_nos': [572]},
                                                   "app.get('/rest/user/authentication-details',authenticatedUsers())": {'calls': [{'callName': 'get',
                                                                                                                                    'columnNumber': 2,
                                                                                                                                    'isExternal': True,
                                                                                                                                    'lineNumber': 555,
                                                                                                                                    'paramTypes': ['__ecma.String',
                                                                                                                                                   'ANY'],
                                                                                                                                    'resolvedMethod': "app.get('/rest/user/authentication-details',authenticatedUsers())",
                                                                                                                                    'returnType': 'ANY'}],
                                                                                                                         'endpoints': ['/rest/user/authentication-details'],
                                                                                                                         'line_nos': [555]},
                                                   "app.get('/rest/user/change-password',changePassword())": {'calls': [{'callName': 'get',
                                                                                                                         'columnNumber': 2,
                                                                                                                         'isExternal': True,
                                                                                                                         'lineNumber': 551,
                                                                                                                         'paramTypes': ['__ecma.String',
                                                                                                                                        'ANY'],
                                                                                                                         'resolvedMethod': "app.get('/rest/user/change-password',changePassword())",
                                                                                                                         'returnType': 'ANY'}],
                                                                                                              'endpoints': ['/rest/user/change-password'],
                                                                                                              'line_nos': [551]},
                                                   "app.get('/rest/user/security-question',securityQuestion())": {'calls': [{'callName': 'get',
                                                                                                                             'columnNumber': 2,
                                                                                                                             'isExternal': True,
                                                                                                                             'lineNumber': 553,
                                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                                            'ANY'],
                                                                                                                             'resolvedMethod': "app.get('/rest/user/security-question',securityQuestion())",
                                                                                                                             'returnType': 'ANY'}],
                                                                                                                  'endpoints': ['/rest/user/security-question'],
                                                                                                                  'line_nos': [553]},
                                                   "app.get('/rest/user/whoami',security.updateAuthenticatedUsers(),currentUser())": {'calls': [{'callName': 'get',
                                                                                                                                                 'columnNumber': 2,
                                                                                                                                                 'isExternal': True,
                                                                                                                                                 'lineNumber': 554,
                                                                                                                                                 'paramTypes': ['__ecma.String',
                                                                                                                                                                'ANY',
                                                                                                                                                                'ANY'],
                                                                                                                                                 'resolvedMethod': "app.get('/rest/user/whoami',security.updateAuthenticatedUsers(),currentUser())",
                                                                                                                                                 'returnType': 'ANY'}],
                                                                                                                                      'endpoints': ['/rest/user/whoami'],
                                                                                                                                      'line_nos': [554]},
                                                   "app.get('/rest/wallet/balance',security.appendUserId(),wallet.getWalletBalance())": {'calls': [{'callName': 'get',
                                                                                                                                                    'columnNumber': 2,
                                                                                                                                                    'isExternal': True,
                                                                                                                                                    'lineNumber': 581,
                                                                                                                                                    'paramTypes': ['__ecma.String',
                                                                                                                                                                   'ANY',
                                                                                                                                                                   'ANY'],
                                                                                                                                                    'resolvedMethod': "app.get('/rest/wallet/balance',security.appendUserId(),wallet.getWalletBalance())",
                                                                                                                                                    'returnType': 'ANY'}],
                                                                                                                                         'endpoints': ['/rest/wallet/balance'],
                                                                                                                                         'line_nos': [581]},
                                                   "app.get('/rest/web3/nftMintListen',nftMint.nftMintListener())": {'calls': [{'callName': 'get',
                                                                                                                                'columnNumber': 2,
                                                                                                                                'isExternal': True,
                                                                                                                                'lineNumber': 597,
                                                                                                                                'paramTypes': ['__ecma.String',
                                                                                                                                               'ANY'],
                                                                                                                                'resolvedMethod': "app.get('/rest/web3/nftMintListen',nftMint.nftMintListener())",
                                                                                                                                'returnType': 'ANY'}],
                                                                                                                     'endpoints': ['/rest/web3/nftMintListen'],
                                                                                                                     'line_nos': [597]},
                                                   "app.get('/rest/web3/nftUnlocked',checkKeys.nftUnlocked())": {'calls': [{'callName': 'get',
                                                                                                                            'columnNumber': 2,
                                                                                                                            'isExternal': True,
                                                                                                                            'lineNumber': 596,
                                                                                                                            'paramTypes': ['__ecma.String',
                                                                                                                                           'ANY'],
                                                                                                                            'resolvedMethod': "app.get('/rest/web3/nftUnlocked',checkKeys.nftUnlocked())",
                                                                                                                            'returnType': 'ANY'}],
                                                                                                                 'endpoints': ['/rest/web3/nftUnlocked'],
                                                                                                                 'line_nos': [596]},
                                                   "app.get('/snippets',vulnCodeSnippet.serveChallengesWithCodeSnippet())": {'calls': [{'callName': 'get',
                                                                                                                                        'columnNumber': 2,
                                                                                                                                        'isExternal': True,
                                                                                                                                        'lineNumber': 624,
                                                                                                                                        'paramTypes': ['__ecma.String',
                                                                                                                                                       'ANY'],
                                                                                                                                        'resolvedMethod': "app.get('/snippets',vulnCodeSnippet.serveChallengesWithCodeSnippet())",
                                                                                                                                        'returnType': 'ANY'}],
                                                                                                                             'endpoints': ['/snippets'],
                                                                                                                             'line_nos': [624]},
                                                   "app.get('/snippets/:challenge',vulnCodeSnippet.serveCodeSnippet())": {'calls': [{'callName': 'get',
                                                                                                                                     'columnNumber': 2,
                                                                                                                                     'isExternal': True,
                                                                                                                                     'lineNumber': 625,
                                                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                                                    'ANY'],
                                                                                                                                     'resolvedMethod': "app.get('/snippets/:challenge',vulnCodeSnippet.serveCodeSnippet())",
                                                                                                                                     'returnType': 'ANY'}],
                                                                                                                          'endpoints': ['/snippets/:challenge'],
                                                                                                                          'line_nos': [625]},
                                                   "app.get('/snippets/fixes/:key',vulnCodeFixes.serveCodeFixes())": {'calls': [{'callName': 'get',
                                                                                                                                 'columnNumber': 2,
                                                                                                                                 'isExternal': True,
                                                                                                                                 'lineNumber': 627,
                                                                                                                                 'paramTypes': ['__ecma.String',
                                                                                                                                                'ANY'],
                                                                                                                                 'resolvedMethod': "app.get('/snippets/fixes/:key',vulnCodeFixes.serveCodeFixes())",
                                                                                                                                 'returnType': 'ANY'}],
                                                                                                                      'endpoints': ['/snippets/fixes/:key'],
                                                                                                                      'line_nos': [627]},
                                                   "app.get('/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg',easterEgg())": {'calls': [{'callName': 'get',
                                                                                                                                                             'columnNumber': 2,
                                                                                                                                                             'isExternal': True,
                                                                                                                                                             'lineNumber': 605,
                                                                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                                                                            'ANY'],
                                                                                                                                                             'resolvedMethod': "app.get('/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg',easterEgg())",
                                                                                                                                                             'returnType': 'ANY'}],
                                                                                                                                                  'endpoints': ['/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg'],
                                                                                                                                                  'line_nos': [605]},
                                                   "app.get('/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us',premiumReward())": {'calls': [{'callName': 'get',
                                                                                                                                                                                                      'columnNumber': 2,
                                                                                                                                                                                                      'isExternal': True,
                                                                                                                                                                                                      'lineNumber': 606,
                                                                                                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                     'ANY'],
                                                                                                                                                                                                      'resolvedMethod': "app.get('/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us',premiumReward())",
                                                                                                                                                                                                      'returnType': 'ANY'}],
                                                                                                                                                                                           'endpoints': ['/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us'],
                                                                                                                                                                                           'line_nos': [606]},
                                                   "app.get('/video',videoHandler.getVideo())": {'calls': [{'callName': 'get',
                                                                                                            'columnNumber': 2,
                                                                                                            'isExternal': True,
                                                                                                            'lineNumber': 617,
                                                                                                            'paramTypes': ['__ecma.String',
                                                                                                                           'ANY'],
                                                                                                            'resolvedMethod': "app.get('/video',videoHandler.getVideo())",
                                                                                                            'returnType': 'ANY'}],
                                                                                                 'endpoints': ['/video'],
                                                                                                 'line_nos': [617]},
                                                   "app.get('/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility',privacyPolicyProof())": {'calls': [{'callName': 'get',
                                                                                                                                                                              'columnNumber': 2,
                                                                                                                                                                              'isExternal': True,
                                                                                                                                                                              'lineNumber': 607,
                                                                                                                                                                              'paramTypes': ['__ecma.String',
                                                                                                                                                                                             'ANY'],
                                                                                                                                                                              'resolvedMethod': "app.get('/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility',privacyPolicyProof())",
                                                                                                                                                                              'returnType': 'ANY'}],
                                                                                                                                                                   'endpoints': ['/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility'],
                                                                                                                                                                   'line_nos': [607]},
                                                   "app.get(['/.well-known/security.txt','/security.txt'],verify.accessControlChallenges())": {'calls': [{'callName': 'get',
                                                                                                                                                          'columnNumber': 2,
                                                                                                                                                          'isExternal': True,
                                                                                                                                                          'lineNumber': 196,
                                                                                                                                                          'paramTypes': ['ANY',
                                                                                                                                                                         'ANY'],
                                                                                                                                                          'resolvedMethod': "app.get(['/.well-known/security.txt','/security.txt'],verify.accessControlChallenges())",
                                                                                                                                                          'returnType': 'ANY'}],
                                                                                                                                               'endpoints': ['/.well-known/security.txt',
                                                                                                                                                             '/security.txt'],
                                                                                                                                               'line_nos': [196]},
                                                   "app.patch('/rest/products/reviews',security.isAuthorized(),updateProductReviews())": {'calls': [{'callName': 'patch',
                                                                                                                                                     'columnNumber': 2,
                                                                                                                                                     'isExternal': True,
                                                                                                                                                     'lineNumber': 591,
                                                                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                                                                    'express-jwt:expressJwt:<returnValue>',
                                                                                                                                                                    'ANY'],
                                                                                                                                                     'resolvedMethod': "app.patch('/rest/products/reviews',security.isAuthorized(),updateProductReviews())",
                                                                                                                                                     'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                                                          'endpoints': ['/rest/products/reviews'],
                                                                                                                                          'line_nos': [591]},
                                                   "app.post('/api/Addresss',security.appendUserId())": {'calls': [{'callName': 'post',
                                                                                                                    'columnNumber': 2,
                                                                                                                    'isExternal': True,
                                                                                                                    'lineNumber': 412,
                                                                                                                    'paramTypes': ['__ecma.String',
                                                                                                                                   'ANY'],
                                                                                                                    'resolvedMethod': "app.post('/api/Addresss',security.appendUserId())",
                                                                                                                    'returnType': 'ANY'}],
                                                                                                         'endpoints': ['/api/Addresss'],
                                                                                                         'line_nos': [412]},
                                                   "app.post('/api/BasketItems',security.appendUserId(),basketItems.quantityCheckBeforeBasketItemAddition(),basketItems.addBasketItem())": {'calls': [{'callName': 'post',
                                                                                                                                                                                                       'columnNumber': 2,
                                                                                                                                                                                                       'isExternal': True,
                                                                                                                                                                                                       'lineNumber': 391,
                                                                                                                                                                                                       'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                      'ANY',
                                                                                                                                                                                                                      'ANY',
                                                                                                                                                                                                                      'ANY'],
                                                                                                                                                                                                       'resolvedMethod': "app.post('/api/BasketItems',security.appendUserId(),basketItems.quantityCheckBeforeBasketItemAddition(),basketItems.addBasketItem())",
                                                                                                                                                                                                       'returnType': 'ANY'}],
                                                                                                                                                                                            'endpoints': ['/api/BasketItems'],
                                                                                                                                                                                            'line_nos': [391]},
                                                   "app.post('/api/Cards',security.appendUserId())": {'calls': [{'callName': 'post',
                                                                                                                 'columnNumber': 2,
                                                                                                                 'isExternal': True,
                                                                                                                 'lineNumber': 402,
                                                                                                                 'paramTypes': ['__ecma.String',
                                                                                                                                'ANY'],
                                                                                                                 'resolvedMethod': "app.post('/api/Cards',security.appendUserId())",
                                                                                                                 'returnType': 'ANY'}],
                                                                                                      'endpoints': ['/api/Cards'],
                                                                                                      'line_nos': [402]},
                                                   "app.post('/api/Challenges',security.denyAll())": {'calls': [{'callName': 'post',
                                                                                                                 'columnNumber': 2,
                                                                                                                 'isExternal': True,
                                                                                                                 'lineNumber': 342,
                                                                                                                 'paramTypes': ['__ecma.String',
                                                                                                                                'express-jwt:expressJwt:<returnValue>'],
                                                                                                                 'resolvedMethod': "app.post('/api/Challenges',security.denyAll())",
                                                                                                                 'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                      'endpoints': ['/api/Challenges'],
                                                                                                      'line_nos': [342]},
                                                   "app.post('/api/Complaints',security.isAuthorized())": {'calls': [{'callName': 'post',
                                                                                                                      'columnNumber': 2,
                                                                                                                      'isExternal': True,
                                                                                                                      'lineNumber': 346,
                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                     'express-jwt:expressJwt:<returnValue>'],
                                                                                                                      'resolvedMethod': "app.post('/api/Complaints',security.isAuthorized())",
                                                                                                                      'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                           'endpoints': ['/api/Complaints'],
                                                                                                           'line_nos': [346]},
                                                   "app.post('/api/Feedbacks',captcha.verifyCaptcha())": {'calls': [{'callName': 'post',
                                                                                                                     'columnNumber': 2,
                                                                                                                     'isExternal': True,
                                                                                                                     'lineNumber': 368,
                                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                                    'ANY'],
                                                                                                                     'resolvedMethod': "app.post('/api/Feedbacks',captcha.verifyCaptcha())",
                                                                                                                     'returnType': 'ANY'}],
                                                                                                          'endpoints': ['/api/Feedbacks'],
                                                                                                          'line_nos': [368]},
                                                   "app.post('/api/Feedbacks',verify.captchaBypassChallenge())": {'calls': [{'callName': 'post',
                                                                                                                             'columnNumber': 2,
                                                                                                                             'isExternal': True,
                                                                                                                             'lineNumber': 370,
                                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                                            'ANY'],
                                                                                                                             'resolvedMethod': "app.post('/api/Feedbacks',verify.captchaBypassChallenge())",
                                                                                                                             'returnType': 'ANY'}],
                                                                                                                  'endpoints': ['/api/Feedbacks'],
                                                                                                                  'line_nos': [370]},
                                                   "app.post('/api/Feedbacks',verify.forgedFeedbackChallenge())": {'calls': [{'callName': 'post',
                                                                                                                              'columnNumber': 2,
                                                                                                                              'isExternal': True,
                                                                                                                              'lineNumber': 366,
                                                                                                                              'paramTypes': ['__ecma.String',
                                                                                                                                             'ANY'],
                                                                                                                              'resolvedMethod': "app.post('/api/Feedbacks',verify.forgedFeedbackChallenge())",
                                                                                                                              'returnType': 'ANY'}],
                                                                                                                   'endpoints': ['/api/Feedbacks'],
                                                                                                                   'line_nos': [366]},
                                                   "app.post('/api/PrivacyRequests',security.isAuthorized())": {'calls': [{'callName': 'post',
                                                                                                                           'columnNumber': 2,
                                                                                                                           'isExternal': True,
                                                                                                                           'lineNumber': 408,
                                                                                                                           'paramTypes': ['__ecma.String',
                                                                                                                                          'express-jwt:expressJwt:<returnValue>'],
                                                                                                                           'resolvedMethod': "app.post('/api/PrivacyRequests',security.isAuthorized())",
                                                                                                                           'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                                'endpoints': ['/api/PrivacyRequests'],
                                                                                                                'line_nos': [408]},
                                                   "app.post('/api/Products',security.isAuthorized())": {'calls': [{'callName': 'post',
                                                                                                                    'columnNumber': 2,
                                                                                                                    'isExternal': True,
                                                                                                                    'lineNumber': 338,
                                                                                                                    'paramTypes': ['__ecma.String',
                                                                                                                                   'express-jwt:expressJwt:<returnValue>'],
                                                                                                                    'resolvedMethod': "app.post('/api/Products',security.isAuthorized())",
                                                                                                                    'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                         'endpoints': ['/api/Products'],
                                                                                                         'line_nos': [338]},
                                                   "app.post('/api/Quantitys',security.denyAll())": {'calls': [{'callName': 'post',
                                                                                                                'columnNumber': 2,
                                                                                                                'isExternal': True,
                                                                                                                'lineNumber': 394,
                                                                                                                'paramTypes': ['__ecma.String',
                                                                                                                               'express-jwt:expressJwt:<returnValue>'],
                                                                                                                'resolvedMethod': "app.post('/api/Quantitys',security.denyAll())",
                                                                                                                'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                     'endpoints': ['/api/Quantitys'],
                                                                                                     'line_nos': [394]},
                                                   "app.post('/api/Recycles',security.isAuthorized())": {'calls': [{'callName': 'post',
                                                                                                                    'columnNumber': 2,
                                                                                                                    'isExternal': True,
                                                                                                                    'lineNumber': 350,
                                                                                                                    'paramTypes': ['__ecma.String',
                                                                                                                                   'express-jwt:expressJwt:<returnValue>'],
                                                                                                                    'resolvedMethod': "app.post('/api/Recycles',security.isAuthorized())",
                                                                                                                    'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                         'endpoints': ['/api/Recycles'],
                                                                                                         'line_nos': [350]},
                                                   "app.post('/api/SecurityQuestions',security.denyAll())": {'calls': [{'callName': 'post',
                                                                                                                        'columnNumber': 2,
                                                                                                                        'isExternal': True,
                                                                                                                        'lineNumber': 356,
                                                                                                                        'paramTypes': ['__ecma.String',
                                                                                                                                       'express-jwt:expressJwt:<returnValue>'],
                                                                                                                        'resolvedMethod': "app.post('/api/SecurityQuestions',security.denyAll())",
                                                                                                                        'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                             'endpoints': ['/api/SecurityQuestions'],
                                                                                                             'line_nos': [356]},
                                                   "app.post('/api/Users',(req:Request,res:Response,next:NextFunction)=>{\rif(req.body.email!==undefined&&req.body.password!==undefined&&req.body.passwordRepeat!==undefined){\rif(req.body.email.length!==0&&req.body.password.length!==0){\rreq.body.email=req.body.email.trim()\rreq.body.password=req.body.password.trim()\rreq.body.passwordRepeat=req.body.passwordRepeat.trim()\r}else{\rres.status(400).send(res.__('Invalidemail/passwordcannotbeempty'))\r}\r}\rnext()\r})": {'calls': [{'callName': 'post',
columnNumber': 2,
isExternal': True,
lineNumber': 372,
paramTypes': ['__ecma.String',

resolvedMethod': "app.post('/api/Users',(req:Request,res:Response,next:NextFunction)=>{\r"
if(req.body.email!==undefined&&req.body.password!==undefined&&req.body.passwordRepeat!==undefined){\r'
if(req.body.email.length!==0&&req.body.password.length!==0){\r'
req.body.email=req.body.email.trim()\r'
req.body.password=req.body.password.trim()\r'
req.body.passwordRepeat=req.body.passwordRepeat.trim()\r'
}else{\r'
res.status(400).send(res.__('Invalidemail/passwordcannotbeempty'))\r"
}\r'
}\r'
next()\r'
})',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   'returnType': 'ANY'}],
endpoints': ['/api/Users',
nvalidemail/passwordcannotbeempty'],
line_nos': [372]},
                                                   "app.post('/api/Users',verify.emptyUserRegistration())": {'calls': [{'callName': 'post',
                                                                                                                        'columnNumber': 2,
                                                                                                                        'isExternal': True,
                                                                                                                        'lineNumber': 386,
                                                                                                                        'paramTypes': ['__ecma.String',
                                                                                                                                       'ANY'],
                                                                                                                        'resolvedMethod': "app.post('/api/Users',verify.emptyUserRegistration())",
                                                                                                                        'returnType': 'ANY'}],
                                                                                                             'endpoints': ['/api/Users'],
                                                                                                             'line_nos': [386]},
                                                   "app.post('/api/Users',verify.passwordRepeatChallenge())": {'calls': [{'callName': 'post',
                                                                                                                          'columnNumber': 2,
                                                                                                                          'isExternal': True,
                                                                                                                          'lineNumber': 385,
                                                                                                                          'paramTypes': ['__ecma.String',
                                                                                                                                         'ANY'],
                                                                                                                          'resolvedMethod': "app.post('/api/Users',verify.passwordRepeatChallenge())",
                                                                                                                          'returnType': 'ANY'}],
                                                                                                               'endpoints': ['/api/Users'],
                                                                                                               'line_nos': [385]},
                                                   "app.post('/api/Users',verify.registerAdminChallenge())": {'calls': [{'callName': 'post',
                                                                                                                         'columnNumber': 2,
                                                                                                                         'isExternal': True,
                                                                                                                         'lineNumber': 384,
                                                                                                                         'paramTypes': ['__ecma.String',
                                                                                                                                        'ANY'],
                                                                                                                         'resolvedMethod': "app.post('/api/Users',verify.registerAdminChallenge())",
                                                                                                                         'returnType': 'ANY'}],
                                                                                                              'endpoints': ['/api/Users'],
                                                                                                              'line_nos': [384]},
                                                   "app.post('/b2b/v2/orders',b2bOrder())": {'calls': [{'callName': 'post',
                                                                                                        'columnNumber': 2,
                                                                                                        'isExternal': True,
                                                                                                        'lineNumber': 602,
                                                                                                        'paramTypes': ['__ecma.String',
                                                                                                                       'ANY'],
                                                                                                        'resolvedMethod': "app.post('/b2b/v2/orders',b2bOrder())",
                                                                                                        'returnType': 'ANY'}],
                                                                                             'endpoints': ['/b2b/v2/orders'],
                                                                                             'line_nos': [602]},
                                                   "app.post('/file-upload',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),handleZipFileUpload,checkUploadSize,checkFileType,handleXmlUpload)": {'calls': [{'callName': 'post',
                                                                                                                                                                                                                                                           'columnNumber': 2,
                                                                                                                                                                                                                                                           'isExternal': True,
                                                                                                                                                                                                                                                           'lineNumber': 281,
                                                                                                                                                                                                                                                           'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY'],
                                                                                                                                                                                                                                                           'position': 8,
                                                                                                                                                                                                                                                           'resolvedMethod': "app.post('/file-upload',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),handleZipFileUpload,checkUploadSize,checkFileType,handleXmlUpload)",
                                                                                                                                                                                                                                                           'returnType': 'ANY'},
                                                                                                                                                                                                                                                          {'callName': 'post',
                                                                                                                                                                                                                                                           'columnNumber': 2,
                                                                                                                                                                                                                                                           'isExternal': True,
                                                                                                                                                                                                                                                           'lineNumber': 281,
                                                                                                                                                                                                                                                           'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY'],
                                                                                                                                                                                                                                                           'resolvedMethod': "app.post('/file-upload',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),handleZipFileUpload,checkUploadSize,checkFileType,handleXmlUpload)",
                                                                                                                                                                                                                                                           'returnType': 'ANY'},
                                                                                                                                                                                                                                                          {'callName': 'post',
                                                                                                                                                                                                                                                           'columnNumber': 2,
                                                                                                                                                                                                                                                           'isExternal': True,
                                                                                                                                                                                                                                                           'lineNumber': 281,
                                                                                                                                                                                                                                                           'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY'],
                                                                                                                                                                                                                                                           'position': 7,
                                                                                                                                                                                                                                                           'resolvedMethod': "app.post('/file-upload',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),handleZipFileUpload,checkUploadSize,checkFileType,handleXmlUpload)",
                                                                                                                                                                                                                                                           'returnType': 'ANY'},
                                                                                                                                                                                                                                                          {'callName': 'post',
                                                                                                                                                                                                                                                           'columnNumber': 2,
                                                                                                                                                                                                                                                           'isExternal': True,
                                                                                                                                                                                                                                                           'lineNumber': 281,
                                                                                                                                                                                                                                                           'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY'],
                                                                                                                                                                                                                                                           'position': 3,
                                                                                                                                                                                                                                                           'resolvedMethod': "app.post('/file-upload',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),handleZipFileUpload,checkUploadSize,checkFileType,handleXmlUpload)",
                                                                                                                                                                                                                                                           'returnType': 'ANY'},
                                                                                                                                                                                                                                                          {'callName': 'post',
                                                                                                                                                                                                                                                           'columnNumber': 2,
                                                                                                                                                                                                                                                           'isExternal': True,
                                                                                                                                                                                                                                                           'lineNumber': 281,
                                                                                                                                                                                                                                                           'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY'],
                                                                                                                                                                                                                                                           'position': 5,
                                                                                                                                                                                                                                                           'resolvedMethod': "app.post('/file-upload',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),handleZipFileUpload,checkUploadSize,checkFileType,handleXmlUpload)",
                                                                                                                                                                                                                                                           'returnType': 'ANY'},
                                                                                                                                                                                                                                                          {'callName': 'post',
                                                                                                                                                                                                                                                           'columnNumber': 2,
                                                                                                                                                                                                                                                           'isExternal': True,
                                                                                                                                                                                                                                                           'lineNumber': 281,
                                                                                                                                                                                                                                                           'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY',
                                                                                                                                                                                                                                                                          'ANY'],
                                                                                                                                                                                                                                                           'position': 6,
                                                                                                                                                                                                                                                           'resolvedMethod': "app.post('/file-upload',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),handleZipFileUpload,checkUploadSize,checkFileType,handleXmlUpload)",
                                                                                                                                                                                                                                                           'returnType': 'ANY'}],
                                                                                                                                                                                                                                                'endpoints': ['/file-upload',
                                                                                                                                                                                                                                                              '/file'],
                                                                                                                                                                                                                                                'line_nos': [281,
                                                                                                                                                                                                                                                             281,
                                                                                                                                                                                                                                                             281,
                                                                                                                                                                                                                                                             281,
                                                                                                                                                                                                                                                             281,
                                                                                                                                                                                                                                                             281]},
                                                   "app.post('/profile',updateUserProfile())": {'calls': [{'callName': 'post',
                                                                                                           'columnNumber': 2,
                                                                                                           'isExternal': True,
                                                                                                           'lineNumber': 621,
                                                                                                           'paramTypes': ['__ecma.String',
                                                                                                                          'ANY'],
                                                                                                           'resolvedMethod': "app.post('/profile',updateUserProfile())",
                                                                                                           'returnType': 'ANY'}],
                                                                                                'endpoints': ['/profile'],
                                                                                                'line_nos': [621]},
                                                   "app.post('/profile/image/file',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),profileImageFileUpload())": {'calls': [{'callName': 'post',
                                                                                                                                                                                                                         'columnNumber': 2,
                                                                                                                                                                                                                         'isExternal': True,
                                                                                                                                                                                                                         'lineNumber': 282,
                                                                                                                                                                                                                         'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                                        'ANY',
                                                                                                                                                                                                                                        'ANY',
                                                                                                                                                                                                                                        'ANY',
                                                                                                                                                                                                                                        'ANY'],
                                                                                                                                                                                                                         'resolvedMethod': "app.post('/profile/image/file',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),profileImageFileUpload())",
                                                                                                                                                                                                                         'returnType': 'ANY'},
                                                                                                                                                                                                                        {'callName': 'post',
                                                                                                                                                                                                                         'columnNumber': 2,
                                                                                                                                                                                                                         'isExternal': True,
                                                                                                                                                                                                                         'lineNumber': 282,
                                                                                                                                                                                                                         'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                                        'ANY',
                                                                                                                                                                                                                                        'ANY',
                                                                                                                                                                                                                                        'ANY',
                                                                                                                                                                                                                                        'ANY'],
                                                                                                                                                                                                                         'position': 3,
                                                                                                                                                                                                                         'resolvedMethod': "app.post('/profile/image/file',uploadToMemory.single('file'),ensureFileIsPassed,metrics.observeFileUploadMetricsMiddleware(),profileImageFileUpload())",
                                                                                                                                                                                                                         'returnType': 'ANY'}],
                                                                                                                                                                                                              'endpoints': ['/profile/image/file',
                                                                                                                                                                                                                            '/file'],
                                                                                                                                                                                                              'line_nos': [282,
                                                                                                                                                                                                                           282]},
                                                   "app.post('/profile/image/url',uploadToMemory.single('file'),profileImageUrlUpload())": {'calls': [{'callName': 'post',
                                                                                                                                                       'columnNumber': 2,
                                                                                                                                                       'isExternal': True,
                                                                                                                                                       'lineNumber': 283,
                                                                                                                                                       'paramTypes': ['__ecma.String',
                                                                                                                                                                      'ANY',
                                                                                                                                                                      'ANY'],
                                                                                                                                                       'resolvedMethod': "app.post('/profile/image/url',uploadToMemory.single('file'),profileImageUrlUpload())",
                                                                                                                                                       'returnType': 'ANY'}],
                                                                                                                                            'endpoints': ['/profile/image/url',
                                                                                                                                                          '/file'],
                                                                                                                                            'line_nos': [283]},
                                                   "app.post('/rest/2fa/disable',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rsecurity.isAuthorized(),\rtwoFactorAuth.disable()\r)": {'calls': [{'callName': 'RateLimit',
                                                                                                                                                                                                   'columnNumber': 2,
                                                                                                                                                                                                   'isExternal': True,
                                                                                                                                                                                                   'lineNumber': 435,
                                                                                                                                                                                                   'paramTypes': ['ANY'],
                                                                                                                                                                                                   'resolvedMethod': "app.post('/rest/2fa/disable',\r"
                                                                                                                                                                                                                     'newRateLimit({windowMs:5*60*1000,max:100}),\r'
                                                                                                                                                                                                                     'security.isAuthorized(),\r'
                                                                                                                                                                                                                     'twoFactorAuth.disable()\r'
                                                                                                                                                                                                                     ')',
                                                                                                                                                                                                   'returnType': 'ANY'}],
                                                                                                                                                                                        'endpoints': ['/rest/2fa/disable'],
                                                                                                                                                                                        'line_nos': [435]},
                                                   "app.post('/rest/2fa/setup',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rsecurity.isAuthorized(),\rtwoFactorAuth.setup()\r)": {'calls': [{'callName': 'RateLimit',
                                                                                                                                                                                               'columnNumber': 2,
                                                                                                                                                                                               'isExternal': True,
                                                                                                                                                                                               'lineNumber': 429,
                                                                                                                                                                                               'paramTypes': ['ANY'],
                                                                                                                                                                                               'resolvedMethod': "app.post('/rest/2fa/setup',\r"
                                                                                                                                                                                                                 'newRateLimit({windowMs:5*60*1000,max:100}),\r'
                                                                                                                                                                                                                 'security.isAuthorized(),\r'
                                                                                                                                                                                                                 'twoFactorAuth.setup()\r'
                                                                                                                                                                                                                 ')',
                                                                                                                                                                                               'returnType': 'ANY'}],
                                                                                                                                                                                    'endpoints': ['/rest/2fa/setup'],
                                                                                                                                                                                    'line_nos': [429]},
                                                   "app.post('/rest/2fa/verify',\rnewRateLimit({windowMs:5*60*1000,max:100}),\rtwoFactorAuth.verify()\r)": {'calls': [{'callName': 'RateLimit',
                                                                                                                                                                       'columnNumber': 2,
                                                                                                                                                                       'isExternal': True,
                                                                                                                                                                       'lineNumber': 422,
                                                                                                                                                                       'paramTypes': ['ANY'],
                                                                                                                                                                       'resolvedMethod': "app.post('/rest/2fa/verify',\r"
                                                                                                                                                                                         'newRateLimit({windowMs:5*60*1000,max:100}),\r'
                                                                                                                                                                                         'twoFactorAuth.verify()\r'
                                                                                                                                                                                         ')',
                                                                                                                                                                       'returnType': 'ANY'}],
                                                                                                                                                            'endpoints': ['/rest/2fa/verify'],
                                                                                                                                                            'line_nos': [422]},
                                                   "app.post('/rest/basket/:id/checkout',order())": {'calls': [{'callName': 'post',
                                                                                                                'columnNumber': 2,
                                                                                                                'isExternal': True,
                                                                                                                'lineNumber': 558,
                                                                                                                'paramTypes': ['__ecma.String',
                                                                                                                               'ANY'],
                                                                                                                'resolvedMethod': "app.post('/rest/basket/:id/checkout',order())",
                                                                                                                'returnType': 'ANY'}],
                                                                                                     'endpoints': ['/rest/basket/:id/checkout'],
                                                                                                     'line_nos': [558]},
                                                   "app.post('/rest/chatbot/respond',chatbot.process())": {'calls': [{'callName': 'post',
                                                                                                                      'columnNumber': 2,
                                                                                                                      'isExternal': True,
                                                                                                                      'lineNumber': 587,
                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                     'ANY'],
                                                                                                                      'resolvedMethod': "app.post('/rest/chatbot/respond',chatbot.process())",
                                                                                                                      'returnType': 'ANY'}],
                                                                                                           'endpoints': ['/rest/chatbot/respond'],
                                                                                                           'line_nos': [587]},
                                                   "app.post('/rest/deluxe-membership',security.appendUserId(),deluxe.upgradeToDeluxe())": {'calls': [{'callName': 'post',
                                                                                                                                                       'columnNumber': 2,
                                                                                                                                                       'isExternal': True,
                                                                                                                                                       'lineNumber': 584,
                                                                                                                                                       'paramTypes': ['__ecma.String',
                                                                                                                                                                      'ANY',
                                                                                                                                                                      'ANY'],
                                                                                                                                                       'resolvedMethod': "app.post('/rest/deluxe-membership',security.appendUserId(),deluxe.upgradeToDeluxe())",
                                                                                                                                                       'returnType': 'ANY'}],
                                                                                                                                            'endpoints': ['/rest/deluxe-membership'],
                                                                                                                                            'line_nos': [584]},
                                                   "app.post('/rest/memories',uploadToDisk.single('image'),ensureFileIsPassed,security.appendUserId(),metrics.observeFileUploadMetricsMiddleware(),memory.addMemory())": {'calls': [{'callName': 'post',
                                                                                                                                                                                                                                     'columnNumber': 2,
                                                                                                                                                                                                                                     'isExternal': True,
                                                                                                                                                                                                                                     'lineNumber': 284,
                                                                                                                                                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                                                    'ANY',
                                                                                                                                                                                                                                                    'ANY',
                                                                                                                                                                                                                                                    'ANY',
                                                                                                                                                                                                                                                    'ANY',
                                                                                                                                                                                                                                                    'ANY'],
                                                                                                                                                                                                                                     'resolvedMethod': "app.post('/rest/memories',uploadToDisk.single('image'),ensureFileIsPassed,security.appendUserId(),metrics.observeFileUploadMetricsMiddleware(),memory.addMemory())",
                                                                                                                                                                                                                                     'returnType': 'ANY'},
                                                                                                                                                                                                                                    {'callName': 'post',
                                                                                                                                                                                                                                     'columnNumber': 2,
                                                                                                                                                                                                                                     'isExternal': True,
                                                                                                                                                                                                                                     'lineNumber': 284,
                                                                                                                                                                                                                                     'paramTypes': ['__ecma.String',
                                                                                                                                                                                                                                                    'ANY',
                                                                                                                                                                                                                                                    'ANY',
                                                                                                                                                                                                                                                    'ANY',
                                                                                                                                                                                                                                                    'ANY',
                                                                                                                                                                                                                                                    'ANY'],
                                                                                                                                                                                                                                     'position': 3,
                                                                                                                                                                                                                                     'resolvedMethod': "app.post('/rest/memories',uploadToDisk.single('image'),ensureFileIsPassed,security.appendUserId(),metrics.observeFileUploadMetricsMiddleware(),memory.addMemory())",
                                                                                                                                                                                                                                     'returnType': 'ANY'}],
                                                                                                                                                                                                                          'endpoints': ['/rest/memories',
                                                                                                                                                                                                                                        '/image'],
                                                                                                                                                                                                                          'line_nos': [284,
                                                                                                                                                                                                                                       284]},
                                                   "app.post('/rest/products/reviews',security.isAuthorized(),likeProductReviews())": {'calls': [{'callName': 'post',
                                                                                                                                                  'columnNumber': 2,
                                                                                                                                                  'isExternal': True,
                                                                                                                                                  'lineNumber': 592,
                                                                                                                                                  'paramTypes': ['__ecma.String',
                                                                                                                                                                 'express-jwt:expressJwt:<returnValue>',
                                                                                                                                                                 'ANY'],
                                                                                                                                                  'resolvedMethod': "app.post('/rest/products/reviews',security.isAuthorized(),likeProductReviews())",
                                                                                                                                                  'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                                                       'endpoints': ['/rest/products/reviews'],
                                                                                                                                       'line_nos': [592]},
                                                   "app.post('/rest/user/data-export',security.appendUserId(),dataExport())": {'calls': [{'callName': 'post',
                                                                                                                                          'columnNumber': 2,
                                                                                                                                          'isExternal': True,
                                                                                                                                          'lineNumber': 576,
                                                                                                                                          'paramTypes': ['__ecma.String',
                                                                                                                                                         'ANY',
                                                                                                                                                         'ANY'],
                                                                                                                                          'resolvedMethod': "app.post('/rest/user/data-export',security.appendUserId(),dataExport())",
                                                                                                                                          'returnType': 'ANY'}],
                                                                                                                               'endpoints': ['/rest/user/data-export'],
                                                                                                                               'line_nos': [576]},
                                                   "app.post('/rest/user/data-export',security.appendUserId(),imageCaptcha.verifyCaptcha())": {'calls': [{'callName': 'post',
                                                                                                                                                          'columnNumber': 2,
                                                                                                                                                          'isExternal': True,
                                                                                                                                                          'lineNumber': 575,
                                                                                                                                                          'paramTypes': ['__ecma.String',
                                                                                                                                                                         'ANY',
                                                                                                                                                                         'ANY'],
                                                                                                                                                          'resolvedMethod': "app.post('/rest/user/data-export',security.appendUserId(),imageCaptcha.verifyCaptcha())",
                                                                                                                                                          'returnType': 'ANY'}],
                                                                                                                                               'endpoints': ['/rest/user/data-export'],
                                                                                                                                               'line_nos': [575]},
                                                   "app.post('/rest/user/login',login())": {'calls': [{'callName': 'post',
                                                                                                       'columnNumber': 2,
                                                                                                       'isExternal': True,
                                                                                                       'lineNumber': 550,
                                                                                                       'paramTypes': ['__ecma.String',
                                                                                                                      'ANY'],
                                                                                                       'resolvedMethod': "app.post('/rest/user/login',login())",
                                                                                                       'returnType': 'ANY'}],
                                                                                            'endpoints': ['/rest/user/login'],
                                                                                            'line_nos': [550]},
                                                   "app.post('/rest/user/reset-password',resetPassword())": {'calls': [{'callName': 'post',
                                                                                                                        'columnNumber': 2,
                                                                                                                        'isExternal': True,
                                                                                                                        'lineNumber': 552,
                                                                                                                        'paramTypes': ['__ecma.String',
                                                                                                                                       'ANY'],
                                                                                                                        'resolvedMethod': "app.post('/rest/user/reset-password',resetPassword())",
                                                                                                                        'returnType': 'ANY'}],
                                                                                                             'endpoints': ['/rest/user/reset-password'],
                                                                                                             'line_nos': [552]},
                                                   "app.post('/rest/web3/submitKey',checkKeys.checkKeys())": {'calls': [{'callName': 'post',
                                                                                                                         'columnNumber': 2,
                                                                                                                         'isExternal': True,
                                                                                                                         'lineNumber': 595,
                                                                                                                         'paramTypes': ['__ecma.String',
                                                                                                                                        'ANY'],
                                                                                                                         'resolvedMethod': "app.post('/rest/web3/submitKey',checkKeys.checkKeys())",
                                                                                                                         'returnType': 'ANY'}],
                                                                                                              'endpoints': ['/rest/web3/submitKey'],
                                                                                                              'line_nos': [595]},
                                                   "app.post('/rest/web3/walletExploitAddress',web3Wallet.contractExploitListener())": {'calls': [{'callName': 'post',
                                                                                                                                                   'columnNumber': 2,
                                                                                                                                                   'isExternal': True,
                                                                                                                                                   'lineNumber': 599,
                                                                                                                                                   'paramTypes': ['__ecma.String',
                                                                                                                                                                  'ANY'],
                                                                                                                                                   'resolvedMethod': "app.post('/rest/web3/walletExploitAddress',web3Wallet.contractExploitListener())",
                                                                                                                                                   'returnType': 'ANY'}],
                                                                                                                                        'endpoints': ['/rest/web3/walletExploitAddress'],
                                                                                                                                        'line_nos': [599]},
                                                   "app.post('/rest/web3/walletNFTVerify',nftMint.walletNFTVerify())": {'calls': [{'callName': 'post',
                                                                                                                                   'columnNumber': 2,
                                                                                                                                   'isExternal': True,
                                                                                                                                   'lineNumber': 598,
                                                                                                                                   'paramTypes': ['__ecma.String',
                                                                                                                                                  'ANY'],
                                                                                                                                   'resolvedMethod': "app.post('/rest/web3/walletNFTVerify',nftMint.walletNFTVerify())",
                                                                                                                                   'returnType': 'ANY'}],
                                                                                                                        'endpoints': ['/rest/web3/walletNFTVerify'],
                                                                                                                        'line_nos': [598]},
                                                   "app.post('/snippets/fixes',vulnCodeFixes.checkCorrectFix())": {'calls': [{'callName': 'post',
                                                                                                                              'columnNumber': 2,
                                                                                                                              'isExternal': True,
                                                                                                                              'lineNumber': 628,
                                                                                                                              'paramTypes': ['__ecma.String',
                                                                                                                                             'ANY'],
                                                                                                                              'resolvedMethod': "app.post('/snippets/fixes',vulnCodeFixes.checkCorrectFix())",
                                                                                                                              'returnType': 'ANY'}],
                                                                                                                   'endpoints': ['/snippets/fixes'],
                                                                                                                   'line_nos': [628]},
                                                   "app.post('/snippets/verdict',vulnCodeSnippet.checkVulnLines())": {'calls': [{'callName': 'post',
                                                                                                                                 'columnNumber': 2,
                                                                                                                                 'isExternal': True,
                                                                                                                                 'lineNumber': 626,
                                                                                                                                 'paramTypes': ['__ecma.String',
                                                                                                                                                'ANY'],
                                                                                                                                 'resolvedMethod': "app.post('/snippets/verdict',vulnCodeSnippet.checkVulnLines())",
                                                                                                                                 'returnType': 'ANY'}],
                                                                                                                      'endpoints': ['/snippets/verdict'],
                                                                                                                      'line_nos': [626]},
                                                   "app.put('/api/Addresss/:id',security.appendUserId())": {'calls': [{'callName': 'put',
                                                                                                                       'columnNumber': 2,
                                                                                                                       'isExternal': True,
                                                                                                                       'lineNumber': 414,
                                                                                                                       'paramTypes': ['__ecma.String',
                                                                                                                                      'ANY'],
                                                                                                                       'resolvedMethod': "app.put('/api/Addresss/:id',security.appendUserId())",
                                                                                                                       'returnType': 'ANY'}],
                                                                                                            'endpoints': ['/api/Addresss/:id'],
                                                                                                            'line_nos': [414]},
                                                   "app.put('/api/BasketItems/:id',security.appendUserId(),basketItems.quantityCheckBeforeBasketItemUpdate())": {'calls': [{'callName': 'put',
                                                                                                                                                                            'columnNumber': 2,
                                                                                                                                                                            'isExternal': True,
                                                                                                                                                                            'lineNumber': 390,
                                                                                                                                                                            'paramTypes': ['__ecma.String',
                                                                                                                                                                                           'ANY',
                                                                                                                                                                                           'ANY'],
                                                                                                                                                                            'resolvedMethod': "app.put('/api/BasketItems/:id',security.appendUserId(),basketItems.quantityCheckBeforeBasketItemUpdate())",
                                                                                                                                                                            'returnType': 'ANY'}],
                                                                                                                                                                 'endpoints': ['/api/BasketItems/:id'],
                                                                                                                                                                 'line_nos': [390]},
                                                   "app.put('/api/Cards/:id',security.denyAll())": {'calls': [{'callName': 'put',
                                                                                                               'columnNumber': 2,
                                                                                                               'isExternal': True,
                                                                                                               'lineNumber': 404,
                                                                                                               'paramTypes': ['__ecma.String',
                                                                                                                              'express-jwt:expressJwt:<returnValue>'],
                                                                                                               'resolvedMethod': "app.put('/api/Cards/:id',security.denyAll())",
                                                                                                               'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                    'endpoints': ['/api/Cards/:id'],
                                                                                                    'line_nos': [404]},
                                                   "app.put('/api/Feedbacks/:id',security.denyAll())": {'calls': [{'callName': 'put',
                                                                                                                   'columnNumber': 2,
                                                                                                                   'isExternal': True,
                                                                                                                   'lineNumber': 397,
                                                                                                                   'paramTypes': ['__ecma.String',
                                                                                                                                  'express-jwt:expressJwt:<returnValue>'],
                                                                                                                   'resolvedMethod': "app.put('/api/Feedbacks/:id',security.denyAll())",
                                                                                                                   'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                        'endpoints': ['/api/Feedbacks/:id'],
                                                                                                        'line_nos': [397]},
                                                   "app.put('/api/Recycles/:id',security.denyAll())": {'calls': [{'callName': 'put',
                                                                                                                  'columnNumber': 2,
                                                                                                                  'isExternal': True,
                                                                                                                  'lineNumber': 353,
                                                                                                                  'paramTypes': ['__ecma.String',
                                                                                                                                 'express-jwt:expressJwt:<returnValue>'],
                                                                                                                  'resolvedMethod': "app.put('/api/Recycles/:id',security.denyAll())",
                                                                                                                  'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                       'endpoints': ['/api/Recycles/:id'],
                                                                                                       'line_nos': [353]},
                                                   "app.put('/rest/basket/:id/coupon/:coupon',coupon())": {'calls': [{'callName': 'put',
                                                                                                                      'columnNumber': 2,
                                                                                                                      'isExternal': True,
                                                                                                                      'lineNumber': 559,
                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                     'ANY'],
                                                                                                                      'resolvedMethod': "app.put('/rest/basket/:id/coupon/:coupon',coupon())",
                                                                                                                      'returnType': 'ANY'}],
                                                                                                           'endpoints': ['/rest/basket/:id/coupon/:coupon'],
                                                                                                           'line_nos': [559]},
                                                   "app.put('/rest/continue-code-findIt/apply/:continueCode',restoreProgress.restoreProgressFindIt())": {'calls': [{'callName': 'put',
                                                                                                                                                                    'columnNumber': 2,
                                                                                                                                                                    'isExternal': True,
                                                                                                                                                                    'lineNumber': 566,
                                                                                                                                                                    'paramTypes': ['__ecma.String',
                                                                                                                                                                                   'ANY'],
                                                                                                                                                                    'resolvedMethod': "app.put('/rest/continue-code-findIt/apply/:continueCode',restoreProgress.restoreProgressFindIt())",
                                                                                                                                                                    'returnType': 'ANY'}],
                                                                                                                                                         'endpoints': ['/rest/continue-code-findIt/apply/:continueCode'],
                                                                                                                                                         'line_nos': [566]},
                                                   "app.put('/rest/continue-code-fixIt/apply/:continueCode',restoreProgress.restoreProgressFixIt())": {'calls': [{'callName': 'put',
                                                                                                                                                                  'columnNumber': 2,
                                                                                                                                                                  'isExternal': True,
                                                                                                                                                                  'lineNumber': 567,
                                                                                                                                                                  'paramTypes': ['__ecma.String',
                                                                                                                                                                                 'ANY'],
                                                                                                                                                                  'resolvedMethod': "app.put('/rest/continue-code-fixIt/apply/:continueCode',restoreProgress.restoreProgressFixIt())",
                                                                                                                                                                  'returnType': 'ANY'}],
                                                                                                                                                       'endpoints': ['/rest/continue-code-fixIt/apply/:continueCode'],
                                                                                                                                                       'line_nos': [567]},
                                                   "app.put('/rest/continue-code/apply/:continueCode',restoreProgress.restoreProgress())": {'calls': [{'callName': 'put',
                                                                                                                                                       'columnNumber': 2,
                                                                                                                                                       'isExternal': True,
                                                                                                                                                       'lineNumber': 568,
                                                                                                                                                       'paramTypes': ['__ecma.String',
                                                                                                                                                                      'ANY'],
                                                                                                                                                       'resolvedMethod': "app.put('/rest/continue-code/apply/:continueCode',restoreProgress.restoreProgress())",
                                                                                                                                                       'returnType': 'ANY'}],
                                                                                                                                            'endpoints': ['/rest/continue-code/apply/:continueCode'],
                                                                                                                                            'line_nos': [568]},
                                                   "app.put('/rest/order-history/:id/delivery-status',security.isAccounting(),orderHistory.toggleDeliveryStatus())": {'calls': [{'callName': 'put',
                                                                                                                                                                                 'columnNumber': 2,
                                                                                                                                                                                 'isExternal': True,
                                                                                                                                                                                 'lineNumber': 580,
                                                                                                                                                                                 'paramTypes': ['__ecma.String',
                                                                                                                                                                                                'ANY',
                                                                                                                                                                                                'ANY'],
                                                                                                                                                                                 'resolvedMethod': "app.put('/rest/order-history/:id/delivery-status',security.isAccounting(),orderHistory.toggleDeliveryStatus())",
                                                                                                                                                                                 'returnType': 'ANY'}],
                                                                                                                                                                      'endpoints': ['/rest/order-history/:id/delivery-status'],
                                                                                                                                                                      'line_nos': [580]},
                                                   "app.put('/rest/products/:id/reviews',createProductReviews())": {'calls': [{'callName': 'put',
                                                                                                                               'columnNumber': 2,
                                                                                                                               'isExternal': True,
                                                                                                                               'lineNumber': 590,
                                                                                                                               'paramTypes': ['__ecma.String',
                                                                                                                                              'ANY'],
                                                                                                                               'resolvedMethod': "app.put('/rest/products/:id/reviews',createProductReviews())",
                                                                                                                               'returnType': 'ANY'}],
                                                                                                                    'endpoints': ['/rest/products/:id/reviews'],
                                                                                                                    'line_nos': [590]},
                                                   "app.put('/rest/wallet/balance',security.appendUserId(),wallet.addWalletBalance())": {'calls': [{'callName': 'put',
                                                                                                                                                    'columnNumber': 2,
                                                                                                                                                    'isExternal': True,
                                                                                                                                                    'lineNumber': 582,
                                                                                                                                                    'paramTypes': ['__ecma.String',
                                                                                                                                                                   'ANY',
                                                                                                                                                                   'ANY'],
                                                                                                                                                    'resolvedMethod': "app.put('/rest/wallet/balance',security.appendUserId(),wallet.addWalletBalance())",
                                                                                                                                                    'returnType': 'ANY'}],
                                                                                                                                         'endpoints': ['/rest/wallet/balance'],
                                                                                                                                         'line_nos': [582]},
                                                   "app.route('/api/Users/:id')": {'calls': [{'callName': 'route',
                                                                                              'columnNumber': 2,
                                                                                              'isExternal': True,
                                                                                              'lineNumber': 333,
                                                                                              'paramTypes': ['__ecma.String'],
                                                                                              'resolvedMethod': "app.route('/api/Users/:id')",
                                                                                              'returnType': 'ANY'}],
                                                                                   'endpoints': ['/api/Users/:id'],
                                                                                   'line_nos': [333]},
                                                   "app.use('/api-docs',swaggerUi.serve,swaggerUi.setup(swaggerDocument))": {'calls': [{'callName': 'use',
                                                                                                                                        'columnNumber': 2,
                                                                                                                                        'isExternal': True,
                                                                                                                                        'lineNumber': 263,
                                                                                                                                        'paramTypes': ['__ecma.String',
                                                                                                                                                       'ANY',
                                                                                                                                                       'ANY'],
                                                                                                                                        'resolvedMethod': "app.use('/api-docs',swaggerUi.serve,swaggerUi.setup(swaggerDocument))",
                                                                                                                                        'returnType': 'ANY'}],
                                                                                                                             'endpoints': ['/api-docs'],
                                                                                                                             'line_nos': [263]},
                                                   "app.use('/api/BasketItems',security.isAuthorized())": {'calls': [{'callName': 'use',
                                                                                                                      'columnNumber': 2,
                                                                                                                      'isExternal': True,
                                                                                                                      'lineNumber': 327,
                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                     'express-jwt:expressJwt:<returnValue>'],
                                                                                                                      'resolvedMethod': "app.use('/api/BasketItems',security.isAuthorized())",
                                                                                                                      'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                           'endpoints': ['/api/BasketItems'],
                                                                                                           'line_nos': [327]},
                                                   "app.use('/api/BasketItems/:id',security.isAuthorized())": {'calls': [{'callName': 'use',
                                                                                                                          'columnNumber': 2,
                                                                                                                          'isExternal': True,
                                                                                                                          'lineNumber': 328,
                                                                                                                          'paramTypes': ['__ecma.String',
                                                                                                                                         'express-jwt:expressJwt:<returnValue>'],
                                                                                                                          'resolvedMethod': "app.use('/api/BasketItems/:id',security.isAuthorized())",
                                                                                                                          'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                               'endpoints': ['/api/BasketItems/:id'],
                                                                                                               'line_nos': [328]},
                                                   "app.use('/api/Challenges/:id',security.denyAll())": {'calls': [{'callName': 'use',
                                                                                                                    'columnNumber': 2,
                                                                                                                    'isExternal': True,
                                                                                                                    'lineNumber': 343,
                                                                                                                    'paramTypes': ['__ecma.String',
                                                                                                                                   'express-jwt:expressJwt:<returnValue>'],
                                                                                                                    'resolvedMethod': "app.use('/api/Challenges/:id',security.denyAll())",
                                                                                                                    'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                         'endpoints': ['/api/Challenges/:id'],
                                                                                                         'line_nos': [343]},
                                                   "app.use('/api/Complaints/:id',security.denyAll())": {'calls': [{'callName': 'use',
                                                                                                                    'columnNumber': 2,
                                                                                                                    'isExternal': True,
                                                                                                                    'lineNumber': 347,
                                                                                                                    'paramTypes': ['__ecma.String',
                                                                                                                                   'express-jwt:expressJwt:<returnValue>'],
                                                                                                                    'resolvedMethod': "app.use('/api/Complaints/:id',security.denyAll())",
                                                                                                                    'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                         'endpoints': ['/api/Complaints/:id'],
                                                                                                         'line_nos': [347]},
                                                   "app.use('/api/Feedbacks/:id',security.isAuthorized())": {'calls': [{'callName': 'use',
                                                                                                                        'columnNumber': 2,
                                                                                                                        'isExternal': True,
                                                                                                                        'lineNumber': 330,
                                                                                                                        'paramTypes': ['__ecma.String',
                                                                                                                                       'express-jwt:expressJwt:<returnValue>'],
                                                                                                                        'resolvedMethod': "app.use('/api/Feedbacks/:id',security.isAuthorized())",
                                                                                                                        'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                             'endpoints': ['/api/Feedbacks/:id'],
                                                                                                             'line_nos': [330]},
                                                   "app.use('/api/PrivacyRequests',security.isAuthorized())": {'calls': [{'callName': 'use',
                                                                                                                          'columnNumber': 2,
                                                                                                                          'isExternal': True,
                                                                                                                          'lineNumber': 399,
                                                                                                                          'paramTypes': ['__ecma.String',
                                                                                                                                         'express-jwt:expressJwt:<returnValue>'],
                                                                                                                          'resolvedMethod': "app.use('/api/PrivacyRequests',security.isAuthorized())",
                                                                                                                          'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                               'endpoints': ['/api/PrivacyRequests'],
                                                                                                               'line_nos': [399]},
                                                   "app.use('/api/PrivacyRequests/:id',security.denyAll())": {'calls': [{'callName': 'use',
                                                                                                                         'columnNumber': 2,
                                                                                                                         'isExternal': True,
                                                                                                                         'lineNumber': 410,
                                                                                                                         'paramTypes': ['__ecma.String',
                                                                                                                                        'express-jwt:expressJwt:<returnValue>'],
                                                                                                                         'resolvedMethod': "app.use('/api/PrivacyRequests/:id',security.denyAll())",
                                                                                                                         'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                              'endpoints': ['/api/PrivacyRequests/:id'],
                                                                                                              'line_nos': [410]},
                                                   "app.use('/api/PrivacyRequests/:id',security.isAuthorized())": {'calls': [{'callName': 'use',
                                                                                                                              'columnNumber': 2,
                                                                                                                              'isExternal': True,
                                                                                                                              'lineNumber': 400,
                                                                                                                              'paramTypes': ['__ecma.String',
                                                                                                                                             'express-jwt:expressJwt:<returnValue>'],
                                                                                                                              'resolvedMethod': "app.use('/api/PrivacyRequests/:id',security.isAuthorized())",
                                                                                                                              'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                                   'endpoints': ['/api/PrivacyRequests/:id'],
                                                                                                                   'line_nos': [400]},
                                                   "app.use('/api/Quantitys/:id',security.isAccounting(),ipfilter(['123.456.789'],{mode:'allow'}))": {'calls': [{'callName': 'use',
                                                                                                                                                                 'columnNumber': 2,
                                                                                                                                                                 'isExternal': True,
                                                                                                                                                                 'lineNumber': 395,
                                                                                                                                                                 'paramTypes': ['__ecma.String',
                                                                                                                                                                                'ANY',
                                                                                                                                                                                'ANY'],
                                                                                                                                                                 'resolvedMethod': "app.use('/api/Quantitys/:id',security.isAccounting(),ipfilter(['123.456.789'],{mode:'allow'}))",
                                                                                                                                                                 'returnType': 'ANY'}],
                                                                                                                                                      'endpoints': ['/api/Quantitys/:id',
                                                                                                                                                                    '/123.456.789'],
                                                                                                                                                      'line_nos': [395]},
                                                   "app.use('/api/SecurityAnswers/:id',security.denyAll())": {'calls': [{'callName': 'use',
                                                                                                                         'columnNumber': 2,
                                                                                                                         'isExternal': True,
                                                                                                                         'lineNumber': 360,
                                                                                                                         'paramTypes': ['__ecma.String',
                                                                                                                                        'express-jwt:expressJwt:<returnValue>'],
                                                                                                                         'resolvedMethod': "app.use('/api/SecurityAnswers/:id',security.denyAll())",
                                                                                                                         'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                              'endpoints': ['/api/SecurityAnswers/:id'],
                                                                                                              'line_nos': [360]},
                                                   "app.use('/api/SecurityQuestions/:id',security.denyAll())": {'calls': [{'callName': 'use',
                                                                                                                           'columnNumber': 2,
                                                                                                                           'isExternal': True,
                                                                                                                           'lineNumber': 357,
                                                                                                                           'paramTypes': ['__ecma.String',
                                                                                                                                          'express-jwt:expressJwt:<returnValue>'],
                                                                                                                           'resolvedMethod': "app.use('/api/SecurityQuestions/:id',security.denyAll())",
                                                                                                                           'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                                'endpoints': ['/api/SecurityQuestions/:id'],
                                                                                                                'line_nos': [357]},
                                                   "app.use('/assets/i18n',verify.accessControlChallenges())": {'calls': [{'callName': 'use',
                                                                                                                           'columnNumber': 2,
                                                                                                                           'isExternal': True,
                                                                                                                           'lineNumber': 216,
                                                                                                                           'paramTypes': ['__ecma.String',
                                                                                                                                          'ANY'],
                                                                                                                           'resolvedMethod': "app.use('/assets/i18n',verify.accessControlChallenges())",
                                                                                                                           'returnType': 'ANY'}],
                                                                                                                'endpoints': ['/assets/i18n'],
                                                                                                                'line_nos': [216]},
                                                   "app.use('/assets/public/images/padding',verify.accessControlChallenges())": {'calls': [{'callName': 'use',
                                                                                                                                            'columnNumber': 2,
                                                                                                                                            'isExternal': True,
                                                                                                                                            'lineNumber': 213,
                                                                                                                                            'paramTypes': ['__ecma.String',
                                                                                                                                                           'ANY'],
                                                                                                                                            'resolvedMethod': "app.use('/assets/public/images/padding',verify.accessControlChallenges())",
                                                                                                                                            'returnType': 'ANY'}],
                                                                                                                                 'endpoints': ['/assets/public/images/padding'],
                                                                                                                                 'line_nos': [213]},
                                                   "app.use('/assets/public/images/products',verify.accessControlChallenges())": {'calls': [{'callName': 'use',
                                                                                                                                             'columnNumber': 2,
                                                                                                                                             'isExternal': True,
                                                                                                                                             'lineNumber': 214,
                                                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                                                            'ANY'],
                                                                                                                                             'resolvedMethod': "app.use('/assets/public/images/products',verify.accessControlChallenges())",
                                                                                                                                             'returnType': 'ANY'}],
                                                                                                                                  'endpoints': ['/assets/public/images/products'],
                                                                                                                                  'line_nos': [214]},
                                                   "app.use('/assets/public/images/uploads',verify.accessControlChallenges())": {'calls': [{'callName': 'use',
                                                                                                                                            'columnNumber': 2,
                                                                                                                                            'isExternal': True,
                                                                                                                                            'lineNumber': 215,
                                                                                                                                            'paramTypes': ['__ecma.String',
                                                                                                                                                           'ANY'],
                                                                                                                                            'resolvedMethod': "app.use('/assets/public/images/uploads',verify.accessControlChallenges())",
                                                                                                                                            'returnType': 'ANY'}],
                                                                                                                                 'endpoints': ['/assets/public/images/uploads'],
                                                                                                                                 'line_nos': [215]},
                                                   "app.use('/b2b/v2',security.isAuthorized())": {'calls': [{'callName': 'use',
                                                                                                             'columnNumber': 2,
                                                                                                             'isExternal': True,
                                                                                                             'lineNumber': 388,
                                                                                                             'paramTypes': ['__ecma.String',
                                                                                                                            'express-jwt:expressJwt:<returnValue>'],
                                                                                                             'resolvedMethod': "app.use('/b2b/v2',security.isAuthorized())",
                                                                                                             'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                  'endpoints': ['/b2b/v2'],
                                                                                                  'line_nos': [388]},
                                                   "app.use('/dataerasure',dataErasure)": {'calls': [{'callName': 'use',
                                                                                                      'columnNumber': 2,
                                                                                                      'isExternal': True,
                                                                                                      'lineNumber': 610,
                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                     'routes/dataErasure:dataErasure'],
                                                                                                      'position': 2,
                                                                                                      'resolvedMethod': "app.use('/dataerasure',dataErasure)",
                                                                                                      'returnType': 'ANY'},
                                                                                                     {'callName': 'use',
                                                                                                      'columnNumber': 2,
                                                                                                      'isExternal': True,
                                                                                                      'lineNumber': 610,
                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                     'routes/dataErasure:dataErasure'],
                                                                                                      'resolvedMethod': "app.use('/dataerasure',dataErasure)",
                                                                                                      'returnType': 'ANY'}],
                                                                                           'endpoints': ['/dataerasure'],
                                                                                           'line_nos': [610,
                                                                                                        610]},
                                                   "app.use('/encryptionkeys',serveIndexMiddleware,serveIndex('encryptionkeys',{icons:true,view:'details'}))": {'calls': [{'callName': 'use',
                                                                                                                                                                           'columnNumber': 2,
                                                                                                                                                                           'isExternal': True,
                                                                                                                                                                           'lineNumber': 254,
                                                                                                                                                                           'paramTypes': ['__ecma.String',
                                                                                                                                                                                          '(req: '
                                                                                                                                                                                          'Request<import("C:/Users/user/SampleProjects/javascript/juice-shop/node_modules/@types/express-serve-static-core/index").ParamsDictionary, '
                                                                                                                                                                                          'ANY, '
                                                                                                                                                                                          'ANY, '
                                                                                                                                                                                          'import("C:/Users/user/SampleProjects/javascript/juice-shop/node_modules/@types/qs/index").ParsedQs, '
                                                                                                                                                                                          'Record<string, '
                                                                                                                                                                                          'ANY>>, '
                                                                                                                                                                                          'res: '
                                                                                                                                                                                          'Response<any, '
                                                                                                                                                                                          'Record<string, '
                                                                                                                                                                                          'ANY>>, '
                                                                                                                                                                                          'next: '
                                                                                                                                                                                          'NextFunction) '
                                                                                                                                                                                          '=> '
                                                                                                                                                                                          'void',
                                                                                                                                                                                          'ANY'],
                                                                                                                                                                           'resolvedMethod': "app.use('/encryptionkeys',serveIndexMiddleware,serveIndex('encryptionkeys',{icons:true,view:'details'}))",
                                                                                                                                                                           'returnType': 'ANY'}],
                                                                                                                                                                'endpoints': ['/encryptionkeys',
                                                                                                                                                                              '/encryptionkeys',
                                                                                                                                                                              '/details'],
                                                                                                                                                                'line_nos': [254]},
                                                   "app.use('/encryptionkeys/:file',keyServer())": {'calls': [{'callName': 'use',
                                                                                                               'columnNumber': 2,
                                                                                                               'isExternal': True,
                                                                                                               'lineNumber': 255,
                                                                                                               'paramTypes': ['__ecma.String',
                                                                                                                              'ANY'],
                                                                                                               'resolvedMethod': "app.use('/encryptionkeys/:file',keyServer())",
                                                                                                               'returnType': 'ANY'}],
                                                                                                    'endpoints': ['/encryptionkeys/:file'],
                                                                                                    'line_nos': [255]},
                                                   "app.use('/ftp',serveIndexMiddleware,serveIndex('ftp',{icons:true}))": {'calls': [{'callName': 'use',
                                                                                                                                      'columnNumber': 2,
                                                                                                                                      'isExternal': True,
                                                                                                                                      'lineNumber': 249,
                                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                                     '(req: '
                                                                                                                                                     'Request<import("C:/Users/user/SampleProjects/javascript/juice-shop/node_modules/@types/express-serve-static-core/index").ParamsDictionary, '
                                                                                                                                                     'ANY, '
                                                                                                                                                     'ANY, '
                                                                                                                                                     'import("C:/Users/user/SampleProjects/javascript/juice-shop/node_modules/@types/qs/index").ParsedQs, '
                                                                                                                                                     'Record<string, '
                                                                                                                                                     'ANY>>, '
                                                                                                                                                     'res: '
                                                                                                                                                     'Response<any, '
                                                                                                                                                     'Record<string, '
                                                                                                                                                     'ANY>>, '
                                                                                                                                                     'next: '
                                                                                                                                                     'NextFunction) '
                                                                                                                                                     '=> '
                                                                                                                                                     'void',
                                                                                                                                                     'ANY'],
                                                                                                                                      'resolvedMethod': "app.use('/ftp',serveIndexMiddleware,serveIndex('ftp',{icons:true}))",
                                                                                                                                      'returnType': 'ANY'}],
                                                                                                                           'endpoints': ['/ftp',
                                                                                                                                         '/ftp'],
                                                                                                                           'line_nos': [249]},
                                                   "app.use('/ftp(?!/quarantine)/:file',fileServer())": {'calls': [{'callName': 'use',
                                                                                                                    'columnNumber': 2,
                                                                                                                    'isExternal': True,
                                                                                                                    'lineNumber': 250,
                                                                                                                    'paramTypes': ['__ecma.String',
                                                                                                                                   'ANY'],
                                                                                                                    'resolvedMethod': "app.use('/ftp(?!/quarantine)/:file',fileServer())",
                                                                                                                    'returnType': 'ANY'}],
                                                                                                         'endpoints': ['/{regex_param_1}/:file'],
                                                                                                         'line_nos': [250]},
                                                   "app.use('/ftp/quarantine/:file',quarantineServer())": {'calls': [{'callName': 'use',
                                                                                                                      'columnNumber': 2,
                                                                                                                      'isExternal': True,
                                                                                                                      'lineNumber': 251,
                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                     'ANY'],
                                                                                                                      'resolvedMethod': "app.use('/ftp/quarantine/:file',quarantineServer())",
                                                                                                                      'returnType': 'ANY'}],
                                                                                                           'endpoints': ['/ftp/quarantine/:file'],
                                                                                                           'line_nos': [251]},
                                                   "app.use('/rest/basket',security.isAuthorized(),security.appendUserId())": {'calls': [{'callName': 'use',
                                                                                                                                          'columnNumber': 2,
                                                                                                                                          'isExternal': True,
                                                                                                                                          'lineNumber': 325,
                                                                                                                                          'paramTypes': ['__ecma.String',
                                                                                                                                                         'express-jwt:expressJwt:<returnValue>',
                                                                                                                                                         'ANY'],
                                                                                                                                          'resolvedMethod': "app.use('/rest/basket',security.isAuthorized(),security.appendUserId())",
                                                                                                                                          'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                                               'endpoints': ['/rest/basket'],
                                                                                                                               'line_nos': [325]},
                                                   "app.use('/rest/basket/:id',security.isAuthorized())": {'calls': [{'callName': 'use',
                                                                                                                      'columnNumber': 2,
                                                                                                                      'isExternal': True,
                                                                                                                      'lineNumber': 363,
                                                                                                                      'paramTypes': ['__ecma.String',
                                                                                                                                     'express-jwt:expressJwt:<returnValue>'],
                                                                                                                      'resolvedMethod': "app.use('/rest/basket/:id',security.isAuthorized())",
                                                                                                                      'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                           'endpoints': ['/rest/basket/:id'],
                                                                                                           'line_nos': [363]},
                                                   "app.use('/rest/basket/:id/order',security.isAuthorized())": {'calls': [{'callName': 'use',
                                                                                                                            'columnNumber': 2,
                                                                                                                            'isExternal': True,
                                                                                                                            'lineNumber': 364,
                                                                                                                            'paramTypes': ['__ecma.String',
                                                                                                                                           'express-jwt:expressJwt:<returnValue>'],
                                                                                                                            'resolvedMethod': "app.use('/rest/basket/:id/order',security.isAuthorized())",
                                                                                                                            'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                                 'endpoints': ['/rest/basket/:id/order'],
                                                                                                                 'line_nos': [364]},
                                                   "app.use('/rest/user/authentication-details',security.isAuthorized())": {'calls': [{'callName': 'use',
                                                                                                                                       'columnNumber': 2,
                                                                                                                                       'isExternal': True,
                                                                                                                                       'lineNumber': 362,
                                                                                                                                       'paramTypes': ['__ecma.String',
                                                                                                                                                      'express-jwt:expressJwt:<returnValue>'],
                                                                                                                                       'resolvedMethod': "app.use('/rest/user/authentication-details',security.isAuthorized())",
                                                                                                                                       'returnType': 'express-jwt:expressJwt:<returnValue>'}],
                                                                                                                            'endpoints': ['/rest/user/authentication-details'],
                                                                                                                            'line_nos': [362]},
                                                   "app.use('/rest/user/reset-password',newRateLimit({\rwindowMs:5*60*1000,\rmax:100,\rkeyGenerator({headers,ip}:{headers:any,ip:any}){returnheaders['X-Forwarded-For']||ip}//vuln-code-snippetvuln-lineresetPasswordMortyChallenge\r}))": {'calls': [{'callName': 'RateLimit',
                                                                                                                                                                                                                                                                                                       'columnNumber': 2,
                                                                                                                                                                                                                                                                                                       'isExternal': True,
                                                                                                                                                                                                                                                                                                       'lineNumber': 313,
                                                                                                                                                                                                                                                                                                       'paramTypes': ['ANY'],
                                                                                                                                                                                                                                                                                                       'resolvedMethod': "app.use('/rest/user/reset-password',newRateLimit({\r"
                                                                                                                                                                                                                                                                                                                         'windowMs:5*60*1000,\r'
                                                                                                                                                                                                                                                                                                                         'max:100,\r'
                                                                                                                                                                                                                                                                                                                         "keyGenerator({headers,ip}:{headers:any,ip:any}){returnheaders['X-Forwarded-For']||ip}//vuln-code-snippetvuln-lineresetPasswordMortyChallenge\r"
                                                                                                                                                                                                                                                                                                                         '}))',
                                                                                                                                                                                                                                                                                                       'returnType': 'ANY'}],
                                                                                                                                                                                                                                                                                            'endpoints': ['/rest/user/reset-password'],
                                                                                                                                                                                                                                                                                            'line_nos': [313]},
                                                   "app.use('/solve/challenges/server-side',verify.serverSideChallenges())": {'calls': [{'callName': 'use',
                                                                                                                                         'columnNumber': 2,
                                                                                                                                         'isExternal': True,
                                                                                                                                         'lineNumber': 219,
                                                                                                                                         'paramTypes': ['__ecma.String',
                                                                                                                                                        'ANY'],
                                                                                                                                         'resolvedMethod': "app.use('/solve/challenges/server-side',verify.serverSideChallenges())",
                                                                                                                                         'returnType': 'ANY'}],
                                                                                                                              'endpoints': ['/solve/challenges/server-side'],
                                                                                                                              'line_nos': [219]},
                                                   "app.use('/support/logs',serveIndexMiddleware,serveIndex('logs',{icons:true,view:'details'}))": {'calls': [{'callName': 'use',
                                                                                                                                                               'columnNumber': 2,
                                                                                                                                                               'isExternal': True,
                                                                                                                                                               'lineNumber': 258,
                                                                                                                                                               'paramTypes': ['__ecma.String',
                                                                                                                                                                              '(req: '
                                                                                                                                                                              'Request<import("C:/Users/user/SampleProjects/javascript/juice-shop/node_modules/@types/express-serve-static-core/index").ParamsDictionary, '
                                                                                                                                                                              'ANY, '
                                                                                                                                                                              'ANY, '
                                                                                                                                                                              'import("C:/Users/user/SampleProjects/javascript/juice-shop/node_modules/@types/qs/index").ParsedQs, '
                                                                                                                                                                              'Record<string, '
                                                                                                                                                                              'ANY>>, '
                                                                                                                                                                              'res: '
                                                                                                                                                                              'Response<any, '
                                                                                                                                                                              'Record<string, '
                                                                                                                                                                              'ANY>>, '
                                                                                                                                                                              'next: '
                                                                                                                                                                              'NextFunction) '
                                                                                                                                                                              '=> '
                                                                                                                                                                              'void',
                                                                                                                                                                              'ANY'],
                                                                                                                                                               'resolvedMethod': "app.use('/support/logs',serveIndexMiddleware,serveIndex('logs',{icons:true,view:'details'}))",
                                                                                                                                                               'returnType': 'ANY'}],
                                                                                                                                                    'endpoints': ['/support/logs',
                                                                                                                                                                  '/logs',
                                                                                                                                                                  '/details'],
                                                                                                                                                    'line_nos': [258]},
                                                   "app.use('/support/logs',verify.accessControlChallenges())": {'calls': [{'callName': 'use',
                                                                                                                            'columnNumber': 2,
                                                                                                                            'isExternal': True,
                                                                                                                            'lineNumber': 259,
                                                                                                                            'paramTypes': ['__ecma.String',
                                                                                                                                           'ANY'],
                                                                                                                            'resolvedMethod': "app.use('/support/logs',verify.accessControlChallenges())",
                                                                                                                            'returnType': 'ANY'}],
                                                                                                                 'endpoints': ['/support/logs'],
                                                                                                                 'line_nos': [259]},
                                                   "app.use('/support/logs/:file',logFileServer())": {'calls': [{'callName': 'use',
                                                                                                                 'columnNumber': 2,
                                                                                                                 'isExternal': True,
                                                                                                                 'lineNumber': 260,
                                                                                                                 'paramTypes': ['__ecma.String',
                                                                                                                                'ANY'],
                                                                                                                 'resolvedMethod': "app.use('/support/logs/:file',logFileServer())",
                                                                                                                 'returnType': 'ANY'}],
                                                                                                      'endpoints': ['/support/logs/:file'],
                                                                                                      'line_nos': [260]},
                                                   "app.use((req:Request,res:Response,next:NextFunction)=>{\rreq.url=req.url.replace(/[/]+/g,'/')\rnext()\r})": {'calls': [{'callName': 'use',
                                                                                                                                                                            'columnNumber': 2,
                                                                                                                                                                            'isExternal': True,
                                                                                                                                                                            'lineNumber': 185,
                                                                                                                                                                            'paramTypes': ['LAMBDA'],
                                                                                                                                                                            'resolvedMethod': 'app.use((req:Request,res:Response,next:NextFunction)=>{\r'
                                                                                                                                                                                              "req.url=req.url.replace(/[/]+/g,'/')\r"
                                                                                                                                                                                              'next()\r'
                                                                                                                                                                                              '})',
                                                                                                                                                                            'returnType': 'ANY'}],
                                                                                                                                                                 'endpoints': ['/'],
                                                                                                                                                                 'line_nos': [185]},
                                                   "app.use((req:Request,res:Response,next:NextFunction)=>{\rres.append('X-Recruiting',config.get('application.securityTxt.hiring'))\rnext()\r})": {'calls': [{'callName': 'use',
                                                                                                                                                                                                               'columnNumber': 2,
                                                                                                                                                                                                               'isExternal': True,
                                                                                                                                                                                                               'lineNumber': 179,
                                                                                                                                                                                                               'paramTypes': ['LAMBDA'],
                                                                                                                                                                                                               'resolvedMethod': 'app.use((req:Request,res:Response,next:NextFunction)=>{\r'
                                                                                                                                                                                                                                 "res.append('X-Recruiting',config.get('application.securityTxt.hiring'))\r"
                                                                                                                                                                                                                                 'next()\r'
                                                                                                                                                                                                                                 '})',
                                                                                                                                                                                                               'returnType': 'ANY'}],
                                                                                                                                                                                                    'endpoints': ['/application.securityTxt.hiring'],
                                                                                                                                                                                                    'line_nos': [179]},
                                                   "app.use(['/.well-known/security.txt','/security.txt'],securityTxt({\rcontact:config.get('application.securityTxt.contact'),\rencryption:config.get('application.securityTxt.encryption'),\racknowledgements:config.get('application.securityTxt.acknowledgements'),\r'Preferred-Languages':[...newSet(locales.map((locale:{key:string})=>locale.key.substr(0,2)))].join(','),\rhiring:config.get('application.securityTxt.hiring'),\rexpires:securityTxtExpiration.toUTCString()\r}))": {'calls': [{'callName': 'Set',
columnNumber': 2,
isExternal': True,
lineNumber': 197,
paramTypes': ['ANY'],
resolvedMethod': "app.use(['/.well-known/security.txt','/security.txt'],securityTxt({\r"
contact:config.get('application.securityTxt.contact'),\r"
encryption:config.get('application.securityTxt.encryption'),\r"
acknowledgements:config.get('application.securityTxt.acknowledgements'),\r"
referred-Languages':[...newSet(locales.map((locale:{key:string})=>locale.key.substr(0,2)))].join(','),\r"
hiring:config.get('application.securityTxt.hiring'),\r"
expires:securityTxtExpiration.toUTCString()\r'
}))',
returnType': 'ANY'}],
endpoints': ['/.well-known/security.txt',
security.txt',
application.securityTxt.contact',
application.securityTxt.encryption',
application.securityTxt.acknowledgements',
referred-Languages',
application.securityTxt.hiring'],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             'line_nos': [197]},
                                                   "app.use(cookieParser('kekse'))": {'calls': [{'callName': 'use',
                                                                                                 'columnNumber': 2,
                                                                                                 'isExternal': True,
                                                                                                 'lineNumber': 266,
                                                                                                 'paramTypes': ['ANY'],
                                                                                                 'resolvedMethod': "app.use(cookieParser('kekse'))",
                                                                                                 'returnType': 'ANY'}],
                                                                                      'endpoints': ['/kekse'],
                                                                                      'line_nos': [266]},
                                                   "app.use(express.static(path.resolve('frontend/dist/frontend')))": {'calls': [{'callName': 'use',
                                                                                                                                  'columnNumber': 2,
                                                                                                                                  'isExternal': True,
                                                                                                                                  'lineNumber': 265,
                                                                                                                                  'paramTypes': ['ANY'],
                                                                                                                                  'resolvedMethod': "app.use(express.static(path.resolve('frontend/dist/frontend')))",
                                                                                                                                  'returnType': 'ANY'}],
                                                                                                                       'endpoints': ['/frontend/dist/frontend'],
                                                                                                                       'line_nos': [265]},
                                                   "app.use(morgan('combined',{stream:accessLogStream}))": {'calls': [{'callName': 'use',
                                                                                                                       'columnNumber': 2,
                                                                                                                       'isExternal': True,
                                                                                                                       'lineNumber': 308,
                                                                                                                       'paramTypes': ['ANY'],
                                                                                                                       'resolvedMethod': "app.use(morgan('combined',{stream:accessLogStream}))",
                                                                                                                       'returnType': 'ANY'}],
                                                                                                            'endpoints': ['/combined'],
                                                                                                            'line_nos': [308]},
                                                   "app.use(robots({UserAgent:'*',Disallow:'/ftp'}))": {'calls': [{'callName': 'use',
                                                                                                                   'columnNumber': 2,
                                                                                                                   'isExternal': True,
                                                                                                                   'lineNumber': 207,
                                                                                                                   'paramTypes': ['ANY'],
                                                                                                                   'resolvedMethod': "app.use(robots({UserAgent:'*',Disallow:'/ftp'}))",
                                                                                                                   'returnType': 'ANY'}],
                                                                                                        'endpoints': ['/ftp'],
                                                                                                        'line_nos': [207]}}}}}

    endpoints = js_usages_1.populate_endpoints(methods)
    endpoints = sort_openapi_result(endpoints)
    assert endpoints == {'/': {'get': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                              {'in': 'header', 'name': '__ecma.String'}],
               'responses': {}},
       'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                               {'in': 'header', 'name': '__ecma.String'}],
                'responses': {}},
       'x-atom-usages': {'call': {'routes/dataErasure.ts': [18, 54],
                                  'server.ts': [185]}}},
 '/.well-known/security.txt': {'get': {'parameters': [{'in': 'header',
                                                       'name': 'ANY'}],
                                       'responses': {}},
                               'x-atom-usages': {'call': {'server.ts': [196,
                                                                        197]}}},
 '/123.456.789': {'x-atom-usages': {'call': {'server.ts': [395]}}},
 '/Blockedillegalactivityby': {'get': {'parameters': [{'in': 'header',
                                                       'name': 'LAMBDA'},
                                                      {'in': 'header',
                                                       'name': '__ecma.String'}],
                                       'responses': {}},
                               'post': {'parameters': [{'in': 'header',
                                                        'name': 'LAMBDA'},
                                                       {'in': 'header',
                                                        'name': '__ecma.String'}],
                                        'responses': {}},
                               'x-atom-usages': {'call': {'routes/dataErasure.ts': [18,
                                                                                    54]}}},
 '/Invalidemail/passwordcannotbeempty': {'post': {'parameters': [{'in': 'header',
                                                                  'name': 'LAMBDA'},
                                                                 {'in': 'header',
                                                                  'name': '__ecma.String'}],
                                                  'responses': {}},
                                         'x-atom-usages': {'call': {'server.ts': [372]}}},
 '/Noanswerfound!': {'get': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                            {'in': 'header',
                                             'name': '__ecma.String'}],
                             'responses': {}},
                     'x-atom-usages': {'call': {'routes/dataErasure.ts': [18]}}},
 '/Noquestionfound!': {'get': {'parameters': [{'in': 'header',
                                               'name': 'LAMBDA'},
                                              {'in': 'header',
                                               'name': '__ecma.String'}],
                               'responses': {}},
                       'x-atom-usages': {'call': {'routes/dataErasure.ts': [18]}}},
 '/Preferred-Languages': {'get': {'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [197]}}},
 '/api-docs': {'x-atom-usages': {'call': {'server.ts': [263]}}},
 '/api/Addresss': {'get': {'parameters': [{'in': 'header',
                                           'name': '__ecma.String'}],
                           'responses': {}},
                   'post': {'parameters': [{'in': 'header',
                                            'name': '__ecma.String'}],
                            'responses': {}},
                   'x-atom-usages': {'call': {'server.ts': [412, 413]}}},
 '/api/Addresss/{id}': {'delete': {'parameters': [], 'responses': {}},
                        'get': {'parameters': [], 'responses': {}},
                        'parameters': [{'in': 'path',
                                        'name': 'id',
                                        'required': True}],
                        'put': {'parameters': [], 'responses': {}},
                        'x-atom-usages': {'call': {'server.ts': [414,
                                                                 415,
                                                                 416]}}},
 '/api/BasketItems': {'post': {'parameters': [{'in': 'header',
                                               'name': '__ecma.String'}],
                               'responses': {}},
                      'x-atom-usages': {'call': {'server.ts': [327, 391]}}},
 '/api/BasketItems/{id}': {'parameters': [{'in': 'path',
                                           'name': 'id',
                                           'required': True}],
                           'put': {'parameters': [], 'responses': {}},
                           'x-atom-usages': {'call': {'server.ts': [328,
                                                                    390]}}},
 '/api/Cards': {'get': {'parameters': [{'in': 'header',
                                        'name': '__ecma.String'}],
                        'responses': {}},
                'post': {'parameters': [{'in': 'header',
                                         'name': '__ecma.String'}],
                         'responses': {}},
                'x-atom-usages': {'call': {'server.ts': [402, 403]}}},
 '/api/Cards/{id}': {'delete': {'parameters': [], 'responses': {}},
                     'get': {'parameters': [], 'responses': {}},
                     'parameters': [{'in': 'path',
                                     'name': 'id',
                                     'required': True}],
                     'put': {'parameters': [], 'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [404, 405, 406]}}},
 '/api/Challenges': {'post': {'parameters': [{'in': 'header',
                                              'name': '__ecma.String'},
                                             {'in': 'header',
                                              'name': 'express-jwt:expressJwt:<returnValue>'}],
                              'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [342]}}},
 '/api/Challenges/{id}': {'parameters': [{'in': 'path',
                                          'name': 'id',
                                          'required': True}],
                          'x-atom-usages': {'call': {'server.ts': [343]}}},
 '/api/Complaints': {'get': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'},
                                            {'in': 'header',
                                             'name': 'express-jwt:expressJwt:<returnValue>'}],
                             'responses': {}},
                     'post': {'parameters': [{'in': 'header',
                                              'name': '__ecma.String'},
                                             {'in': 'header',
                                              'name': 'express-jwt:expressJwt:<returnValue>'}],
                              'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [345, 346]}}},
 '/api/Complaints/{id}': {'parameters': [{'in': 'path',
                                          'name': 'id',
                                          'required': True}],
                          'x-atom-usages': {'call': {'server.ts': [347]}}},
 '/api/Deliverys': {'get': {'parameters': [{'in': 'header',
                                            'name': '__ecma.String'}],
                            'responses': {}},
                    'x-atom-usages': {'call': {'server.ts': [417]}}},
 '/api/Deliverys/{id}': {'get': {'parameters': [], 'responses': {}},
                         'parameters': [{'in': 'path',
                                         'name': 'id',
                                         'required': True}],
                         'x-atom-usages': {'call': {'server.ts': [418]}}},
 '/api/Feedbacks': {'post': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'}],
                             'responses': {}},
                    'x-atom-usages': {'call': {'server.ts': [366, 368, 370]}}},
 '/api/Feedbacks/{id}': {'parameters': [{'in': 'path',
                                         'name': 'id',
                                         'required': True}],
                         'put': {'parameters': [], 'responses': {}},
                         'x-atom-usages': {'call': {'server.ts': [330, 397]}}},
 '/api/PrivacyRequests': {'get': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'},
                                                 {'in': 'header',
                                                  'name': 'express-jwt:expressJwt:<returnValue>'}],
                                  'responses': {}},
                          'post': {'parameters': [{'in': 'header',
                                                   'name': '__ecma.String'},
                                                  {'in': 'header',
                                                   'name': 'express-jwt:expressJwt:<returnValue>'}],
                                   'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [399,
                                                                   408,
                                                                   409]}}},
 '/api/PrivacyRequests/{id}': {'parameters': [{'in': 'path',
                                               'name': 'id',
                                               'required': True}],
                               'x-atom-usages': {'call': {'server.ts': [400,
                                                                        410]}}},
 '/api/Products': {'post': {'parameters': [{'in': 'header',
                                            'name': '__ecma.String'},
                                           {'in': 'header',
                                            'name': 'express-jwt:expressJwt:<returnValue>'}],
                            'responses': {}},
                   'x-atom-usages': {'call': {'server.ts': [338]}}},
 '/api/Products/{id}': {'delete': {'parameters': [], 'responses': {}},
                        'parameters': [{'in': 'path',
                                        'name': 'id',
                                        'required': True}],
                        'x-atom-usages': {'call': {'server.ts': [340]}}},
 '/api/Quantitys': {'post': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'},
                                            {'in': 'header',
                                             'name': 'express-jwt:expressJwt:<returnValue>'}],
                             'responses': {}},
                    'x-atom-usages': {'call': {'server.ts': [394]}}},
 '/api/Quantitys/{id}': {'delete': {'parameters': [], 'responses': {}},
                         'parameters': [{'in': 'path',
                                         'name': 'id',
                                         'required': True}],
                         'x-atom-usages': {'call': {'server.ts': [393, 395]}}},
 '/api/Recycles': {'get': {'parameters': [{'in': 'header',
                                           'name': '__ecma.String'}],
                           'responses': {}},
                   'post': {'parameters': [{'in': 'header',
                                            'name': '__ecma.String'},
                                           {'in': 'header',
                                            'name': 'express-jwt:expressJwt:<returnValue>'}],
                            'responses': {}},
                   'x-atom-usages': {'call': {'server.ts': [349, 350]}}},
 '/api/Recycles/{id}': {'delete': {'parameters': [], 'responses': {}},
                        'get': {'parameters': [], 'responses': {}},
                        'parameters': [{'in': 'path',
                                        'name': 'id',
                                        'required': True}],
                        'put': {'parameters': [], 'responses': {}},
                        'x-atom-usages': {'call': {'server.ts': [352,
                                                                 353,
                                                                 354]}}},
 '/api/SecurityAnswers': {'get': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'},
                                                 {'in': 'header',
                                                  'name': 'express-jwt:expressJwt:<returnValue>'}],
                                  'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [359]}}},
 '/api/SecurityAnswers/{id}': {'parameters': [{'in': 'path',
                                               'name': 'id',
                                               'required': True}],
                               'x-atom-usages': {'call': {'server.ts': [360]}}},
 '/api/SecurityQuestions': {'post': {'parameters': [{'in': 'header',
                                                     'name': '__ecma.String'},
                                                    {'in': 'header',
                                                     'name': 'express-jwt:expressJwt:<returnValue>'}],
                                     'responses': {}},
                            'x-atom-usages': {'call': {'server.ts': [356]}}},
 '/api/SecurityQuestions/{id}': {'parameters': [{'in': 'path',
                                                 'name': 'id',
                                                 'required': True}],
                                 'x-atom-usages': {'call': {'server.ts': [357]}}},
 '/api/Users': {'get': {'parameters': [{'in': 'header',
                                        'name': '__ecma.String'},
                                       {'in': 'header',
                                        'name': 'express-jwt:expressJwt:<returnValue>'}],
                        'responses': {}},
                'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                        {'in': 'header',
                                         'name': '__ecma.String'}],
                         'responses': {}},
                'x-atom-usages': {'call': {'server.ts': [332,
                                                         372,
                                                         384,
                                                         385,
                                                         386]}}},
 '/api/Users/{id}': {'parameters': [{'in': 'path',
                                     'name': 'id',
                                     'required': True}],
                     'x-atom-usages': {'call': {'server.ts': [333]}}},
 '/application.securityTxt.acknowledgements': {'get': {'responses': {}},
                                               'x-atom-usages': {'call': {'server.ts': [197]}}},
 '/application.securityTxt.contact': {'get': {'responses': {}},
                                      'x-atom-usages': {'call': {'server.ts': [197]}}},
 '/application.securityTxt.encryption': {'get': {'responses': {}},
                                         'x-atom-usages': {'call': {'server.ts': [197]}}},
 '/application.securityTxt.hiring': {'get': {'responses': {}},
                                     'x-atom-usages': {'call': {'server.ts': [179,
                                                                              197]}}},
 '/assets/i18n': {'x-atom-usages': {'call': {'server.ts': [216]}}},
 '/assets/public/images/padding': {'x-atom-usages': {'call': {'server.ts': [213]}}},
 '/assets/public/images/products': {'x-atom-usages': {'call': {'server.ts': [214]}}},
 '/assets/public/images/uploads': {'x-atom-usages': {'call': {'server.ts': [215]}}},
 '/b2b/v2': {'x-atom-usages': {'call': {'server.ts': [388]}}},
 '/b2b/v2/orders': {'post': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'}],
                             'responses': {}},
                    'x-atom-usages': {'call': {'server.ts': [602]}}},
 '/combined': {'x-atom-usages': {'call': {'server.ts': [308]}}},
 '/ctf.key': {'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                      {'in': 'header',
                                       'name': '__ecma.String'}],
                       'responses': {}},
              'x-atom-usages': {'call': {'routes/dataErasure.ts': [54]}}},
 '/dataErasureForm': {'get': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                             {'in': 'header',
                                              'name': '__ecma.String'}],
                              'responses': {}},
                      'x-atom-usages': {'call': {'routes/dataErasure.ts': [18]}}},
 '/dataErasureResult': {'post': {'parameters': [{'in': 'header',
                                                 'name': 'LAMBDA'},
                                                {'in': 'header',
                                                 'name': '__ecma.String'}],
                                 'responses': {}},
                        'x-atom-usages': {'call': {'routes/dataErasure.ts': [54]}}},
 '/dataerasure': {'x-atom-usages': {'call': {'server.ts': [610]}}},
 '/details': {'x-atom-usages': {'call': {'server.ts': [254, 258]}}},
 '/encryptionkeys': {'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                             {'in': 'header',
                                              'name': '__ecma.String'}],
                              'responses': {}},
                     'x-atom-usages': {'call': {'routes/dataErasure.ts': [54],
                                                'server.ts': [254]}}},
 '/encryptionkeys/{file}': {'parameters': [{'in': 'path',
                                            'name': 'file',
                                            'required': True}],
                            'x-atom-usages': {'call': {'server.ts': [255]}}},
 '/file': {'post': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                    'responses': {}},
           'x-atom-usages': {'call': {'server.ts': [281, 282, 283]}}},
 '/file-upload': {'post': {'parameters': [{'in': 'header',
                                           'name': '__ecma.String'}],
                           'responses': {}},
                  'x-atom-usages': {'call': {'server.ts': [281]}}},
 '/frontend/dist/frontend': {'x-atom-usages': {'call': {'server.ts': [265]}}},
 '/ftp': {'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                  {'in': 'header', 'name': '__ecma.String'}],
                   'responses': {}},
          'x-atom-usages': {'call': {'routes/dataErasure.ts': [54],
                                     'server.ts': [207, 249]}}},
 '/ftp/quarantine/{file}': {'parameters': [{'in': 'path',
                                            'name': 'file',
                                            'required': True}],
                            'x-atom-usages': {'call': {'server.ts': [251]}}},
 '/image': {'post': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                     'responses': {}},
            'x-atom-usages': {'call': {'server.ts': [284]}}},
 '/kekse': {'x-atom-usages': {'call': {'server.ts': [266]}}},
 '/logs': {'x-atom-usages': {'call': {'server.ts': [258]}}},
 '/metrics': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                      'responses': {}},
              'x-atom-usages': {'call': {'server.ts': [678]}}},
 '/profile': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                      'responses': {}},
              'post': {'parameters': [{'in': 'header',
                                       'name': '__ecma.String'}],
                       'responses': {}},
              'x-atom-usages': {'call': {'server.ts': [620, 621]}}},
 '/profile/image/file': {'post': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'}],
                                  'responses': {}},
                         'x-atom-usages': {'call': {'server.ts': [282]}}},
 '/profile/image/url': {'post': {'parameters': [{'in': 'header',
                                                 'name': '__ecma.String'}],
                                 'responses': {}},
                        'x-atom-usages': {'call': {'server.ts': [283]}}},
 '/promotion': {'get': {'parameters': [{'in': 'header',
                                        'name': '__ecma.String'}],
                        'responses': {}},
                'x-atom-usages': {'call': {'server.ts': [616]}}},
 '/redirect': {'get': {'parameters': [{'in': 'header',
                                       'name': '__ecma.String'}],
                       'responses': {}},
               'x-atom-usages': {'call': {'server.ts': [613]}}},
 '/rest/2fa/disable': {'post': {'responses': {}},
                       'x-atom-usages': {'call': {'server.ts': [435]}}},
 '/rest/2fa/setup': {'post': {'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [429]}}},
 '/rest/2fa/status': {'get': {'parameters': [{'in': 'header',
                                              'name': '__ecma.String'},
                                             {'in': 'header',
                                              'name': 'express-jwt:expressJwt:<returnValue>'},
                                             {'in': 'header',
                                              'name': 'routes/2fa.ts::program:status'}],
                              'responses': {}},
                      'x-atom-usages': {'call': {'server.ts': [427]}}},
 '/rest/2fa/verify': {'post': {'responses': {}},
                      'x-atom-usages': {'call': {'server.ts': [422]}}},
 '/rest/admin/application-configuration': {'get': {'parameters': [{'in': 'header',
                                                                   'name': '__ecma.String'}],
                                                   'responses': {}},
                                           'x-atom-usages': {'call': {'server.ts': [561]}}},
 '/rest/admin/application-version': {'get': {'parameters': [{'in': 'header',
                                                             'name': '__ecma.String'}],
                                             'responses': {}},
                                     'x-atom-usages': {'call': {'server.ts': [560,
                                                                              569]}}},
 '/rest/basket': {'x-atom-usages': {'call': {'server.ts': [325]}}},
 '/rest/basket/{id}': {'get': {'parameters': [], 'responses': {}},
                       'parameters': [{'in': 'path',
                                       'name': 'id',
                                       'required': True}],
                       'x-atom-usages': {'call': {'server.ts': [363, 557]}}},
 '/rest/basket/{id}/checkout': {'parameters': [{'in': 'path',
                                                'name': 'id',
                                                'required': True}],
                                'post': {'parameters': [], 'responses': {}},
                                'x-atom-usages': {'call': {'server.ts': [558]}}},
 '/rest/basket/{id}/coupon/{coupon}': {'parameters': [{'in': 'path',
                                                       'name': 'coupon',
                                                       'required': True},
                                                      {'in': 'path',
                                                       'name': 'id',
                                                       'required': True}],
                                       'put': {'parameters': [],
                                               'responses': {}},
                                       'x-atom-usages': {'call': {'server.ts': [559]}}},
 '/rest/basket/{id}/order': {'parameters': [{'in': 'path',
                                             'name': 'id',
                                             'required': True}],
                             'x-atom-usages': {'call': {'server.ts': [364]}}},
 '/rest/captcha': {'get': {'parameters': [{'in': 'header',
                                           'name': '__ecma.String'}],
                           'responses': {}},
                   'x-atom-usages': {'call': {'server.ts': [570]}}},
 '/rest/chatbot/respond': {'post': {'parameters': [{'in': 'header',
                                                    'name': '__ecma.String'}],
                                    'responses': {}},
                           'x-atom-usages': {'call': {'server.ts': [587]}}},
 '/rest/chatbot/status': {'get': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'}],
                                  'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [586]}}},
 '/rest/continue-code': {'get': {'parameters': [{'in': 'header',
                                                 'name': '__ecma.String'}],
                                 'responses': {}},
                         'x-atom-usages': {'call': {'server.ts': [563]}}},
 '/rest/continue-code-findIt': {'get': {'parameters': [{'in': 'header',
                                                        'name': '__ecma.String'}],
                                        'responses': {}},
                                'x-atom-usages': {'call': {'server.ts': [564]}}},
 '/rest/continue-code-findIt/apply/{continueCode}': {'parameters': [{'in': 'path',
                                                                     'name': 'continueCode',
                                                                     'required': True}],
                                                     'put': {'parameters': [],
                                                             'responses': {}},
                                                     'x-atom-usages': {'call': {'server.ts': [566]}}},
 '/rest/continue-code-fixIt': {'get': {'parameters': [{'in': 'header',
                                                       'name': '__ecma.String'}],
                                       'responses': {}},
                               'x-atom-usages': {'call': {'server.ts': [565]}}},
 '/rest/continue-code-fixIt/apply/{continueCode}': {'parameters': [{'in': 'path',
                                                                    'name': 'continueCode',
                                                                    'required': True}],
                                                    'put': {'parameters': [],
                                                            'responses': {}},
                                                    'x-atom-usages': {'call': {'server.ts': [567]}}},
 '/rest/continue-code/apply/{continueCode}': {'parameters': [{'in': 'path',
                                                              'name': 'continueCode',
                                                              'required': True}],
                                              'put': {'parameters': [],
                                                      'responses': {}},
                                              'x-atom-usages': {'call': {'server.ts': [568]}}},
 '/rest/country-mapping': {'get': {'parameters': [{'in': 'header',
                                                   'name': '__ecma.String'}],
                                   'responses': {}},
                           'x-atom-usages': {'call': {'server.ts': [573]}}},
 '/rest/deluxe-membership': {'get': {'parameters': [{'in': 'header',
                                                     'name': '__ecma.String'}],
                                     'responses': {}},
                             'post': {'parameters': [{'in': 'header',
                                                      'name': '__ecma.String'}],
                                      'responses': {}},
                             'x-atom-usages': {'call': {'server.ts': [583,
                                                                      584]}}},
 '/rest/image-captcha': {'get': {'parameters': [{'in': 'header',
                                                 'name': '__ecma.String'}],
                                 'responses': {}},
                         'x-atom-usages': {'call': {'server.ts': [571]}}},
 '/rest/languages': {'get': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'}],
                             'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [577]}}},
 '/rest/memories': {'get': {'parameters': [{'in': 'header',
                                            'name': '__ecma.String'}],
                            'responses': {}},
                    'post': {'parameters': [{'in': 'header',
                                             'name': '__ecma.String'}],
                             'responses': {}},
                    'x-atom-usages': {'call': {'server.ts': [284, 585]}}},
 '/rest/order-history': {'get': {'parameters': [{'in': 'header',
                                                 'name': '__ecma.String'}],
                                 'responses': {}},
                         'x-atom-usages': {'call': {'server.ts': [578]}}},
 '/rest/order-history/orders': {'get': {'parameters': [{'in': 'header',
                                                        'name': '__ecma.String'}],
                                        'responses': {}},
                                'x-atom-usages': {'call': {'server.ts': [579]}}},
 '/rest/order-history/{id}/delivery-status': {'parameters': [{'in': 'path',
                                                              'name': 'id',
                                                              'required': True}],
                                              'put': {'parameters': [],
                                                      'responses': {}},
                                              'x-atom-usages': {'call': {'server.ts': [580]}}},
 '/rest/products/reviews': {'patch': {'parameters': [{'in': 'header',
                                                      'name': '__ecma.String'},
                                                     {'in': 'header',
                                                      'name': 'express-jwt:expressJwt:<returnValue>'}],
                                      'responses': {}},
                            'post': {'parameters': [{'in': 'header',
                                                     'name': '__ecma.String'},
                                                    {'in': 'header',
                                                     'name': 'express-jwt:expressJwt:<returnValue>'}],
                                     'responses': {}},
                            'x-atom-usages': {'call': {'server.ts': [591,
                                                                     592]}}},
 '/rest/products/search': {'get': {'parameters': [{'in': 'header',
                                                   'name': '__ecma.String'}],
                                   'responses': {}},
                           'x-atom-usages': {'call': {'server.ts': [556]}}},
 '/rest/products/{id}/reviews': {'get': {'parameters': [], 'responses': {}},
                                 'parameters': [{'in': 'path',
                                                 'name': 'id',
                                                 'required': True}],
                                 'put': {'parameters': [], 'responses': {}},
                                 'x-atom-usages': {'call': {'server.ts': [589,
                                                                          590]}}},
 '/rest/repeat-notification': {'get': {'parameters': [{'in': 'header',
                                                       'name': '__ecma.String'}],
                                       'responses': {}},
                               'x-atom-usages': {'call': {'server.ts': [562]}}},
 '/rest/saveLoginIp': {'get': {'parameters': [{'in': 'header',
                                               'name': '__ecma.String'}],
                               'responses': {}},
                       'x-atom-usages': {'call': {'server.ts': [574]}}},
 '/rest/track-order/{id}': {'get': {'parameters': [], 'responses': {}},
                            'parameters': [{'in': 'path',
                                            'name': 'id',
                                            'required': True}],
                            'x-atom-usages': {'call': {'server.ts': [572]}}},
 '/rest/user/authentication-details': {'get': {'parameters': [{'in': 'header',
                                                               'name': '__ecma.String'}],
                                               'responses': {}},
                                       'x-atom-usages': {'call': {'server.ts': [362,
                                                                                555]}}},
 '/rest/user/change-password': {'get': {'parameters': [{'in': 'header',
                                                        'name': '__ecma.String'}],
                                        'responses': {}},
                                'x-atom-usages': {'call': {'server.ts': [551]}}},
 '/rest/user/data-export': {'post': {'parameters': [{'in': 'header',
                                                     'name': '__ecma.String'}],
                                     'responses': {}},
                            'x-atom-usages': {'call': {'server.ts': [575,
                                                                     576]}}},
 '/rest/user/login': {'post': {'parameters': [{'in': 'header',
                                               'name': '__ecma.String'}],
                               'responses': {}},
                      'x-atom-usages': {'call': {'server.ts': [550]}}},
 '/rest/user/reset-password': {'head': {'responses': {}},
                               'post': {'parameters': [{'in': 'header',
                                                        'name': '__ecma.String'}],
                                        'responses': {}},
                               'x-atom-usages': {'call': {'server.ts': [313,
                                                                        552]}}},
 '/rest/user/security-question': {'get': {'parameters': [{'in': 'header',
                                                          'name': '__ecma.String'}],
                                          'responses': {}},
                                  'x-atom-usages': {'call': {'server.ts': [553]}}},
 '/rest/user/whoami': {'get': {'parameters': [{'in': 'header',
                                               'name': '__ecma.String'}],
                               'responses': {}},
                       'x-atom-usages': {'call': {'server.ts': [554]}}},
 '/rest/wallet/balance': {'get': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'}],
                                  'responses': {}},
                          'put': {'parameters': [{'in': 'header',
                                                  'name': '__ecma.String'}],
                                  'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [581, 582]}}},
 '/rest/web3/nftMintListen': {'get': {'parameters': [{'in': 'header',
                                                      'name': '__ecma.String'}],
                                      'responses': {}},
                              'x-atom-usages': {'call': {'server.ts': [597]}}},
 '/rest/web3/nftUnlocked': {'get': {'parameters': [{'in': 'header',
                                                    'name': '__ecma.String'}],
                                    'responses': {}},
                            'x-atom-usages': {'call': {'server.ts': [596]}}},
 '/rest/web3/submitKey': {'post': {'parameters': [{'in': 'header',
                                                   'name': '__ecma.String'}],
                                   'responses': {}},
                          'x-atom-usages': {'call': {'server.ts': [595]}}},
 '/rest/web3/walletExploitAddress': {'post': {'parameters': [{'in': 'header',
                                                              'name': '__ecma.String'}],
                                              'responses': {}},
                                     'x-atom-usages': {'call': {'server.ts': [599]}}},
 '/rest/web3/walletNFTVerify': {'post': {'parameters': [{'in': 'header',
                                                         'name': '__ecma.String'}],
                                         'responses': {}},
                                'x-atom-usages': {'call': {'server.ts': [598]}}},
 '/security.txt': {'get': {'parameters': [{'in': 'header', 'name': 'ANY'}],
                           'responses': {}},
                   'x-atom-usages': {'call': {'server.ts': [196, 197]}}},
 '/snippets': {'get': {'parameters': [{'in': 'header',
                                       'name': '__ecma.String'}],
                       'responses': {}},
               'x-atom-usages': {'call': {'server.ts': [624]}}},
 '/snippets/fixes': {'post': {'parameters': [{'in': 'header',
                                              'name': '__ecma.String'}],
                              'responses': {}},
                     'x-atom-usages': {'call': {'server.ts': [628]}}},
 '/snippets/fixes/{key}': {'get': {'parameters': [], 'responses': {}},
                           'parameters': [{'in': 'path',
                                           'name': 'key',
                                           'required': True}],
                           'x-atom-usages': {'call': {'server.ts': [627]}}},
 '/snippets/verdict': {'post': {'parameters': [{'in': 'header',
                                                'name': '__ecma.String'}],
                                'responses': {}},
                       'x-atom-usages': {'call': {'server.ts': [626]}}},
 '/snippets/{challenge}': {'get': {'parameters': [], 'responses': {}},
                           'parameters': [{'in': 'path',
                                           'name': 'challenge',
                                           'required': True}],
                           'x-atom-usages': {'call': {'server.ts': [625]}}},
 '/solve/challenges/server-side': {'x-atom-usages': {'call': {'server.ts': [219]}}},
 '/support/logs': {'x-atom-usages': {'call': {'server.ts': [258, 259]}}},
 '/support/logs/{file}': {'parameters': [{'in': 'path',
                                          'name': 'file',
                                          'required': True}],
                          'x-atom-usages': {'call': {'server.ts': [260]}}},
 '/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg': {'get': {'parameters': [{'in': 'header',
                                                                                                 'name': '__ecma.String'}],
                                                                                 'responses': {}},
                                                                         'x-atom-usages': {'call': {'server.ts': [605]}}},
 '/this/page/is/hidden/behind/an/incredibly/high/paywall/that/could/only/be/unlocked/by/sending/1btc/to/us': {'get': {'parameters': [{'in': 'header',
                                                                                                                                      'name': '__ecma.String'}],
                                                                                                                      'responses': {}},
                                                                                                              'x-atom-usages': {'call': {'server.ts': [606]}}},
 '/token': {'post': {'parameters': [{'in': 'header', 'name': 'LAMBDA'},
                                    {'in': 'header', 'name': '__ecma.String'}],
                     'responses': {}},
            'x-atom-usages': {'call': {'routes/dataErasure.ts': [54]}}},
 '/trustproxy': {'x-atom-usages': {'call': {'server.ts': [312]}}},
 '/video': {'get': {'parameters': [{'in': 'header', 'name': '__ecma.String'}],
                    'responses': {}},
            'x-atom-usages': {'call': {'server.ts': [617]}}},
 '/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility': {'get': {'parameters': [{'in': 'header',
                                                                                                         'name': '__ecma.String'}],
                                                                                         'responses': {}},
                                                                                 'x-atom-usages': {'call': {'server.ts': [607]}}},
 '/{regex_param_1}/{file}': {'parameters': [{'in': 'path',
                                             'name': 'file',
                                             'required': True},
                                            {'in': 'path',
                                             'name': 'regex_param_1',
                                             'required': True,
                                             'schema': {'pattern': 'ftp(?!/quarantine)',
                                                        'type': 'string'}}],
                             'x-atom-usages': {'call': {'server.ts': [250]}}}}
